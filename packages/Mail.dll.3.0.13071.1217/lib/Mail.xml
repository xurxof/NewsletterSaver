<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Mail</name>
  </assembly>
  <members>
    <member name="T:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth">
      <summary>
            This class allows you to sign-in using Gmail 2-legged OAuth. It's a wrapper over generic <see cref="T:Limilabs.Client.Authentication.OAuth" /> class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.#ctor(System.String,System.String)">
      <summary>
            Creates new Gmail2LeggedOAuth object.
            </summary>
      <param name="consumerKey">Consumer key.</param>
      <param name="consumerSecret">Consumer secret.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.GetXOAuthKey(System.String)">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" /> methods.
            </summary>
      <param name="email">Email of the mailbox you want access.</param>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.GetXOAuthKeyForImap(System.String)">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" /> methods.
            </summary>
      <param name="email">Email of the mailbox you want access.</param>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.GetXOAuthKeyForSmtp(System.String)">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)" /> methods.
            </summary>
      <param name="email">Email of the mailbox you want access.</param>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="T:Limilabs.Client.Authentication.Google.GmailOAuth">
      <summary>
            This class allows you to sign-in using Google 3-legged OAuth. It's a wrapper over generic <see cref="T:Limilabs.Client.Authentication.OAuth" /> class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.#ctor">
      <summary>
            Creates new GmailOAuth object with consumer key and consumer secret set to "anonymous".
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.#ctor(System.String,System.String)">
      <summary>
            Creates new GmailOAuth object.
            </summary>
      <param name="consumerKey">Consumer key.</param>
      <param name="consumerSecret">Consumer secret.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.#ctor(Limilabs.Client.Authentication.Google.OAuthToken)">
      <summary>
            Creates new GmailOAuth object.
            </summary>
      <param name="consumerToken">Consumer token (consumer key and consumer secret).</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String)">
      <summary>
            Gets url you should redirect your user to, in order for him to authorize Google access.
            Default scopes are <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ImapAndSmtp" /> and <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.EmailAddressScope" /></summary>
      <param name="callback">Callback address. Google will redirect user to this address after authorization. Your application needs to read the oauth_verifier url parameter.</param>
      <returns>Url you should redirect the user to.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String,System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})">
      <summary>
            Gets url you should redirect your user to, in order for him to authorize IMAP access.
            </summary>
      <param name="callback">Callback address. Google will redirect user to this address after authorization. Your application needs to read the oauth_verifier url parameter.</param>
      <param name="scopes">Scopes you request access to.</param>
      <returns>Url you should redirect the user to.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl">
      <summary>
            Gets url you should redirect your user to, in order for him to authorize IMAP access.
            This method uses oob instead of callback this means that your user will need to copy verification code to your application.
            </summary>
      <returns>Url you should redirect the user to.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})">
      <summary>
            Gets url you should redirect your user to, in order for him to authorize IMAP access.
            This method uses oob instead of callback this means that your user will need to copy verification code to your application.
            </summary>
      <param name="scopes">Scopes you request access to.</param>
      <returns>Url you should redirect the user to.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAccessToken(System.String)">
      <summary>
            Contacts Google to exchange an authorized request token for an access token.
            </summary>
      <param name="oauthVerifier">oauth_verifier url parameter.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.SetAccessToken(Limilabs.Client.Authentication.Google.OAuthToken)">
      <summary>
            Sets access token. Typically you don't need to use this method, as <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAccessToken(System.String)" /> methods retrieves access token for you.
            </summary>
      <param name="accessToken">Access token.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKey">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" /> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)" /> methods.
            </summary>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForImap">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" /> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)" /> methods.
            </summary>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForImap(System.String)">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" /> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)" /> methods.
            </summary>
      <param name="email">Email address.</param>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForSmtp">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)" /> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)" /> methods.
            </summary>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForSmtp(System.String)">
      <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)" /> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)" /> methods.
            </summary>
      <param name="email">Email address.</param>
      <returns>XOAuthKey.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)">
      <summary>
            Revokes access for specified token (retrieved using <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForImap" /> or  <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForSmtp" /> method)
            </summary>
      <param name="oauthImapKey">Token to revoke access for.</param>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.GmailOAuth.ConsumerToken">
      <summary>
            Gets consumer token.
            </summary>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.GmailOAuth.RequestToken">
      <summary>
            Gets request token.
            </summary>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.GmailOAuth.AccessToken">
      <summary>
            Gets or sets access token.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.Google.GoogleApi">
      <summary>
            Provides access to Google API.
            </summary>
      <seealso cref="T:Limilabs.Client.Authentication.Google.GmailOAuth" />
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.#ctor(System.String)">
      <summary>
            Creates new instance of this class.
            </summary>
      <param name="accessToken">Access token.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.#ctor(Limilabs.Client.Authentication.Google.OAuthToken,Limilabs.Client.Authentication.Google.OAuthToken)">
      <summary>
            Creates new instance of this class.
            </summary>
      <param name="consumer">Consumer token.</param>
      <param name="accessToken">Access token.</param>
      <seealso cref="P:Limilabs.Client.Authentication.Google.GmailOAuth.AccessToken" />
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.GetEmail">
      <summary>
            Gets email address of the user.
            You need to specify <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.EmailAddressScope" /> when calling <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})" /> or <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String,System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})" /> to be able to use this method.
            </summary>
      <returns>User's email address.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.GetContacts">
      <summary>
            Gets all contacts of the user.
            You need to specify <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope" /> when calling <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})" /> or <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String,System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})" /> to be able to use this method.
            </summary>
      <returns>User's contacts.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.RevokeToken(System.String)">
      <summary>
            Revokes specified token.
            </summary>
      <param name="token">Token to revoke.</param>
    </member>
    <member name="T:Limilabs.Client.Authentication.Google.GoogleScope">
      <summary>
            Represents Google scope (permission). 
            You can use static fields of this class like: <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ImapAndSmtp" />, <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.EmailAddressScope" /> and <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope" />.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BasicConstant">
      <summary>
            Base class for all constant values.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BasicConstant.Equals(Limilabs.Mail.BasicConstant)">
      <summary>
             Determines whether the specified <see cref="T:Limilabs.Mail.BasicConstant" /> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
      <param name="other">The <see cref="T:Limilabs.Mail.BasicConstant" /> to compare with the current <see cref="T:Limilabs.Mail.BasicConstant" /></param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Mail.BasicConstant.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Mail.BasicConstant.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current <see cref="T:Limilabs.Mail.BasicConstant" />.</returns>
    </member>
    <member name="M:Limilabs.Mail.BasicConstant.op_Equality(Limilabs.Mail.BasicConstant,Limilabs.Mail.BasicConstant)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant" /> objects are equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Limilabs.Mail.BasicConstant.op_Inequality(Limilabs.Mail.BasicConstant,Limilabs.Mail.BasicConstant)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant" /> objects are not equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are not equal; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:Limilabs.Mail.BasicConstant.ToString">
      <summary>
            Returns the <see cref="P:Limilabs.Mail.BasicConstant.Name" /> of this object.
            </summary>
      <returns>
        <see cref="P:Limilabs.Mail.BasicConstant.Name" /> of this object.</returns>
    </member>
    <member name="P:Limilabs.Mail.BasicConstant.Name">
      <summary>
            Gets the name of the constant.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.ImapAndSmtp">
      <summary>
            IMAP and SMTP access.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.EmailAddressScope">
      <summary>
            Email address access.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope">
      <summary>
            Contacts access.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.GoogleScope.#ctor(System.String)">
      <summary>
            Creates new Google scope.
            </summary>
      <param name="url">Scope url.</param>
    </member>
    <member name="T:Limilabs.Client.Authentication.Google.OAuthToken">
      <summary>
            Represents OAuth token nad token secret.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.OAuthToken.#ctor(System.String,System.String)">
      <summary>
            Creates new OAuthToken object.
            </summary>
      <param name="token">OAuth token.</param>
      <param name="tokenSecret">OAuth token secret.</param>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.OAuthToken.Token">
      <summary>
            Gets OAuth token.
            </summary>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.OAuthToken.TokenSecret">
      <summary>
            Gets OAuth token secret.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.Google.ReturnUrl">
      <summary>
            Provides easy access to url parameters required to finish OAuth authorization.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.Google.ReturnUrl.#ctor(System.String)">
      <summary>
            Creates new instance of this class.
            </summary>
      <param name="returnUrl">Raw return url e.g. "https://www.yourwebsite.com?oauth_verifier=XXX&amp;oauth_token=YYY".</param>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.ReturnUrl.OAuthToken">
      <summary>
            Gets oauth_token url parameter, that can be used to retrieve <see cref="T:Limilabs.Client.Authentication.Google.GmailOAuth" /> class from permanent storage.
            </summary>
    </member>
    <member name="P:Limilabs.Client.Authentication.Google.ReturnUrl.OAuthVerifier">
      <summary>
            Gets oauth_verifier url parameter, that can be used to retrieve access token by using <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAccessToken(System.String)" /> method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.HttpMethod">
      <summary>
            HTTP protocol method used by <see cref="T:Limilabs.Client.Authentication.OAuth" /> authentication (<see cref="M:Limilabs.Client.Authentication.IOAuth.HttpMethod(Limilabs.Client.Authentication.HttpMethod)" />).
            </summary>
      <seealso cref="T:Limilabs.Client.Authentication.OAuth" />
      <seealso cref="T:Limilabs.Client.Authentication.IOAuth" />
      <seealso cref="T:Limilabs.Client.Authentication.ISignedOAuth" />
    </member>
    <member name="F:Limilabs.Client.Authentication.HttpMethod.GET">
      <summary>
            GET method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.HttpMethod.POST">
      <summary>
            POST method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.IOAuth">
      <summary>
            Represents not signed OAuth request.
            </summary>
      <seealso cref="T:Limilabs.Client.Authentication.OAuth" />
      <seealso cref="T:Limilabs.Client.Authentication.ISignedOAuth" />
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.Consumer(System.String,System.String)">
      <summary>
            Sets the consumer.
            </summary>
      <param name="consumerKey">Consumer key</param>
      <param name="consumerSecret">Consumer secret</param>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.SignatureMethod(Limilabs.Client.Authentication.SignatureType)">
      <summary>
            Sets the signature method.
            </summary>
      <param name="signatureMethod">Signature method</param>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.HttpMethod(Limilabs.Client.Authentication.HttpMethod)">
      <summary>
            Sets HTTP method (GET or POST).
            </summary>
      <param name="httpMethod">HTTP method (GET or POST).</param>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.TimeStamp(System.String)">
      <summary>
            Sets the timestamp. Timestamp is generated automatically if not set.
            This method should be used in tests only.
            </summary>
      <param name="timestamp">Timestamp</param>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.Nonce(System.String)">
      <summary>
            Sets nonce. Nonce is generated automatically if not set.
            This method should be used in tests only.
            </summary>
      <param name="nonce">Nonce.</param>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.Token(System.String)">
      <summary>
            Sets OAuth token (oauth_token).
            </summary>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.TokenSecret(System.String)">
      <summary>
            Sets OAuth token secret (oauth_token_secret).
            </summary>
      <returns>This OAuth object.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.AddParameter(System.String,System.String)">
      <summary>
            Adds new parameter to this request.
            </summary>
      <param name="name">Name of the parameter.</param>
      <param name="value">Value of the parameter.</param>
      <returns>This OAuth object.</returns>
      <seealso cref="T:Limilabs.Client.Authentication.OAuthParameterName" />
    </member>
    <member name="M:Limilabs.Client.Authentication.IOAuth.Sign">
      <summary>
            Signs this request and creates signed OAuth object.
            </summary>
      <returns>Signed OAuth object.</returns>
    </member>
    <member name="T:Limilabs.Client.Authentication.ISignedOAuth">
      <summary>
            Represents signed OAuth request.
            </summary>
      <seealso cref="T:Limilabs.Client.Authentication.OAuth" />
      <seealso cref="T:Limilabs.Client.Authentication.IOAuth" />
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetUrl">
      <summary>
            Gets entire url including parameters, OAuth parameters and signature.
            </summary>
      <returns>Url including parameters, OAuth parameters and signature.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetUrlBase">
      <summary>
            Gets base url of this request.
            </summary>
      <returns>Base url of this request.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetXOAuthKey">
      <summary>
            Gets XOAuth key that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" /> or <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)" /> login methods.
            </summary>
      <returns>XOAuth key.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetSignature">
      <summary>
            Gets signature of this request.
            </summary>
      <returns>Request signature.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetNormalizedUrl">
      <summary>
            Gets normalized url (parameters are sorted by name) of this request.
            </summary>
      <returns>Normalized url.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetNormalizedParameters">
      <summary>
            Gets normalized parameter (sorted by name) of this request.
            </summary>
      <returns>Normalized parameter list.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetParameters">
      <summary>
            Gets parameter collection of this request.
            This collection includes all OAuth parameters and signature.
            </summary>
      <returns>Request parameter collection. Includes all OAuth parameters and signature</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ISignedOAuth.ExecuteWebRequest">
      <summary>
            Executes a web request using HTTP protocol, and method specified by <see cref="M:Limilabs.Client.Authentication.IOAuth.HttpMethod(Limilabs.Client.Authentication.HttpMethod)" />.
            </summary>
      <returns>Parameter list returned by the server.</returns>
    </member>
    <member name="T:Limilabs.Client.Authentication.SSPIException">
      <summary>
            Represents SSPI exception.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.SSPIMechanism">
      <summary>
             Represents SSPI mechanism.
             </summary>
      <remarks>
             SSPI authentication methods (NTLM, Kerberos, Negotiate) can work in two modes:
             
             1. The user specifies their credentials explicitly (like other authentication methods work), and authentication token is created from them.
             
             2. Integrated Windows Authentication (IWA). 
             The authentication token is created by Windows from the credentials of the currently logged Windows user. 
             The application never deals with the account password. 
             IWA mode provides increased security and spares the end user from entering their credentials.
             
             IWA, however, cannot be used when the currently logged Windows user is not an interactive user. 
             
             In web applications, you often deal with system users (like NETWORK SERVICE, ASPNET, etc). 
             To be able to use IWA in an ASP.NET application, the application itself must run under the context of an interactive user 
             (&lt;authentication mode="Windows"/&gt; in web.config).
            
             Also, the user from whose context the authentication token is constructed, must have a valid mailbox on the e-mail server. 
             This is important as even if the given user is registered in the Active Directory and can log in the domain, 
             it does not necessarily mean that the system has already provisioned their mailbox.
             </remarks>
    </member>
    <member name="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM">
      <summary>
            NTLM mechanism.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos">
      <summary>
            Kerberos mechanism. Kerberos is the technological successor to NTLM.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate">
      <summary>
            Negotiate mechanism. Selects Kerberos and if not available, NTLM protocol.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.OAuth">
      <summary>
            This class allows you to create signed OAuth requests.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.OAuth.ForUrl(System.String)">
      <summary>
            Creates new OAuth object for specific url.
            </summary>
      <param name="url">Base url.</param>
      <returns>OAuth object.</returns>
    </member>
    <member name="T:Limilabs.Client.Authentication.OAuthParameterName">
      <summary>
            Groups all OAuth parameter names.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthConsumerKey">
      <summary>
            'oauth_consumer_key' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthCallback">
      <summary>
            'oauth_callback' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthVersion">
      <summary>
            'oauth_version' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthSignatureMethod">
      <summary>
            'oauth_signature_method' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthSignature">
      <summary>
            'oauth_signature' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthTimestamp">
      <summary>
            'oauth_timestamp' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthNonce">
      <summary>
            'oauth_nonce' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthToken">
      <summary>
            'oauth_token' parameter name.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthTokenSecret">
      <summary>
            'oauth_token_secret' parameter.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthVerifier">
      <summary>
            'oauth_verifier' parameter.
            </summary>
    </member>
    <member name="T:Limilabs.Client.Authentication.ParameterList">
      <summary>
            Represents <see cref="T:Limilabs.Client.Authentication.QueryParameter" /> collection.
            </summary>
      <seealso cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetNormalizedParameters" />
      <seealso cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetParameters" />
      <seealso cref="M:Limilabs.Client.Authentication.ISignedOAuth.ExecuteWebRequest" />
      <seealso cref="T:Limilabs.Client.Authentication.OAuthParameterName" />
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.GetValue(System.String)">
      <summary>
            Gets value of the parameter by name.
            </summary>
      <param name="name">Name of the parameter to search for.</param>
      <returns>Value of the query parameter with specified name -or- <see langword="null" /> if not found.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.Add(System.String,System.String)">
      <summary>
            Adds new query parameter with specified name and value to this collection.
            </summary>
      <param name="name">Parameter name.</param>
      <param name="value">Parameter value.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.Add(Limilabs.Client.Authentication.QueryParameter)">
      <summary>
            Adds specified query parameter to this collection.
            </summary>
      <param name="queryParameter">Parameter to add.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.SortByName">
      <summary>
            Sorts parameters by name.
            </summary>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.Render">
      <summary>
            Renders parameter list to string in url format ("name=value&amp;name2=value2").
            Values are always encoded and never quoted.
            </summary>
      <returns>Parameters in url format.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.RenderAsHeader">
      <summary>
            Renders parameter list to string in http header format ("name=value,name2=value2").
            </summary>
      <returns>Parameters in url format.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.Remove(System.String)">
      <summary>
            Removes all parameters with specified name.
            </summary>
      <param name="name">Name of the parameters to remove.</param>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.Parse(System.String)">
      <summary>
            Parses specified query string and creates parameter collection.
            </summary>
      <param name="queryString">Query string to parse.</param>
      <returns>New parameter list.</returns>
    </member>
    <member name="M:Limilabs.Client.Authentication.ParameterList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>Enumerator that iterates through the collection</returns>
    </member>
    <member name="P:Limilabs.Client.Authentication.ParameterList.Count">
      <summary>
            Gets the number of parameters in this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Client.Authentication.ParameterList.Item(System.String)">
      <summary>
            Gets parameter by name.
            </summary>
      <param name="name">Name of the parameter to search for.</param>
      <returns>Query parameter with specified name -or- <see langword="null" /> if not found.</returns>
      <seealso cref="T:Limilabs.Client.Authentication.OAuthParameterName" />
    </member>
    <member name="T:Limilabs.Client.Authentication.QueryParameter">
      <summary>
            Represents query parameter.
            </summary>
      <seealso cref="M:Limilabs.Client.Authentication.IOAuth.AddParameter(System.String,System.String)" />
      <seealso cref="T:Limilabs.Client.Authentication.ParameterList" />
    </member>
    <member name="M:Limilabs.Client.Authentication.QueryParameter.#ctor(System.String,System.String)">
      <summary>
            Creates new instance of query parameter.
            </summary>
      <param name="name">Parameter name.</param>
      <param name="value">Parameter value.</param>
    </member>
    <member name="P:Limilabs.Client.Authentication.QueryParameter.Name">
      <summary>
            Gets parameter name.
            </summary>
    </member>
    <member name="P:Limilabs.Client.Authentication.QueryParameter.Value">
      <summary>
            Gets parameter value.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.FluentThread">
      <summary>
            Represents IMAP threading query. You can use <see cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)" /> method to create this object.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
      <remarks>
        <see cref="F:Limilabs.Client.IMAP.ResultType.Uids" /> is default, use <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)" /> method to change the result type.
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.SetThreadMethod(Limilabs.Client.IMAP.ThreadMethod)">
      <summary>
            Sets threading method. You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods" /> method to get all methods supported by remote server.
            </summary>
      <param name="method">Threading method remote server should use.</param>
      <returns>This threading query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)">
      <summary>
            Sets the result type (message numbers or UIDs) of this threading query.
            </summary>
      <param name="resultType">Result type.</param>
      <returns>This threading query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.UseEncoding(System.Text.Encoding)">
      <summary>
            Forces the use of specified encoding.
            </summary>
      <param name="encoding">Search parameters encoding.</param>
      <returns>This threading query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.NoCharset">
      <summary>
            Forces the client not to use any encoding, CHARSET command is not issued.
            </summary>
      <returns>This threading query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.Where(Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Adds search criteria to this threading query.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> and other <see cref="T:Limilabs.Client.IMAP.Expression" /> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery" /> to this method.
            </summary>
      <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> to join several criterions.</param>
      <returns>This threading query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.GetThreads">
      <summary>
            Issues the threading query and retrieves results, that match the search criteria, using server-side threading.
            </summary>
      <returns>List of message threads.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentThread.op_Implicit(Limilabs.Client.IMAP.FluentThread)~System.Collections.Generic.List{Limilabs.Client.IMAP.MessageThread}">
      <summary>
            Issues the threading query and retrieves results, that match the search criteria, using server-side threading.
            </summary>
      <param name="search">Threading query.</param>
      <returns>List of message threads.</returns>
    </member>
    <member name="T:Limilabs.Client.IMAP.ICriterion">
      <summary>
            Represents IMAP search criteria.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.ICriterion.Render(Limilabs.Client.IMAP.ImapCommand)">
      <summary>
            Renders current criteria object to specified command.
            </summary>
      <param name="command">Command to render on.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.ICriterion.IsASCII">
      <summary>
            Returns true if this criterion requires only ASCII characters to be rendered.
            </summary>
      <returns>True if this criterion requires only ASCII characters to be rendered, false otherwise.</returns>
    </member>
    <member name="T:Limilabs.Client.IMAP.Envelope">
      <summary>
             Represents combined information about envelope (subject, from to, ...) and structure (attachments) of the email stored on the IMAP server.
             You can use  <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})" />
             methods to get MessageInfos for specified emails.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.UID">
      <summary>
             Gets the UID of the message on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.MessageNumber">
      <summary>
             Gets the message number on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.Subject">
      <summary>
            Gets the subject of the message ('Subject' header). 
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.InReplyTo">
      <summary>
            Gets or sets parent message id of the message ('In-Reply-To' header).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.MessageID">
      <summary>
            Gets or sets id of the message ('Message-ID' header).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.Date">
      <summary>
            Gets the send date of the message ('Date' header). 
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.From">
      <summary>
            Gets the author(s) of the message ('From' header).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.Sender">
      <summary>
            Gets mailbox of the agent responsible for the actual transmission ('Sender' header).
            If 'Sender' is empty you should use <see cref="P:Limilabs.Client.IMAP.Envelope.From" /> property.
            </summary>
      <remarks>
            'Sender' field is not required if 'From' property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox" />.
            'Sender' property is filled when message is from more than one person ('From' contains more than one mailbox).
            In such case it is needed to provide information which mailbox is responsible for the actual transmission.
            </remarks>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.ReplyTo">
      <summary>
            Gets 'Reply-to' field, mailbox(es) to which the author of the message suggests that replies be sent.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.To">
      <summary>
            Gets 'To' field, address(es) of the primary recipient(s) of the message.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.Cc">
      <summary>
            Gets the addresses of others who are to receive the message, 
            even tough the content of the message may not be directed at them ('CC', Carbon Copy header). 
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.Bcc">
      <summary>
            Gets the addresses of others who are to receive the message ('BCC', Blind Carbon Copy header), 
            tough the content of the message may not be directed at them. 
            This collection can be modified.
            May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.InternalDateString">
      <summary>
            Gets a string representing the internal date of the message (INTERNALDATE).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.InternalDate">
      <summary>
            Gets the internal date of the message (INTERNALDATE).
            May be <c>null</c> in case of parsing error.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.GmailThreadId">
      <summary>
            Gmail provides a thread ID (X-GM-THRID) to associate groups of messages in the same manner as in the Gmail web interface.
            The thread ID is a 64-bit unsigned integer.
            This property is set only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.GmailMessageId">
      <summary>
            Gmail provides a unique message ID (X-GM-MSGID) for each email so that a unique message may be identified across multiple folders. 
            The message ID is a 64-bit unsigned integer.
            This property is set only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Envelope.Size">
      <summary>
            Size of the message.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.FolderFlag">
      <summary>
            Represents flag used by IMAP protocol to mark folders.
            Static fields of this class represent most common flags (e.g. <see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox" />, <see cref="F:Limilabs.Client.IMAP.FolderFlag.Sent" />, ...).
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.XInbox">
      <summary>
            "\Inbox" flag used by XLIST command.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.XAllMail">
      <summary>
            "\AllMail" flag used by XLIST command.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.XImportant">
      <summary>
            "\Important" flag used by XLIST command.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.XSpam">
      <summary>
            "\Spam" flag used by XLIST command.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.XStarred">
      <summary>
            "\Starred" flag used by XLIST command.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.All">
      <summary>
            This folder presents all messages in the user's message store (\All).
            Implementations MAY omit some messages, such as, perhaps, those in \Trash and \Junk.  
            When this special use is supported, it is almost certain to represent a virtual folder.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Archive">
      <summary>
            This folder is used to archive messages (\Archive). 
            The meaning of an "archival" folder is server-dependent; typically, it will be used to get messages out of the inbox, 
            or otherwise keep them out of the user's way, while still making them accessible.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Drafts">
      <summary>
            This folder is used to hold draft messages - typically, messages that are being composed but have not yet been sent (\Drafts).
            In some server implementations, this might be a virtual folder,
            containing messages from other folders that are marked with the <see cref="F:Limilabs.Client.IMAP.Flag.Draft" /> message flag.  
            Alternatively, this might just be advice that a client put drafts here.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Flagged">
      <summary>
            This folder presents all messages marked in some way as "important" (\Flagged). 
            When this special use is supported, it is likely to represent a virtual folder collecting messages (from other folders) 
            that are marked with the "\Flagged" message flag.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Junk">
      <summary>
            This folder is where messages deemed to be junk mail are held (\Junk).
            Some server implementations might put messages here automatically.  
            Alternatively, this might just be advice to a client-side spam filter.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Sent">
      <summary>
            This folder is used to hold copies of messages that have been sent (\Sent).  
            Some server implementations might put messages here automatically.  
            Alternatively, this might just be advice that a client save sent messages here. 
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Trash">
      <summary>
            This folder is used to hold messages that have been deleted or marked for deletion (\Trash).  
            In some server implementations, this might be a virtual folder, containing messages from other folders. 
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.HasChildren">
      <summary>
            The presence of this attribute indicates that the folder has child folders that are accessible to the user (\HasChildren).
            </summary>
      <remarks>
        <a href="http://www.limilabs.com/mail/rfc/3348">RFC 3348</a>
      </remarks>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren">
      <summary>
            The presence of this attribute indicates that the folder has NO child mailboxes that are accessible to the user.  
            If a folder has the <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoInferiors" /> attribute, the
            <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren" /> attribute is redundant and SHOULD be omitted. (\HasNoChildren).         
            </summary>
      <remarks>
        <a href="http://www.limilabs.com/mail/rfc/3348">RFC 3348</a>
      </remarks>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.NoInferiors">
      <summary>
            It is not possible for any child levels of hierarchy to exist under this name; 
            no child levels exist now and none can be created in the future (\Noinferiors).
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.NoSelect">
      <summary>
             It is not possible to use this name as a selectable folder. (\Noselect).
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Marked">
      <summary>
            The folder has been marked "interesting" by the server; 
            the folder probably contains messages that have been added since the last time the folder was selected (\Marked).
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.FolderFlag.Unmarked">
      <summary>
            The folder does not contain any additional messages since the last time the folder was selected (\Unmarked).
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.GmailMessageLabels">
      <summary>
            Represents Gmail labels associated with the message.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.GmailMessageLabels.UID">
      <summary>
             Message UID on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.GmailMessageLabels.MessageNumber">
      <summary>
             Message number on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.GmailMessageLabels.Labels">
      <summary>
            Flags of the specified message.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.IDInformation">
      <summary>
            Represents client identification information used by ID command (<see cref="F:Limilabs.Client.IMAP.ImapExtension.ID" />)
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.IDInformation.Name">
      <summary>
            Name of the program.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.IDInformation.Version">
      <summary>
            Version number of the program.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.IDInformation.Vendor">
      <summary>
            Vendor of the program.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.IDInformation.Contact">
      <summary>
            Contact email for the program.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapAuthenticationMethod">
      <summary>
            Represents authentication methods supported by the remote server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> method to obtain the list of all methods supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.Login">
      <summary>
            AUTH=LOGIN authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.Plain">
      <summary>
            AUTH=PLAIN authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.CramMD5">
      <summary>
            AUTH=CRAM-MD5 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.DigestMD5">
      <summary>
            AUTH=DIGEST-MD5 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.XOAuth">
      <summary>
            AUTH=XOAUTH authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.XOAuth2">
      <summary>
            AUTH=XOAUTH2 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.NTLM">
      <summary>
            AUTH=NTLM authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.GssApi">
      <summary>
            AUTH=GSSAPI authentication method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapAuthExtension">
      <summary>
            Represents IMAP AUTH extension.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapExtension">
      <summary>
            Represents extensions supported by the remote server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method to obtain the list of all extensions supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.IMAP4rev1">
      <summary>
            Represents IMAP4rev1 extension.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.Idle">
      <summary>
            Represents IDLE extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.Idle" /> or <see cref="M:Limilabs.Client.IMAP.Imap.Idle(System.TimeSpan)" /> to wait for mailbox changes. 
            (<a href="http://www.limilabs.com/mail/rfc/2177">RFC 2177</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus">
      <summary>
            Represents UIDPLUS extension. You can use return value of <see cref="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,Limilabs.Mail.IMail)" />, <see cref="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,System.String)" />, copy and move methods.
            (<a href="http://www.limilabs.com/mail/rfc/4315">RFC 4315</a>)
             </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.XList">
      <summary>
            Represents XLIST extension. You can <see cref="T:Limilabs.Client.IMAP.CommonFolders" /> class to get common folder names (e.g. Spam, Sent items).
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.Sort">
      <summary>
            Represents SORT extension. You can use <see cref="M:Limilabs.Client.IMAP.FluentSearch.Sort(Limilabs.Client.IMAP.ISorter)" /> to sort search results.
            (<a href="http://www.limilabs.com/mail/rfc/5256">RFC 5256</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.Auth">
      <summary>
            Represents AUTH extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> to obtain all authentication methods supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.StartTLS">
      <summary>
            Represents STARTTLS extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.StartTLS" /> to secure the connection.
            (<a href="http://www.limilabs.com/mail/rfc/2595">RFC 2595</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.LoginDisabled">
      <summary>
        <see cref="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.Login" /> is disabled.
            <see cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" /> is going to invoke <see cref="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)" /> method.
            (<a href="http://www.limilabs.com/mail/rfc/2595">RFC 2595</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.Namespace">
      <summary>
            Represents NAMESPACE extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetNamespaces" /> method.  
            (<a href="http://www.limilabs.com/mail/rfc/2342">RFC 2342</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.Quota">
      <summary>
            Represents QUOTA extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetQuota(System.String)" /> and <see cref="M:Limilabs.Client.IMAP.Imap.GetQuotaRoot(System.String)" /> methods.
            (<a href="http://www.limilabs.com/mail/rfc/2087">RFC 2087</a>).
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1">
      <summary>
            Represents Gmail X-GM-EXT-1 extensions: X-GM-RAW, X-GM-MSGID, X-GM-THRID, X-GM-LABELS.
            
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailThreadId" />, 
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailMessageId" /><seealso cref="M:Limilabs.Client.IMAP.Expression.GmailThreadId(System.String)" /><seealso cref="M:Limilabs.Client.IMAP.Expression.GmailMessageId(System.String)" /><seealso cref="M:Limilabs.Client.IMAP.Expression.GmailRawSearch(System.String)" /><seealso cref="M:Limilabs.Client.IMAP.Expression.GmailLabel(System.String)" /><seealso cref="P:Limilabs.Client.IMAP.MessageInfo.GmailLabels" /><seealso cref="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Collections.Generic.List{System.Int64})" /><seealso cref="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Int64)" /><seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" /><seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)" /><seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" /><seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)" /></summary>
            (http://code.google.com/apis/gmail/imap/)
        </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.ID">
      <summary>
            Represents ID extension. 
            (<a href="http://www.limilabs.com/mail/rfc/2971">RFC 2971</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.SASLIR">
      <summary>
            Represents SASL-IR (SASL initial client response) extension. 
            Servers that support this extension will accept an optional initial client response with the AUTHENTICATE command for any SASL mechanisms which support it.
            (<a href="http://www.limilabs.com/mail/rfc/4959">RFC 4959</a>)
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapExtension.SpecialUse">
      <summary>
            Represents SPECIAL-USE extension. 
            Servers that support this extension will return new folder flags identifying Special-Use folders.
            (<a href="http://www.limilabs.com/mail/rfc/6154">RFC 6154</a>)
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapAuthExtension.Method">
      <summary>
            Authentication method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapCommand">
      <summary>
            This class is for internal use only. Please do not use this class directly.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapSortExtension">
      <summary>
            Represents IMAP SORT extension.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapSortExtension.Version">
      <summary>
            SORT version.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapThreadExtension">
      <summary>
            Represents IMAP THREAD extension.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapThreadExtension.Method">
      <summary>
            Authentication method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.MessageThread">
      <summary>
            Represents message thread.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)" />
      <remarks>
            Either <see cref="P:Limilabs.Client.IMAP.MessageThread.UID" /> or <see cref="P:Limilabs.Client.IMAP.MessageThread.MessageNumber" /> property is set.
            You can decide which by using <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)" /> method.
            The situations in which both this properties are null are also valid - it means that the root message does not match the search criteria, but it's <see cref="P:Limilabs.Client.IMAP.MessageThread.Children" /> do.
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.MessageThread.ToString">
      <summary>
            Returns text representation of this object.
            </summary>
      <returns>Text representation of this object.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageThread.UID">
      <summary>
            Gets UID of the message that is the root of this thread.
            This property is set by default. 
            It may be null if <see cref="F:Limilabs.Client.IMAP.ResultType.Numbers" /> is specified using <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)" /> method.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageThread.MessageNumber">
      <summary>
            Gets message number of the message that is the root of this thread.
            This property is null unless <see cref="F:Limilabs.Client.IMAP.ResultType.Numbers" /> is specified using <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)" /> method.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageThread.Children">
      <summary>
            Gets child threads of this thread.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.SubFolders">
      <summary>
            Represents a value indicating how many sub folder levels should be downloaded.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.SubFolders)" />
    </member>
    <member name="F:Limilabs.Client.IMAP.SubFolders.All">
      <summary>
            All sub folders should be downloaded.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.SubFolders.Direct">
      <summary>
            Only direct subfolders should be downloaded
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ThreadMethod">
      <summary>
            Represents threading method supported by the remote server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods" /> method to obtain the list of all methods supported by the remote server.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)" />
    </member>
    <member name="F:Limilabs.Client.IMAP.ThreadMethod.OrderedSubject">
      <summary>
            Represemtes THREAD=ORDEREDSUBJECT threading method.
            </summary>
      <remarks>
            The ORDEREDSUBJECT threading algorithm is also referred to as "poor man's threading".
            The searched messages are sorted by base subject and then by the sent date.  
            The messages are then split into separate threads, with each thread containing messages with the same base subject text. 
            Finally, the threads are sorted by the sent date of the first message in the thread.
            
            The top level or "root" in ORDEREDSUBJECT threading contains the first message of every thread.
            All messages in the root are siblings of each other.  
            The second message of a thread is the child of the first message, and subsequent messages of the
            thread are siblings of the second message and hence children of the message at the root.  
            Hence, there are no grandchildren in ORDEREDSUBJECT threading.
            
            Children in ORDEREDSUBJECT threading do not have descendants.
            Client implementations SHOULD treat descendants of a child in a server response as being siblings of that child.
            </remarks>
    </member>
    <member name="F:Limilabs.Client.IMAP.ThreadMethod.References">
      <summary>
            Represemtes THREAD=REFERENCES threading method.
            </summary>
      <remarks>
            The REFERENCES threading algorithm threads the searched messages by grouping them together in parent/child 
            relationships based on which messages are replies to others. The parent/child relationships are built using two methods:
            reconstructing a message's ancestry using the references contained within it; and checking the original (not base)
            subject of a message to see if it is a reply to (or forward of) another message.
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.ThreadMethod.ChooseBest(System.Collections.Generic.IList{Limilabs.Client.IMAP.ThreadMethod})">
      <summary>
            Chooses best threading method available. Returns null when no method is available.
            </summary>
      <param name="methods">All available methods.</param>
      <returns>Best threading method or null when no method is available.</returns>
    </member>
    <member name="T:Limilabs.Client.IMAP.MessageInfo">
      <summary>
             Represents information about envelope (subject, from to, ...) of the email stored on the IMAP server.
             You can use <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})" /> and <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})" /> methods to get information about specified emails.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})" />
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageInfo.UID">
      <summary>
             Message UID on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageInfo.MessageNumber">
      <summary>
             Message number on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure">
      <summary>
            Represents the structure of the email stored on the IMAP server.
            Here you'll find informations about <see cref="P:Limilabs.Client.IMAP.BodyStructure.Attachments" />, <see cref="P:Limilabs.Client.IMAP.BodyStructure.Text">plain text</see> and <see cref="P:Limilabs.Client.IMAP.BodyStructure.Html" /> message parts.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageInfo.Envelope">
      <summary>
            Represents the envelope of the email stored on the IMAP server.
            Here you'll find informations like <see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" /> and <see cref="P:Limilabs.Client.IMAP.Envelope.To" /> addresses.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageInfo.Flags">
      <summary>
            Represents flags of the email stored on the IMAP server.        
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageInfo.GmailLabels">
      <summary>
            Represents labels of the email stored on the IMAP server.
            This property is set only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.QuotaLimit">
      <summary>
            Represents quota limit.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.QuotaLimit.Name">
      <summary>
            Limit name (e.g. STORAGE, MESSAGE).
            STORAGE - Sum of messages' RFC822.SIZE, in units of 1024 octets,
            MESSAGE - Number of messages
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.QuotaLimit.Current">
      <summary>
            Current usage.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.QuotaLimit.Maximum">
      <summary>
            Maximum limit.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.Range">
      <summary>
            Represents a range. You can use <see cref="M:Limilabs.Client.IMAP.Range.From(System.Int64)" />, <see cref="M:Limilabs.Client.IMAP.Range.To(System.Int64)" />, <see cref="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)" /> static methods to create an instance of this class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Range.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>
            Creates new range. Consider using <see cref="M:Limilabs.Client.IMAP.Range.From(System.Int64)" />, <see cref="M:Limilabs.Client.IMAP.Range.To(System.Int64)" />, <see cref="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)" /> static methods to create an instance of this class.
            </summary>
      <param name="start">Range start.</param>
      <param name="end">Range end.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)">
      <summary>
            Creates new range with start and end defined.
            </summary>
      <param name="start">Range start.</param>
      <param name="end">Range end.</param>
      <returns>New range.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Range.From(System.Int64)">
      <summary>
            Creates new range with only start defined.
            </summary>
      <param name="start">Range start.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Range.To(System.Int64)">
      <summary>
            Creates new range with only end defined.
            </summary>
      <param name="end">Range end.</param>
      <returns>New range.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.Range.Start">
      <summary>
            Gets range start.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Range.End">
      <summary>
            Gets range end.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.NamespaceInfo">
      <summary>
            Represents IMAP namespace info.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.NamespaceInfo.Name">
      <summary>
            Namespace name.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.NamespaceInfo.SeparatorCharacter">
      <summary>
            Path separator character.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.MessageFlags">
      <summary>
            Represents flags associated with the message.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageFlags.UID">
      <summary>
             Message UID on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageFlags.MessageNumber">
      <summary>
             Message number on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageFlags.Flags">
      <summary>
            Flags of the specified message.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.MessageData">
      <summary>
            Represents data for specific message downloaded from IMAP server.
            You can use <see cref="T:Limilabs.Mail.MailBuilder" /> on <see cref="P:Limilabs.Client.IMAP.MessageData.EmlData" /> to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageData.UID">
      <summary>
             Gets the UID of the message on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageData.MessageNumber">
      <summary>
             Gets the message number on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MessageData.EmlData">
      <summary>
            Eml data requested. You can use <see cref="T:Limilabs.Mail.MailBuilder" /> on this property to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.Namespaces">
      <summary>
            Represents IMAP server namespaces available for currently logged in user.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Namespaces.Personal">
      <summary>
             Personal namespaces.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Namespaces.Others">
      <summary>
             Other users' namespace.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Namespaces.Shared">
      <summary>
             Namespaces shared with other users.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.Quota">
      <summary>
            Represents quota. Quota can have several limits and can be shared by several folders (<a href="http://www.limilabs.com/mail/rfc/2087">RFC 2087</a>).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Quota.Name">
      <summary>
            Quota name.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Quota.Limits">
      <summary>
            Limits in this quota.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Quota.Storage">
      <summary>
            Gets STORAGE limit (sum of messages' RFC822.SIZE, in units of 1024 octets) or null if not found.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Quota.Message">
      <summary>
            Gets MESSAGE limit (number of messages) or null if not found.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.Status">
      <summary>
            Status of the specified folder, returned by <see cref="M:Limilabs.Client.IMAP.Imap.Status(System.String)" /> and <see cref="M:Limilabs.Client.IMAP.Imap.Status(Limilabs.Client.IMAP.FolderInfo)" /> methods.
            </summary>
      <seealso cref="T:Limilabs.Client.IMAP.FolderStatus" />
    </member>
    <member name="P:Limilabs.Client.IMAP.Status.MessageCount">
      <summary>
            Total message count in the mailbox.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Status.Unseen">
      <summary>
            Number of messages with <see cref="F:Limilabs.Client.IMAP.Flag.Unseen" /> flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Status.Recent">
      <summary>
            Number of messages with <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Status.UIDNext">
      <summary>
             UIDNEXT: The next unique identifier value.
             The next unique identifier value is the predicted value that will be assigned to a new message in the mailbox.  
             Unless the unique identifier validity (<see cref="P:Limilabs.Client.IMAP.Status.UIDValidity" />) also changes , the next unique identifier value 
             MUST NOT change unless new messages are added to the mailbox; 
             and  the next unique identifier value 
             MUST change whenever new messages are added to the mailbox, even if those new messages are subsequently deleted.
            
             The next unique identifier value is intended to provide a means for a client to determine whether 
             any messages have been delivered to the mailbox since the previous time it checked this value.
             </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Status.UIDValidity">
      <summary>
            UIDVALIDITY: The unique identifier validity value.
            
            Any change of unique identifiers between sessions MUST be detectable using the change of UIDVALIDITY.
            If unique identifiers from an earlier session fail to persist in this session, 
            the UIDVALIDITY value MUST be greater than the one used in the earlier session.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.UploadMessageInfo">
      <summary>
            Represents information about the email message that is being uploaded (e.g. flags, internal date).
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.UploadMessageInfo.#ctor">
      <summary>
            Creates new instance of UploadMessageInfo class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.UploadMessageInfo.SetInternalDate(System.DateTime)">
      <summary>
             Sets internal date of the message.
            </summary>
      <param name="dateTime">Internal date to set.</param>
    </member>
    <member name="P:Limilabs.Client.IMAP.UploadMessageInfo.Flags">
      <summary>
            Message flags.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.UploadMessageInfo.InternalDate">
      <summary>
            Internal date of the message.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SendMessageResult">
      <summary>
            Represents result of the message sending process, returned by <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)" />, <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)" />.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.SendMessageResult.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.SMTP.SendMessageResult" />.
            </summary>
      <returns>
            A string that represents the current <see cref="T:Limilabs.Client.SMTP.SendMessageResult" />.
            </returns>
    </member>
    <member name="P:Limilabs.Client.SMTP.SendMessageResult.Status">
      <summary>
            Gets the status of the sendin process.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SendMessageResult.RejectedRecipients">
      <summary>
            Gets the list of the recipients rejected by the SMTP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SendMessageResult.ApprovedRecipients">
      <summary>
            Gets the list of the recipients approved by the SMTP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SendMessageResult.FromRejected">
      <summary>
            Gets a boolean value indicating if From (<see cref="P:Limilabs.Mail.IMail.Sender" />, <see cref="P:Limilabs.Client.SMTP.SmtpMail.From" />) was rejected. 
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SendMessageResult.GeneralErrors">
      <summary>
            Gets all error responses received from the server when sending message.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SendMessageResult.RejectedRecipientsErrors">
      <summary>
            Gets error responses received from the server to add recipient requests (RCPT TO command).
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SendMessageStatus">
      <summary>
            Represents a status of <see cref="T:Limilabs.Client.SMTP.SendMessageResult" />.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SendMessageStatus.Success">
      <summary>
            Success status: message was succesfully sent to all receipients.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SendMessageStatus.PartialSucess">
      <summary>
            Partial success status: message was succesfully sent to some, but not to all receipients.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SendMessageStatus.Failure">
      <summary>
            Failure status: message sending failed.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpResponseStatus">
      <summary>
            Represents status of SMTP response.
            </summary>
      <seealso cref="P:Limilabs.Client.SMTP.SmtpResponse.Status" />
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpResponseStatus.Positive">
      <summary>
            Positive status (200-299 response codes).
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpResponseStatus.SendMoreData">
      <summary>
            Requires more data status (300-399 response codes).
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpResponseStatus.Error">
      <summary>
            Error status (400- response codes).
            </summary>
    </member>
    <member name="T:Limilabs.Mail.DKIMValidationConfiguration">
      <summary>
            Represents DKIM (DomainKeys Identified Mail) signature validation configuration.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIMValidationConfiguration.IgnoreUnsignedFrom">
      <summary>
            Get or sets a Boolean value that indicates whether unsigned from header error should be ignored. Default is false.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.EncryptionConfiguration">
      <summary>
            Represents encryption configuration.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.EncryptionConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Creates new EncryptionConfiguration instance.
            </summary>
      <param name="certificate">Certificate that will be used to encrypt the message.</param>
    </member>
    <member name="M:Limilabs.Mail.EncryptionConfiguration.#ctor">
      <summary>
            Creates new EncryptionConfiguration instance.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.EncryptionConfiguration.Certificates">
      <summary>
            Gets the list of certificates that will be used to encrypt the message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.EncryptionConfiguration.Algorithm">
      <summary>
            Gets or sets the encryption algorithm. You can use one of the <see cref="T:Limilabs.Cryptography.CommonOids" /> static values.
            Default is 3DES (<see cref="F:Limilabs.Cryptography.CommonOids.TrippleDes" />).
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.HeaderEncoderConfig">
      <summary>
            Represents <see cref="T:Limilabs.Mail.Headers.HeaderEncoder" /> configuration.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.HeaderEncoderConfig.FirstLineLength">
      <summary>
            Gets or sets the maximum length of the first encoded-word.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.HeaderEncoderConfig.MaxLineLength">
      <summary>
            Gets or sets the maximum length of the encoded-words.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.VERPAddress">
      <summary>
            Represents Variable Envelope Return Path (VERP) address (e.g. "list-owner+bob=receipient.com@sender.com").
            You can use <see cref="M:Limilabs.Mail.Tools.VERPAddress.Join" /> method to create VERP email address or <see cref="M:Limilabs.Mail.Tools.VERPAddress.Parse(System.String)" /> method to parse existing one.
            </summary>
      <seealso cref="M:Limilabs.Client.SMTP.SmtpMail.CreateUsingVERP(Limilabs.Mail.IMail)" />
    </member>
    <member name="M:Limilabs.Mail.Tools.VERPAddress.#ctor(System.String,System.String)">
      <summary>
            Creates new VERPAddress class instance.
            </summary>
      <param name="toAddress">Original email to address (e.g. "bob@receipient.com").</param>
      <param name="fromAddress">Original email from address (e.g. "list-owner@sender.com").</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.VERPAddress.Parse(System.String)">
      <summary>
            Parses existing VERP address (e.g. "list-owner+bob=receipient.com@sender.com").
            </summary>
      <param name="verpAddress">VERP address to parse (e.g. "list-owner+bob=receipient.com@sender.com").</param>
      <returns>New VERPAddress class instance with <see cref="P:Limilabs.Mail.Tools.VERPAddress.ToAddress" /> and <see cref="P:Limilabs.Mail.Tools.VERPAddress.FromAddress" /> properties set ("bob@receipient.com" and "list-owner@sender.com" accordingly).</returns>
    </member>
    <member name="M:Limilabs.Mail.Tools.VERPAddress.Join">
      <summary>
            Joins <see cref="P:Limilabs.Mail.Tools.VERPAddress.FromAddress" /> and <see cref="P:Limilabs.Mail.Tools.VERPAddress.ToAddress" /> to create VERP address (e.g. "list-owner+bob=receipient.com@sender.com").
            </summary>
      <seealso cref="M:Limilabs.Client.SMTP.SmtpMail.CreateUsingVERP(Limilabs.Mail.IMail)" />
      <returns>Sender address, containing encoded recipient address (e.g. "list-owner+bob=receipient.com@sender.com").</returns>
    </member>
    <member name="P:Limilabs.Mail.Tools.VERPAddress.ToAddress">
      <summary>
            Gets original email To address (e.g. "bob@receipient.com").
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.VERPAddress.FromAddress">
      <summary>
            Gets original email From address (e.g. "list-owner@sender.com").
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardName">
      <summary>
            Represents VCard name.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardName.#ctor">
      <summary>
            Creates new VCardName entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardName.#ctor(System.String,System.String)">
      <summary>
            Creates new VCardName entity.
            </summary>
      <param name="firstName">First name.</param>
      <param name="lastName">Last name.</param>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardName.FirstName">
      <summary>
            Gets or sets first name.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardName.LastName">
      <summary>
            Gets or sets last name.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardOrganization">
      <summary>
            Represents VCard organization.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardOrganization.#ctor">
      <summary>
            Creates new VCardOrganization object.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardOrganization.#ctor(System.String)">
      <summary>
            Creates new VCardOrganization object.
            </summary>
      <param name="name">Organization's name.</param>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardOrganization.Name">
      <summary>
            Gets or sets the organization name.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardOrganization.Units">
      <summary>
            Gets organization units.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardParser">
      <summary>
            VCard business card parser.
            </summary>
      <seealso cref="P:Limilabs.Mail.IMail.VCards" />
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardParser.#ctor(System.Text.Encoding)">
      <summary>
            Creates new VCardParser with specified encoding.
            </summary>
      <param name="encoding">Encoding to be used when extracting encoded data.</param>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardParser.#ctor">
      <summary>
            Creates new VCardParser with default encoding.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardParser.Parse(System.String)">
      <summary>
            Parses specifed text and creates new VCard business card object.
            </summary>
      <param name="text">Text to parse.</param>
      <returns>VCard business card.</returns>
    </member>
    <member name="T:Limilabs.Cryptography.CommonOids">
      <summary>
            Represents common Oids, that represent encryption and signing algorithms.
            </summary>
      <seealso cref="P:Limilabs.Mail.EncryptionConfiguration.Algorithm" />
      <seealso cref="P:Limilabs.Mail.SignatureConfiguration.Algorithm" />
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.TrippleDes">
      <summary>
            Gets DES-EDE3-CBC oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Aes128">
      <summary>
            Gets aes128-CBC oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Aes256">
      <summary>
            Gets aes256-CBC oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Md5">
      <summary>
            Gets md5 oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Sha1">
      <summary>
            Gets SHA-1 oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Sha224">
      <summary>
            Gets SHA-224 oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Sha256">
      <summary>
            Gets SHA-256 oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Sha384">
      <summary>
            Gets SHA-384 oid.
            </summary>
    </member>
    <member name="F:Limilabs.Cryptography.CommonOids.Sha512">
      <summary>
            Gets SHA-512 oid.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeRfc822">
      <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" /> or <see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers" /> data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822" /> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822(Limilabs.Mail.IMail)" /> methods to create objects of this type.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeText">
      <summary>
            Represents MIME entity containing text data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText" /> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)" /> to create objects of this type.
            </summary>
      <remarks>
            You should use <see cref="T:Limilabs.Mail.MIME.MimeData" /> when attaching binary files.
            </remarks>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeData">
      <summary>
            Represents MIME entity which contains raw byte data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData" /> to create objects of this type.
            </summary>
      <remarks>
            You should use <see cref="T:Limilabs.Mail.MIME.MimeText" /> when attaching text files.
            </remarks>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeBase">
      <summary>
            Implements basic mime entity logic. All MIME classes, created by <see cref="T:Limilabs.Mail.MIME.MimeFactory" /> inherit from this class.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeBase.Render(System.Text.StringBuilder)">
      <summary>
            Renders this MIME object.
            </summary>
      <param name="writer">Writer to render on.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeBase.ToString">
      <summary>
            Returns content-type of this MIME object.
            </summary>
      <returns>Content-type of this MIME object (e.g. "text/plain").</returns>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeBase.ContentType">
      <summary>
            Content type of the body.
            </summary>
      <remarks>
            Content-type "text/plain" should be assumed if
            there is no ContentType or it is unknown.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeBase.ContentTypeHeader">
      <summary>
            Represents 'Content-type' header.
            You can use this class to add additional options to content-type header.
            Use <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType" /> to get or set content-type only.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeBase.ContentLocation">
      <summary>
            Content location of this mime entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeBase.ContentId">
      <summary>
            Content-ID of this entity. Without enclosing '&lt;' and '&gt;'.
            You can use <see cref="T:Limilabs.Mail.Headers.ContentIdHelper" /> to extract content id from cid url.
            </summary>
      <remarks>E.g. 01@mobile</remarks>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeBase.ContentDisposition">
      <summary>
            'Content-Disposition' of the data.
            This object provides information on what you should do with the data.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeBase.Headers">
      <summary>
            MIME headers collection. Keys are always in lower case.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeData.LoadFromFile(System.String)">
      <summary>
            Uploads data from specified file into this <see cref="T:Limilabs.Mail.MIME.MimeData" /> entity.
            LoadFromFile always resets <see cref="T:Limilabs.Mail.Headers.ContentType" /> and <see cref="P:Limilabs.Mail.MIME.MimeData.FileName" /></summary>
      <param name="path">The file to read data from.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeData.Save(System.String)">
      <summary>
            Creates a new file with the specified name and saves <see cref="P:Limilabs.Mail.MIME.MimeData.Data" /> into it.
            </summary>
      <param name="path">The path and the name of the file to create.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeData.Save(System.IO.Stream)">
      <summary>
            Writes <see cref="P:Limilabs.Mail.MIME.MimeData.Data" /> to specified stream. Stream must be open.
            </summary>
      <param name="stream">Stream to which <see cref="P:Limilabs.Mail.MIME.MimeData.Data" /> will be written.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeData.GetMemoryStream">
      <summary>
            Creates new <see cref="T:System.IO.MemoryStream" /> for accessing <see cref="P:Limilabs.Mail.MIME.MimeData.Data" /> property.
            </summary>
      <returns>New <see cref="T:System.IO.MemoryStream" /> Object</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeData.ChooseContentType(System.String)">
      <summary>
            This method should choose content type based on the opened file name.
            </summary>
      <param name="fileName">Name of the file form which data will be loaded</param>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeData.Data">
      <summary>
            Gets or sets byte array contained in this MIME object.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeData.FileName">
      <summary>
            Gets or sets suggested file name (<see cref="P:Limilabs.Mail.Headers.IContentDisposition.FileName" /> or <see cref="T:Limilabs.Mail.Headers.IContentTypeHeader" />["name"]).
            May be <c>null</c> or empty. Consider using <see cref="P:Limilabs.Mail.MIME.MimeData.SafeFileName" /> as it is guaranteed to contain valid file name.
            </summary>
      <remarks>
              It is important that you should not blindly use the suggested
              filename.  The suggested filename SHOULD be checked (and possibly
              changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security
              problem.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeData.HasFileName">
      <summary>
            Gets a boolean value indicating if <see cref="P:Limilabs.Mail.MIME.MimeData.FileName" /> is set.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeData.SafeFileName">
      <summary>
            Suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName" /> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName" /> is false) 
            generates random file name in format "att_d1be267b623941159a159158138a636e.dat" and uses <see cref="T:Limilabs.Mail.Headers.ContentType" /> to establish correct extension.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeData.ContentTransferEncoding">
      <summary>
            'Content-transfer-encoding' of the data.
            This object provides information on how the data was encoded for transport purposes.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeText.Save(System.String)">
      <summary>
            Creates new file with the specified name and saves <see cref="P:Limilabs.Mail.MIME.MimeText.Text" /> to it.
            </summary>
      <param name="path">File name</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeText.Save(System.IO.Stream)">
      <summary>
            Writes <see cref="P:Limilabs.Mail.MIME.MimeText.Text" /> to specified stream. Stream should be open.
            </summary>
      <param name="stream">Stream to which <see cref="P:Limilabs.Mail.MIME.MimeText.Text" /> will be written.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeText.ChooseContentType(System.String)">
      <summary>
            This method should choose content type based on the opened file name.
            </summary>
      <param name="fileName">Name of the file form which data will be loaded</param>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeText.Text">
      <summary>
            Gets or sets text data contained in this Mime object.
            Encoding is changed to UTF8 when setting.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeText.Encoding">
      <summary>
            Gets or sets encoding used to encode text contained in this Mime object.
            </summary>
      <remarks>
            Encoding is stored as a charset field in content-type header. Default is Encoding.Default.
            </remarks>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeRfc822.ChooseContentType(System.String)">
      <summary>
            This method sets content type to message/rfc822.
            </summary>
      <param name="fileName">Name of the file form which data will be loaded</param>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeRfc822.SafeFileName">
      <summary>
            Suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName" /> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName" /> is false) 
            tries to use <see cref="P:Limilabs.Mail.IMail.Subject" /> to create a file name or
            generates random file name in format "att_d1be267b623941159a159158138a636e.eml".
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeVCard">
      <summary>
            Represents MIME entity containing text/vcard data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard" /> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard(Limilabs.Mail.BusinessCard.VCard)" /> methods to create objects of this type.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeVCard.ChooseContentType(System.String)">
      <summary>
            This method sets content type to text/vcard.
            </summary>
      <param name="fileName">Name of the file form which data will be loaded</param>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeVCard.SafeFileName">
      <summary>
            Suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName" /> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName" /> is false) 
            tries to use <see cref="P:Limilabs.Mail.BusinessCard.VCard.FullName" /> to create a file name or
            generates random file name in format "att_d1be267b623941159a159158138a636e.vcf".
            </summary>
    </member>
    <member name="T:Limilabs.Mail.ReadReceiptBuilder">
      <summary>
            You can use this class to create a read receipt email.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.#ctor(System.String,Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates new ReadReceiptBuilder object.
            </summary>
      <param name="originalMessageID">Message-id (<see cref="P:Limilabs.Mail.IMail.MessageID" />) of the original email message.</param>
      <param name="originalSender">Sender of the original email message.</param>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.#ctor(Limilabs.Mail.IMail)">
      <summary>
            Creates new ReadReceiptBuilder object.
            </summary>
      <param name="email">Original email message.</param>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDeleted(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for manually deleted email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDeletedAutomatically(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically deleted email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDisplayed(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for manually displayed email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDisplayedAutomatically(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically displayed email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasProcessed(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for manually processed email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasProcessedAutomatically(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically processed email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDispatched(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for manually dispatched email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDispatchedAutomatically(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically dispatched email.
            </summary>
      <param name="from">From mailbox.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReadReceiptBuilder.Was(Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.DispositonType,System.Boolean)">
      <summary>
            Creates MailBuilder class that can be used to create read receipt for email.
            </summary>
      <param name="from">From mailbox.</param>
      <param name="disposition">Receipt disposition (e.g. <see cref="F:Limilabs.Mail.Headers.DispositonType.Processed" />).</param>
      <param name="manual">Specifies automatic or manual receipt.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.ReadTextTemplate">
      <summary>
            Gets or sets plain text version of the read reply template.
            </summary>
      <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was displayed.</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.DeletedTextTemplate">
      <summary>
            Gets or sets plain text version of the read reply template.
            </summary>
      <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was deleted.</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.ProcessedTextTemplate">
      <summary>
            Gets or sets plain text version of the processed reply template.
            </summary>
      <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was processed.</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.DispatchedTextTemplate">
      <summary>
            Gets or sets plain text version of the dispatched reply template.
            </summary>
      <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was dispatched.</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.ReadSubjectTemplate">
      <summary>
            Gets or sets read reply template for the subject.
            </summary>
      <remarks>
            Template sample: <pre>Read: [Original.Subject]</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.DeletedSubjectTemplate">
      <summary>
            Gets or sets deleted reply template for the subject.
            </summary>
      <remarks>
            Template sample: <pre>Deleted: [Original.Subject]</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.ProcessedSubjectTemplate">
      <summary>
            Gets or sets processed reply template for the subject.
            </summary>
      <remarks>
            Template sample: <pre>Processed: [Original.Subject]</pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReadReceiptBuilder.DispatchedSubjectTemplate">
      <summary>
            Gets or sets dispatched reply template for the subject.
            </summary>
      <remarks>
            Template sample: <pre>Dispatched: [Original.Subject]</pre></remarks>
    </member>
    <member name="T:Limilabs.Mail.SignatureConfiguration">
      <summary>
            Represents signature configuration.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.SignatureConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Creates new SignatureConfiguration instance.
            </summary>
      <param name="certificate">Certificate that will be used to sign the message.</param>
    </member>
    <member name="P:Limilabs.Mail.SignatureConfiguration.Certificate">
      <summary>
            Gets or sets the certificate that will be used to sign the message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.SignatureConfiguration.Algorithm">
      <summary>
            Gets or sets the signing algorithm. You can use one of the <see cref="T:Limilabs.Cryptography.CommonOids" /> static values.
            Default is SHA1 (<see cref="F:Limilabs.Cryptography.CommonOids.Sha1" />).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.SignatureConfiguration.IncludeOption">
      <summary>
            Gets or sets the option that controls whether the root and entire chain associated with the signing certificate are included with the created CMS/PKCS #7 message.
            Default is <see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain" />.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.SignatureConfiguration.DetachedSignature">
      <summary>
            Gets or sets the value indicating if detached signature will be used. 
            Detached signature has better backward compability as S/MIME unaware clients are able to access the signed data. Default is true.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.PDI.KeyValues">
      <summary>
            Represents key and values.
            </summary>
      <see cref="P:Limilabs.Mail.PDI.PdiHeader.KeyParameters" />
      <see cref="P:Limilabs.Mail.PDI.PdiHeader.ValueParameters" />
    </member>
    <member name="M:Limilabs.Mail.PDI.KeyValues.#ctor(System.String)">
      <summary>
            Creates new KeyValues object.
            </summary>
      <param name="key">Key.</param>
    </member>
    <member name="M:Limilabs.Mail.PDI.KeyValues.#ctor(System.String,System.String)">
      <summary>
            Creates new KeyValues object.
            </summary>
      <param name="key">Key.</param>
      <param name="value">Value.</param>
    </member>
    <member name="M:Limilabs.Mail.PDI.KeyValues.#ctor(System.String,System.Collections.Generic.List{System.String})">
      <summary>
            Creates new KeyValues object.
            </summary>
      <param name="key">Key.</param>
      <param name="values">Values.</param>
    </member>
    <member name="P:Limilabs.Mail.PDI.KeyValues.Key">
      <summary>
            Gets or sets the key.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.KeyValues.Values">
      <summary>
            Gets values.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Log">
      <summary>
            Represents Mail.dll log.
            </summary>
    </member>
    <member name="E:Limilabs.Mail.Log.WriteLine">
      <summary>
            You can subscribe your logging library to this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Log.Enabled">
      <summary>
            Gets or sets a value indicating whether logging is enabled or disabled. The default is <see langword="false" />.
            You can observe the log on standard VS output or use <see cref="P:System.Diagnostics.Trace.Listeners" /> collection to add your own listener.
            Logging uses <see cref="T:System.Diagnostics.BooleanSwitch" /> named "Mail.dll". 
            Category name for log entries is also "Mail.dll".
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3AuthenticationMethod">
      <summary>
            Represents authentication methods supported by the remote server.
            You can use <see cref="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods" /> method to obtain the list of all methods supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.UserPass">
      <summary>
            USER authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.Plain">
      <summary>
            SASL PLAIN authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.CramMD5">
      <summary>
            SASL CRAM-MD5 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.DigestMD5">
      <summary>
            SASL DIGEST-MD5 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.NTLM">
      <summary>
            SASL NTLM authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.GssApi">
      <summary>
            SASL GSSAPI authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.APOP">
      <summary>
            APOP authentication method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3Extension">
      <summary>
            Represents extensions supported by the remote server.
            You can use <see cref="M:Limilabs.Client.POP3.Pop3.SupportedExtensions" /> method to obtain the list of all extensions supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3Extension.STLS">
      <summary>
            STLS extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.STLS" /> to secure the connection.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3Extension.UIDL">
      <summary>
            UIDL extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.GetAll" /> method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3Extension.Top">
      <summary>
            TOP extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.GetHeaders(System.Int64)" /> and <see cref="M:Limilabs.Client.POP3.Pop3.GetHeadersByUID(System.String)" /> method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3Extension.LoginDelay">
      <summary>
            LOGIN-DELAY extension.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3Extension.Sasl">
      <summary>
            SASL extension. You can use <see cref="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods" /> to obtain all authentication methods supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3Extension.User">
      <summary>
            USER extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" /> method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3LoginDelayExtension">
      <summary>
            Represents POP3 LOGIN-DELAY extension.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3LoginDelayExtension.Value">
      <summary>
            Gets the time interval after an "+OK" response to authentication (PASS, APOP, or AUTH command) before another authentication will be accepted.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3SaslExtension">
      <summary>
            Represents POP3 SASL extension.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3SaslExtension.Methods">
      <summary>
            Gets supported authentication methods.
            </summary>
    </member>
    <member name="T:Limilabs.Client.ServerCertificateValidateEventHandler">
      <summary>
            Handler for ServerCertificateValidateEventHandler.
            </summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="e">Event arguments. Use <see cref="P:Limilabs.Client.ServerCertificateValidateEventArgs.IsValid" /> to validate the certificate.</param>
    </member>
    <member name="T:Limilabs.Client.SMTP.CommandParameter">
      <summary>
            Represents SMTP command parameter and value (e.g. NOTIFY=SUCCESS,FAILURE).
            </summary>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.RcptTo(System.String,System.Collections.Generic.List{Limilabs.Client.SMTP.CommandParameter},System.Boolean)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.MailFrom(System.String,System.Collections.Generic.List{Limilabs.Client.SMTP.CommandParameter},System.Boolean)" />
    </member>
    <member name="M:Limilabs.Client.SMTP.CommandParameter.#ctor(System.String,System.String)">
      <summary>
            Creates new instance of CommandParameter class.
            </summary>
      <param name="name">Name of the parameter.</param>
      <param name="value">Value of the parameter.</param>
    </member>
    <member name="P:Limilabs.Client.SMTP.CommandParameter.Name">
      <summary>
            Name of the parameter (e.g. NOTIFY).
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.CommandParameter.Value">
      <summary>
            Value  of the parameter (e.g. SUCCESS,FAILURE).
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.DeliveryNotificationOptions">
      <summary>
            Describes the delivery notification options for email. 
            You can use <see cref="P:Limilabs.Client.SMTP.Smtp.DeliveryNotification" /> to set delivery options.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.None">
      <summary>
            No notification information will be sent. The mail server will utilize its configured behavior to determine whether it should generate a delivery notification.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.OnSuccess">
      <summary>
            Notify if the delivery is successful.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.OnFailure">
      <summary>
            Notify if the delivery is unsuccessful.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.Delay">
      <summary>
            Notify if the delivery is delayed.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.Never">
      <summary>
            A notification should not be generated under any circumstances.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpAuthExtension">
      <summary>
            Represents SMTP AUTH extension.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpExtension">
      <summary>
            Represents extensions supported by the remote server.
            You can use <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions" /> method to obtain the list of all extensions supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpExtension.StartTLS">
      <summary>
            STARTTLS is supported. You can use <see cref="M:Limilabs.Client.SMTP.Smtp.StartTLS" /> to secure the connection.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpExtension.Size">
      <summary>
            SIZE extension.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpExtension.Auth">
      <summary>
            AUTH extension. You can use <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods" /> to obtain all authentication methods supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining">
      <summary>
            PIPELINING extension.
            It allows client to transmit groups of SMTP commands in batches without waiting for a response to each individual command.
            <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)" /> method uses this feature to speed up sending messages.
            (<a href="http://www.limilabs.com/mail/rfc/2920">RFC 2920</a>)
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpAuthExtension.Supports(Limilabs.Client.SMTP.SmtpAuthenticationMethod)">
      <summary>
            Checks if specified method is supported.
            </summary>
      <param name="method">Authentication method to check.</param>
      <returns>True if method is supported, false otherwise.</returns>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpAuthExtension.Methods">
      <summary>
            Gets supported authentication methods.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpSizeExtension">
      <summary>
            Represents SMTP SIZE extension.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpSizeExtension.Value">
      <summary>
            Gets the maximum size of the message. Messages above this size will not be accepted.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SSLConfiguration">
      <summary>
            Represents SSL configuration (client certificates, enabled SSL protocols)
            </summary>
    </member>
    <member name="P:Limilabs.Client.SSLConfiguration.TargetHost">
      <summary>
            Gets or sets the target host name used for authenticating as client.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SSLConfiguration.CheckCertificateRevocation">
      <summary>
             Specifies whether the certificate revocation list is checked during authentication. Default is false.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SSLConfiguration.ClientCertificates">
      <summary>
             The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> that contains client certificates.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SSLConfiguration.EnabledSslProtocols">
      <summary>
            Represents the protocol used for authentication. Default is <see cref="F:System.Security.Authentication.SslProtocols.Default" />.
            </summary>
    </member>
    <member name="E:Limilabs.Client.SSLConfiguration.ServerCertificateValidate">
      <summary>
            Event which is called for custom server certificate validation.
            </summary>
    </member>
    <member name="T:Limilabs.Cryptography.PemReader">
      <summary>
            PEM format reader.
            </summary>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadCertificateFromFile(System.String)">
      <summary>
            Reads certificate from PEM file (BEGIN CERTIFICATE).
            </summary>
      <param name="filename">File name to read from</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadCertificate(System.String)">
      <summary>
            Reads certificate from PEM file (BEGIN CERTIFICATE).
            </summary>
      <param name="pem">String to read from</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadPublicKeyFromFile(System.String)">
      <summary>
            Reads public key from PEM file (BEGIN PUBLIC KEY).
            </summary>
      <param name="filename">File to read from</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadPublicKey(System.String)">
      <summary>
            Reads public key from PEM file (BEGIN PUBLIC KEY).
            </summary>
      <param name="pem">String to read from</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadPrivateKeyFromFile(System.String)">
      <summary>
            Reads private key from PEM file (BEGIN RSA PRIVATE KEY / BEGIN PRIVATE KEY).
            </summary>
      <param name="filename">File to read from</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadPrivateKey(System.String)">
      <summary>
            Reads private key from PEM file (BEGIN RSA PRIVATE KEY / BEGIN PRIVATE KEY).
            </summary>
      <param name="pem">String to read from</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadEncryptedPrivateKeyFromFile(System.String,System.String)">
      <summary>
            Reads encrypted private key from PEM file (BEGIN ENCRYPTED PRIVATE KEY / BEGIN RSA PRIVATE KEY).
            </summary>
      <param name="filename">File to read from</param>
      <param name="password">Password.</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="M:Limilabs.Cryptography.PemReader.ReadEncryptedPrivateKey(System.String,System.String)">
      <summary>
            Reads encrypted private key from PEM file (BEGIN ENCRYPTED PRIVATE KEY / BEGIN RSA PRIVATE KEY).
            </summary>
      <param name="pem">String to read from</param>
      <param name="password">Password.</param>
      <returns>Certificate that was read.</returns>
    </member>
    <member name="T:Limilabs.Mail.Appointments.DaylightOffset">
      <summary>
            Represents daylight savings time of a time zone.
            <code>
            BEGIN:DAYLIGHT
            DTSTART:19700308T020000
            RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=2SU;BYMONTH=3
            TZOFFSETFROM:-0900
            TZOFFSETTO:-0800
            TZNAME:AKDT
            END:DAYLIGHT
            </code><seealso cref="P:Limilabs.Mail.Appointments.VTimeZone.Daylight" /></summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.BaseTimeZoneOffset">
      <summary>
            Base class for standard and daylight savings time of a time zone.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.PDI.BasePdiEntity">
      <summary>
            Represents base PDI (Personal Data Interchange) entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.PDI.BasePdiEntity.RenderFinal">
      <summary>
            Renders this entity as a string.
            </summary>
      <returns>Rendered string.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.BasePdiEntity.GetHeader(System.String)">
      <summary>
            Gets header with specified key from this calendar entity.
            </summary>
      <param name="key">Header's key.</param>
      <returns>
        <see cref="T:Limilabs.Mail.PDI.PdiHeader" /> object for this key, or <see langword="null" /> if specified key was not found.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.BasePdiEntity.GetHeaders(System.String)">
      <summary>
            Gets header with specified key from this calendar entity.
            </summary>
      <param name="key">Header's key.</param>
      <returns>
        <see cref="T:Limilabs.Mail.PDI.PdiHeader" /> object for this key, or <see langword="null" /> if specified key was not found.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.BasePdiEntity.AddCustomHeader(Limilabs.Mail.PDI.PdiHeader)">
      <summary>
            Adds custom header to this entity.
            </summary>
      <param name="pdiHeader">Custom header to add.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.BaseTimeZoneOffset.#ctor(System.String)">
      <summary>
            Creates new event entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.Start">
      <summary>
            This property specifies when the time zone offset begins (Always converted to local time without the "TZID" property parameter).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.RecurringRule">
      <summary>
            Recurring rule of this time zone offset.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.OffsetFrom">
      <summary>
            This property specifies the offset which is in use prior to this time zone observance.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.OffsetTo">
      <summary>
            This property specifies the offset which is in use in this time zone observance.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.Name">
      <summary>
            Customary name for the time zone.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.DaylightOffset.#ctor">
      <summary>
            Creates new daylight offset entity.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.StandardOffset">
      <summary>
            Represents standard time of a time zone.
            <code>
            BEGIN:STANDARD
            DTSTART:19701101T020000
            RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=SU;BYMONTH=11
            TZOFFSETFROM:-0800
            TZOFFSETTO:-0900
            TZNAME:AKST
            END:STANDARD
            </code><seealso cref="P:Limilabs.Mail.Appointments.VTimeZone.Standard" /></summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.StandardOffset.#ctor">
      <summary>
            Creates new standard offset entity.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.VTimeZone">
      <summary>
             Represents time zone entity.
             </summary>
      <remarks>
        <code>
            BEGIN:VTIMEZONE
            TZID:US-Eastern
            LAST-MODIFIED:19870101T000000Z
            BEGIN:STANDARD
            DTSTART:19971026T020000
            RDATE:19971026T020000
            TZOFFSETFROM:-0400
            TZOFFSETTO:-0500
            TZNAME:EST
            END:STANDARD
            BEGIN:DAYLIGHT
            DTSTART:19971026T020000
            RDATE:19970406T020000
            TZOFFSETFROM:-0500
            TZOFFSETTO:-0400
            TZNAME:EDT
            END:DAYLIGHT
            END:VTIMEZONE
             </code>
      </remarks>
    </member>
    <member name="M:Limilabs.Mail.Appointments.VTimeZone.#ctor">
      <summary>
            Creates new time zone entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.VTimeZone.TimeZoneId">
      <summary>
            Text value that uniquely identifies the VTIMZONE calendar component within the scope of an iCalendar object (TZID).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.VTimeZone.Standard">
      <summary>
            Standard time offsets.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.VTimeZone.Daylight">
      <summary>
            Daylight time offsets.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Frequency">
      <summary>
            Represents frequency of the recurring event.
            You can use <see cref="P:Limilabs.Mail.Appointments.RecurringRule.Interval" /> to specify interval greater than one.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.RecurringRule.Frequency" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Secondly">
      <summary>
            Event occurs every second.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Minutely">
      <summary>
            Event occurs every minute.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Hourly">
      <summary>
            Event occurs every hour.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Daily">
      <summary>
            Event occurs every day.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Weekly">
      <summary>
            Event occurs every week.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Monthly">
      <summary>
            Event occurs every month.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Frequency.Yearly">
      <summary>
            Event occurs every year.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.RecurringRule">
      <summary>
            Represents recurring rule for a event.
            You can use <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule" /> or <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule(Limilabs.Mail.Appointments.RecurringRule)" /> to make event recurring.
            You can check <see cref="P:Limilabs.Mail.Appointments.Event.RecurringRules" /> collection to get all recurring rules defined for a event.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.RecurringRule.#ctor">
      <summary>
            Creates new recurring rule.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.Frequency">
      <summary>
            Gets or sets frequency for this rule. You can use static fields of Frequency class e.g. <see cref="F:Limilabs.Mail.Appointments.Frequency.Weekly" /></summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.Interval">
      <summary>
            Gets or sets recurring interval of this rule.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.Count">
      <summary>
            Gets or sets how many times event will be repeated.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.Until">
      <summary>
            Gets or sets the date the until which event will be repeated (Always converted to the UTC value).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.BySecond">
      <summary>
            Gets or sets BYSECONDS parameter ranging from 0 to 59.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByMinute">
      <summary>
            Gets or sets BYMINUTE parameter ranging from 0 to 59.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByHour">
      <summary>
            Gets or sets BYHOUR parameter ranging from 0 to 23.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByDay">
      <summary>
            Gets or sets BYDAY parameter.
            List of days when event should occur. You can use static fields of Weekday class e.g. <see cref="F:Limilabs.Mail.Appointments.Weekday.Monday" />.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByMonths">
      <summary>
            Gets or sets BYMONTH parameter.
            List of months when event should occur ranging from 1 to 12.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByWeekNumber">
      <summary>
            Gets or sets BYWEEKNO parameter.
            List of values ranging from 1 to 53 or -53 to -1.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByYearDay">
      <summary>
            Gets or sets BYYEARDAY parameter.
            List of values ranging from -365 to 365.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByMonthDay">
      <summary>
            Gets or sets BYMONTHDAY parameter.
            List of values ranging from -31 to 31.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.BySetPos">
      <summary>
             Gets or sets BYSETPOS parameter.
             Specifies list of values which corresponds to the nth occurrence within the set of events specified by the rule.
             Valid values are 1 to 366 or -366 to -1. It MUST only be used in conjunction with another BYxxx rule part. 
             For example "the last work day of the month" could be represented as:
            RRULE:FREQ=MONTHLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=-1
             </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.RecurringRule.WorkweekStarts">
      <summary>
            Gets or sets WKST parameter.
            The WKST rule part specifies the day on which the workweek starts. 
            This is significant when a WEEKLY RRULE has an interval greater than 1, and a BYDAY rule part is specified.
            This is also significant when in a YEARLY RRULE when a BYWEEKNO rule part is specified. The default value is MO.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Weekday">
      <summary>
            Represents the day of the week.
            <code>
            new Weekday(2, Weekday.Monday) // represents second Monday
            new Weekday(-1, Weekday.Friday) // represents last Friday
            </code></summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Sunday">
      <summary>
            Sunday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Monday">
      <summary>
            Monday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Tuesday">
      <summary>
            Tuesday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Wednesday">
      <summary>
            Wednesday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Thursday">
      <summary>
            Thursday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Friday">
      <summary>
            Friday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.Saturday">
      <summary>
            Saturday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastSunday">
      <summary>
            Last Sunday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastMonday">
      <summary>
            Last Monday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastTuesday">
      <summary>
            Last Tuesday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastWednesday">
      <summary>
            Last Wednesday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastThursday">
      <summary>
            Last Thursday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastFriday">
      <summary>
            Last Friday.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Weekday.LastSaturday">
      <summary>
            Last Saturday.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.#ctor(System.Int32,Limilabs.Mail.Appointments.Weekday)">
      <summary>
            Creates new instance of the weekday
            </summary>
      <param name="offset">Offset (1 is first, 2 is second, -1 is last)</param>
      <param name="day">Day of the week. You can use static fields of this class to fill this parameter(e.g. <see cref="F:Limilabs.Mail.Appointments.Weekday.Monday" />)</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.ToString">
      <summary>
            Returns <see cref="M:Limilabs.Mail.Appointments.Weekday.Render" /> for this object.
            </summary>
      <returns>
        <see cref="M:Limilabs.Mail.Appointments.Weekday.Render" /> for this object.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.Equals(Limilabs.Mail.Appointments.Weekday)">
      <summary>
             Determines whether the specified <see cref="T:Limilabs.Mail.Appointments.Weekday" /> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
      <param name="other">The <see cref="T:Limilabs.Mail.BasicConstant" /> to compare with the current <see cref="T:Limilabs.Mail.BasicConstant" /></param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            Names are compared case insensitive.
            </summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.op_Equality(Limilabs.Mail.Appointments.Weekday,Limilabs.Mail.Appointments.Weekday)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Mail.Appointments.Weekday" /> objects are equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Weekday.op_Inequality(Limilabs.Mail.Appointments.Weekday,Limilabs.Mail.Appointments.Weekday)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Mail.Appointments.Weekday" /> objects are not equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are not equal; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Weekday.Offset">
      <summary>
            Day of the week offset. 
            1 is first, 2 is second, -1 means last, -2 means second from the last and so on.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Weekday.Name">
      <summary>
            Two letter name of the day (MO, TU, WE, TH, FR, SA, SU)
            </summary>
    </member>
    <member name="T:Limilabs.Mail.ForwardBuilder">
      <summary>
            You can use this class to forward an email.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.ForwardBuilder.#ctor(Limilabs.Mail.IMail)">
      <summary>
            Creates new ForwardBuilder object.
            </summary>
      <param name="email">Original email to reply to.</param>
    </member>
    <member name="M:Limilabs.Mail.ForwardBuilder.Forward(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References" />, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo" />, <see cref="P:Limilabs.Mail.MailBuilder.Text" />, and <see cref="P:Limilabs.Mail.MailBuilder.Html" /> properties.
            </summary>
      <param name="from">From mailbox used for forwarding.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ForwardBuilder.Forward(System.String)">
      <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References" />, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo" />, <see cref="P:Limilabs.Mail.MailBuilder.Text" />, and <see cref="P:Limilabs.Mail.MailBuilder.Html" /> properties.
            </summary>
      <param name="fromAddress">From address used for forwarding.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.TextReplyTemplate">
      <summary>
            Gets or sets plain text version of the reply template.
            </summary>
      <remarks>
            Template sample:
            <pre>
            [Text]
            
            On [Original.Date] [Original.Sender.Name] wrote:
            [QuoteText]
            </pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.HtmlReplyTemplate">
      <summary>
            Gets or sets HTML version of the reply template.
            </summary>
      <remarks>
            Template sample:
            <pre>
            [Html]
            &lt;br /&gt;&lt;br /&gt;
            On [Original.Date] [Original.Sender.Name] wrote:
            &lt;blockquote style=""margin-left: 1em; padding-left: 1em; border-left: 1px #ccc solid;""&gt;
            [QuoteHtml]
            &lt;/blockquote&gt;
            </pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.SubjectReplyTemplate">
      <summary>
            Gets or sets reply template for the subject.
            </summary>
      <remarks>
            Template sample:
            <pre>
            RE: [Original.Subject]
            </pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.IncludeAttachments">
      <summary>
            Gets or sets the value that specifies if <see cref="P:Limilabs.Mail.IMail.NonVisuals" /> collection is copied to resulting email.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.Text">
      <summary>
            Gets or sets plain text version of the reply. Please remember that setting <see cref="P:Limilabs.Mail.ForwardBuilder.Html" /> will override plain text.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.Html">
      <summary>
            Gets or sets HTML version of the reply. Extracts plain text from HTML and also sets <see cref="P:Limilabs.Mail.ForwardBuilder.Text" /> property.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.ForwardBuilder.CreatePlainTextAutomatically">
      <summary>
            Gets or sets a value indicating if plain text version of a body is extracted from HTML when <see cref="P:Limilabs.Mail.ForwardBuilder.Html" /> property is set.
            Default is true.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MailAddress">
      <summary>
            Represents base class for email addresses.
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent a group of email addresses.
            Consider using <see cref="M:Limilabs.Mail.Headers.MailAddress.GetMailboxes" /> method to extract <see cref="T:Limilabs.Mail.Headers.MailBox" />(es) represented by this email address. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailAddressParser" /> class to parse raw string into its object representation.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailAddress.Render">
      <summary>
            Encodes and escapes all necessary data and renders this email address as a string.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailAddress.GetMailboxes">
      <summary>
            Gets all mailboxes represented by this email address.
            </summary>
      <returns>List of mailboxes represented by this email address.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.MailAddress.Name">
      <summary>
            Gets display name of this emmail address e.g. "John Smith". Can by <c>null</c>.
            Please note that two classes inherit from this class - you can use <see cref="P:Limilabs.Mail.Headers.MailBox.Address" /> or <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses" /> properties to get email address(es).
            Consider using <see cref="M:Limilabs.Mail.Headers.MailAddress.GetMailboxes" /> method to extract <see cref="T:Limilabs.Mail.Headers.MailBox" />(es) represented by this email address. 
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCard">
      <summary>
            Represents business card (vcard) entity.
            To get all vcards, that an email contains, you can use <see cref="P:Limilabs.Mail.IMail.VCards" /> collection.
            You can add vcards to an email using <see cref="M:Limilabs.Mail.MailBuilder.AddVCard(Limilabs.Mail.BusinessCard.VCard)" /> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.AddVCard(Limilabs.Mail.BusinessCard.VCard)" /> methods.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCard.#ctor">
      <summary>
            Creates new VCard entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.FullName">
      <summary>
            Gets or sets the formatted text corresponding to the full name of the object this vCard represents (FN).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Name">
      <summary>
            Gets or sets the name of the object this vCard represents (N).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Organization">
      <summary>
            Gets or sets the organization of the object this vCard represents (ORG).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Title">
      <summary>
             Gets or sets the position or job of the object this vCard represents (TITLE).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Url">
      <summary>
            Gets or sets the a uniform resource locator associated with the object to which this vCard refers (URL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.WorkPhone">
      <summary>
            Gets preferred  work  phone of the object this vCard represents (TEL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.WorkFax">
      <summary>
            Gets preferred  work fax of the object this vCard represents (TEL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.HomePhone">
      <summary>
            Gets preferred  home phone of the object this vCard represents (TEL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.HomeFax">
      <summary>
            Gets preferred  home fax of the object this vCard represents (TEL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.WorkAddress">
      <summary>
            Gets work address of the object this vCard represents (ADR).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.HomeAddress">
      <summary>
            Gets home address of the object this vCard represents (ADR).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Email">
      <summary>
            Gets preferred  email of the object this vCard represents (EMAIL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Addresses">
      <summary>
            Gets all addresses associated with this vCard (ADR).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Phones">
      <summary>
            Gets all phones associated with this vCard (TEL).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCard.Emails">
      <summary>
            Gets all emails associated with this vCard (EMAIL).
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardAddress">
      <summary>
            Represents VCard address.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.#ctor">
      <summary>
            Creates new VCardAddress entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates new VCardAddress entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.MarkWork">
      <summary>
            Marks this address as work address.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.MarkHome">
      <summary>
            Marks this address as home address.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Types">
      <summary>
            Gets types of this entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.PostOfficeBox">
      <summary>
            Gets or sets the post office box.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.ApartmentNumber">
      <summary>
            Gets or sets the extended address (e.g. apartment or suite number).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Street">
      <summary>
            Gets or sets the street address.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.City">
      <summary>
            Gets or sets the locality (e.g. city).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Region">
      <summary>
            Gets or sets the region (e.g. state or province).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.PostalCode">
      <summary>
            Gets or sets the postal code.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Country">
      <summary>
            Gets or sets the country name.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardEmail">
      <summary>
            Represents VCard email.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.#ctor">
      <summary>
            Creates new VCardEmail entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.#ctor(System.String)">
      <summary>
            Creates new VCardEmail entity.
            </summary>
      <param name="value">Email value.</param>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.MarkWork">
      <summary>
            Marks this email address as work email address.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.MarkHome">
      <summary>
            Marks this email address as home email address.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.MarkPreferred">
      <summary>
            Marks this email address as preferred email address.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardEmail.Preference">
      <summary>
            Gets or sets preference (lower value is more preferred, zero is least preferred)
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardEmail.Types">
      <summary>
            Gets types of this entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardEmail.Value">
      <summary>
            Gets or sets the actual email address.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardPhone">
      <summary>
            Represents VCard phones.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.#ctor">
      <summary>
            Creates new VCardPhone entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.#ctor(System.String)">
      <summary>
             Creates new VCardPhone entity.
            </summary>
      <param name="phone">Phone value.</param>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.AsUri(System.String)">
      <summary>
            Sets phone as free form text.
            </summary>
      <param name="phone">Phone as free form text.</param>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.AsText(System.String)">
      <summary>
            Sets phone as free uri text.
            </summary>
      <param name="phone">Phone as ur (tel:+1-111-555-1212).</param>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkWork">
      <summary>
            Marks this phone as work phone.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkHome">
      <summary>
            Marks this phone as home phone.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkFax">
      <summary>
            Marks this phone as fax phone.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkVoice">
      <summary>
            Marks this phone as voice phone.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Preference">
      <summary>
            Gets or sets preference (lower value is more preferred, zero is least preferred)
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Types">
      <summary>
            Gets types of this entity.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Value">
      <summary>
            Gets or sets the value (uri or text).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Phone">
      <summary>
            Gets or sets phone value.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.BusinessCard.VCardType">
      <summary>
            Represents VCard types.
            Static fields of this class represent most common types (e.g. <see cref="F:Limilabs.Mail.BusinessCard.VCardType.Home" />, <see cref="F:Limilabs.Mail.BusinessCard.VCardType.Work" />, <see cref="F:Limilabs.Mail.BusinessCard.VCardType.Pref" />, ...).
            </summary>
      <seealso cref="P:Limilabs.Mail.BusinessCard.VCardPhone.Types" />
      <seealso cref="P:Limilabs.Mail.BusinessCard.VCardAddress.Types" />
    </member>
    <member name="F:Limilabs.Mail.BusinessCard.VCardType.Home">
      <summary>
            Represents Home.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.BusinessCard.VCardType.Work">
      <summary>
            Represents Work.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.BusinessCard.VCardType.Voice">
      <summary>
            Represents Voice.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.BusinessCard.VCardType.Fax">
      <summary>
            Represents Fax.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.BusinessCard.VCardType.Pref">
      <summary>
            Represents preferred type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.BusinessCard.VCardType.Internet">
      <summary>
            Represents Internet type.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.Spam.BayesianMailFilter">
      <summary>
            Represents Bayesian spam filter.
            You can use <see cref="T:Limilabs.Mail.Tools.Spam.SpamFilterTeacher" /> to teach and assess the accuracy of the filter.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.Spam.ISpamFilter">
      <summary>
            Represents a spam filter.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.ISpamFilter.LearnSpam(Limilabs.Mail.IMail)">
      <summary>
            Use this method to teach the filter that specified message is spam.
            </summary>
      <param name="email">Spam message</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.ISpamFilter.LearnHam(Limilabs.Mail.IMail)">
      <summary>
            Use this method to teach the filter that specified message is not spam (is ham).
            </summary>
      <param name="email">Not spam (ham) message</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.ISpamFilter.Examine(Limilabs.Mail.IMail)">
      <summary>
            Examines specified message checking the probability of the message being spam.
            </summary>
      <param name="email">Message to check.</param>
      <returns>Result including probability of the specified message being spam (between 0.0 and 1.0).</returns>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.LearnSpam(Limilabs.Mail.IMail)">
      <summary>
            Use this method to teach the filter that specified message is spam.
            </summary>
      <param name="email">Spam message</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.LearnHam(Limilabs.Mail.IMail)">
      <summary>
            Use this method to teach the filter that specified message is not spam (is ham).
            </summary>
      <param name="email">Not spam (ham) message</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.Examine(Limilabs.Mail.IMail)">
      <summary>
            Examines specified message checking the probability of the message being spam.
            </summary>
      <param name="email">Message to check.</param>
      <returns>Result including probability of the specified message being spam (between 0.0 and 1.0).</returns>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.Save(System.String)">
      <summary>
            Saves all words used be the filter to specified file.
            </summary>
      <param name="path">The file to save to.</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.Load(System.String)">
      <summary>
            Loads all words used by the filter from specified file.
            </summary>
      <param name="path">The file to read from.</param>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.BayesianMailFilter.SpamBias">
      <summary>
            Gets or sets the overall probability that any given message is spam (Pr(S))
            </summary>
      <remarks>
            Not biased filter assumes 0.5. Recent statistics show that the current probability of any message being spam is 80%, at the very least: SpamBias = 0.8; HamBias = 0.2
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.BayesianMailFilter.HamBias">
      <summary>
            Gets or sets the overall probability that any given message is not spam (is "ham") (Pr(H))
            </summary>
      <remarks>
            Not biased filter assumes 0.5. Recent statistics show that the current probability of any message being spam is 80%, at the very least: SpamBias = 0.8; HamBias = 0.2
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.BayesianMailFilter.SpamThreshold">
      <summary>
            Gets or sets the spam threshold: IsSpam = SpamProbability &gt; SpamThreshold
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.Spam.SpamFilterTeacher">
      <summary>
            You can use this class to teach spam filter (e.g. <see cref="T:Limilabs.Mail.Tools.Spam.BayesianMailFilter" />) to recognize which messages are spam and which are not (are ham).
            During learning phase, both spam and not spam (ham) messages' count should be similar (100 or more).
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.#ctor(Limilabs.Mail.Tools.Spam.ISpamFilter)">
      <summary>
            Creates new instance of the teacher class to teach specific filter.
            </summary>
      <param name="filter">Spam filter to teach.</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.TeachSpam(System.String)">
      <summary>
            Use this method to teach the filter which messages are spam.
            </summary>
      <param name="path">Path to the folder that contains spam messages.</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.TeachHam(System.String)">
      <summary>
            Use this method to teach the filter which messages are not spam (are ham).
            </summary>
      <param name="path">Path to the folder that contains not spam (ham) messages.</param>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.Test(System.String,System.String)">
      <summary>
            Use this method to test the filter.
            </summary>
      <param name="spamFolder">Path to the folder that contains spam messages to test the filter on.</param>
      <param name="hamFolder">Path to the folder that contains not spam (ham) messages to test to test the filter on.</param>
      <returns>Test results.</returns>
    </member>
    <member name="T:Limilabs.Mail.Tools.Spam.SpamResult">
      <summary>
            Represents result of the email examination performed by <see cref="T:Limilabs.Mail.Tools.Spam.BayesianMailFilter" /> class.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamResult.Probability">
      <summary>
            Gets the probability (from 0.0 to 1.0) that the message is spam.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamResult.IsSpam">
      <summary>
            Gets the value indicating if message is spam.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamResult.IsHam">
      <summary>
            Gets the value indicating if message is ham.
            This property return negation of the <see cref="P:Limilabs.Mail.Tools.Spam.SpamResult.IsSpam" /> property (!IsSpam).
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.Spam.SpamTestResults">
      <summary>
            Represents the result of spam filter test. 
            You can use <see cref="T:Limilabs.Mail.Tools.Spam.SpamFilterTeacher" /> to teach and assess the accuracy of the filter.
            </summary>
      <seealso cref="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.Test(System.String,System.String)" />
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.SpamTestResults.#ctor">
      <summary>
            Creates new SpamTestResults object.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Tools.Spam.SpamTestResults.ToString">
      <summary>
            Returns string representing this object
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.SuccessCount">
      <summary>
            Gets the number of correct recognitions.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.TestsCount">
      <summary>
            Gets the count of all tests.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.FalsePositives">
      <summary>
            Gets file names of false positives (ham messages marked as spam).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.NotMarkedAsSpam">
      <summary>
            Gets file names of the failures (spam messages not marked as spam).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.Accuracy">
      <summary>
            Gets the filter accuracy (<see cref="P:Limilabs.Mail.Tools.Spam.SpamTestResults.SuccessCount" />/<see cref="P:Limilabs.Mail.Tools.Spam.SpamTestResults.TestsCount" />)
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.Bounce">
      <summary>
            Recognizes common patterns of delivery failure emails.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Tools.Bounce.Examine(Limilabs.Mail.IMail)">
      <summary>
            Examines specified email for delivery failure patterns.
            </summary>
      <param name="email">Email to examine.</param>
      <returns>Examination result. Please use <see cref="P:Limilabs.Mail.Tools.BounceResult.IsDeliveryFailure" /> to check if the email is a delivery failure notification.</returns>
    </member>
    <member name="T:Limilabs.Mail.Tools.BounceResult">
      <summary>
            Represents result of the email examination performed by <see cref="T:Limilabs.Mail.Tools.Bounce" /> class.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.BounceResult.IsDeliveryFailure">
      <summary>
            True if email is a delivery failure or deliver delay report
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.BounceResult.Recipient">
      <summary>
            Indicates the original recipient address as specified by the sender of the message for which the delivery failure report was issued. 
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.BounceResult.Reason">
      <summary>
            For a "failed" or "delayed" recipient, contains the actual diagnostic code issued by the mail transport.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.BounceResult.Action">
      <summary>
            Indicates the action performed as a result of attempt to deliver the message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Tools.BounceResult.Status">
      <summary>
            Contains a transport-independent status code which indicates the delivery status of the message to that recipient.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MailAddressParser">
      <summary>
            Email address parser. 
            It can be used to parse raw strings and create its <see cref="T:Limilabs.Mail.Headers.MailBox" /> or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> representation.
            </summary>
      <seealso cref="T:Limilabs.Mail.Headers.MailAddress" />
      <seealso cref="T:Limilabs.Mail.Headers.MailBox" />
      <seealso cref="T:Limilabs.Mail.Headers.MailGroup" />
    </member>
    <member name="M:Limilabs.Mail.Headers.MailAddressParser.ParseOne(System.String)">
      <summary>
            Parses text, and creates new <see cref="T:Limilabs.Mail.Headers.MailAddress" /> object.
            </summary>
      <param name="text">String to parse.</param>
      <returns>New <see cref="T:Limilabs.Mail.Headers.MailAddress" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailAddressParser.Parse(System.String)">
      <summary>
            Parses text, and creates a list of new <see cref="T:Limilabs.Mail.Headers.MailAddress" /> objects.
            </summary>
      <param name="text">String to parse.</param>
      <returns>New list of <see cref="T:Limilabs.Mail.Headers.MailAddress" /> objects.</returns>
    </member>
    <member name="T:Limilabs.Mail.Headers.MailGroup">
      <summary>
            Represents mail address group that consists of a <see cref="P:Limilabs.Mail.Headers.MailAddress.Name" /> and <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses" /> list.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{Limilabs.Mail.Headers.MailAddress})">
      <summary>
            Creates new MailGroup object.
            </summary>
      <param name="name">Group name.</param>
      <param name="addresses">Addresses in this group.</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailGroup.#ctor(System.String)">
      <summary>
            Creates new empty group.
            </summary>
      <param name="name">Group name.</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailGroup.Render">
      <summary>
            Encodes and escapes all necessary data and renders this email group as a string.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailGroup.ToString">
      <summary>
            Returns string containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and all <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses" />.
            </summary>
      <returns>
            String containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and all <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses" />.
            </returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailGroup.GetMailboxes">
      <summary>
            Gets all mailboxes represented by this mail group.
            </summary>
      <returns>List of mailboxes represented by this group and all child groups.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.MailGroup.Addresses">
      <summary>
            Gets all mail addresses in this group.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.DispositonActionMode">
      <summary>
            Specifies if the disposition described by the disposition type was a result of an manual or automatic action.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DispositonActionMode.ManualAction" />, <see cref="F:Limilabs.Mail.Headers.DispositonActionMode.AutomaticAction" />.
            <seealso cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.ActionMode" /></summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonActionMode.ManualAction">
      <summary>
            The disposition described by the disposition type was a result of an explicit instruction
            by the user rather than some sort of automatically performed action.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonActionMode.AutomaticAction">
      <summary>
            The disposition described by the disposition type was a result of an automatic action,
            rather than an explicit instruction by the user for this message.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.DispositonSendingMode">
      <summary>
            Specifies if the Message Delivery Notification (MDN) was sent manually or automatically.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DispositonSendingMode.SentManually" />, <see cref="F:Limilabs.Mail.Headers.DispositonSendingMode.SentAutomatically" />.
            <seealso cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.SendingMode" /></summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonSendingMode.SentManually">
      <summary>
            The user explicitly gave permission for this particular Message Delivery Notification (MDN) to be sent.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonSendingMode.SentAutomatically">
      <summary>
            The Message Delivery Notification (MDN) was sent because the Mail User Agent (MUA) had previously been configured to do so automatically.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.DispositonType">
      <summary>
            Describes disposition type of the message (<a href="http://www.limilabs.com/mail/rfc/2298">RFC 2298</a>, <a href="http://www.limilabs.com/mail/rfc/3798">RFC 3798</a>)
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DispositonType.Displayed" />, <see cref="F:Limilabs.Mail.Headers.DispositonType.Deleted" />.
            <seealso cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Type" /></summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonType.Displayed">
      <summary>
            The message has been displayed by the Mail User Agent (MUA) to someone reading the recipient's mailbox.
             There is no guarantee that the content has been read or understood.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonType.Deleted">
      <summary>
            The message has been deleted. The recipient may or may not have seen the message.  
            The recipient might "undelete" the message at a later time and read the message.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonType.Dispatched">
      <summary>
            The message has been sent somewhere in some manner (e.g., printed, faxed, forwarded) 
            without necessarily having been previously displayed to the user.  
            The user may or may not see the message later.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonType.Processed">
      <summary>
            The message has been processed in some manner (i.e., by some sort of rules or server) without being displayed to the user.  
            The user mayor may not see the message later, or there may not even be a human user associated with the mailbox.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonType.Denied">
      <summary>
            The recipient does not wish the sender to be informed of the message's disposition.  
            A UA may also siliently ignore message disposition requests in this situation.
            </summary>
      <remarks>
            (Removed by <a href="http://www.limilabs.com/mail/rfc/3798">RFC 3798</a> "reflecting the lack of implementation or usage at this time.")
            </remarks>
    </member>
    <member name="F:Limilabs.Mail.Headers.DispositonType.Failed">
      <summary>
             A failure occurred that prevented the proper generation of an MDN.  
            More information about the cause of the failure may be contained in a Failure field.  
            The "failed" disposition type is not to be used for the situation in which there is is some problem in processing the message
            other than interpreting the request for an MDN.  
            The "processed" or other disposition type with appropriate disposition modifiers is to be used in such situations.
            </summary>
      <remarks>
            (Removed by <a href="http://www.limilabs.com/mail/rfc/3798">RFC 3798</a> "reflecting the lack of implementation or usage at this time.")
            </remarks>
    </member>
    <member name="T:Limilabs.Mail.Headers.HeaderDecoder">
      <summary>
            Implements 'Base64' and 'Quoted-Printable' header decoding (<a href="http://www.limilabs.com/mail/rfc/2047">RFC 2047</a>), removes comments and replaces escape sequences.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.HeaderDecoder.Decode(System.String)">
      <summary>
            Decodes Base64 and Quoted-Printable strings (<a href="http://www.limilabs.com/mail/rfc/2047">RFC 2047</a>).
            </summary>
      <param name="text">"Tom and =?iso-8859-2?Q?Pawe=B3_Le=B6nikowski?= are..."</param>
      <returns>"Tom and Paweł Leśnikowski are..."</returns>
      <exception cref="T:Limilabs.Mail.MailException">
            The charset is not supported by the current regional options of the computer executing this method.
            </exception>
    </member>
    <member name="T:Limilabs.Mail.SMIMEConfiguration">
      <summary>
            Represents S/MIME decrypt configuration (automatic decryption, certificates used for decryption)
            </summary>
    </member>
    <member name="M:Limilabs.Mail.SMIMEConfiguration.#ctor">
      <summary>
            Creates new S/MIME configuration.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.SMIMEConfiguration.#ctor(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})">
      <summary>
            Creates new S/MIME configuration.
            </summary>
      <param name="certificates">Certificates used for decryption.</param>
    </member>
    <member name="M:Limilabs.Mail.SMIMEConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Creates new S/MIME configuration.
            </summary>
      <param name="certificate">Certificate used for decryption.</param>
    </member>
    <member name="P:Limilabs.Mail.SMIMEConfiguration.DecryptAutomatically">
      <summary>
            Specifies if S/MIME encrypted messages should be decrypted automatically.
            Decryption searches through <see cref="P:Limilabs.Mail.SMIMEConfiguration.Certificates" /> collection and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My" /> store to find appropriate certificate.
            Default is true.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.SMIMEConfiguration.ExtractSignedAutomatically">
      <summary>
            Specifies if S/MIME signed messages should be extracted automatically.
            This settings affects signed emails that use pkcs7-mime signed-data (not detached signatures).
            Default is true.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.SMIMEConfiguration.Certificates">
      <summary>
            List of certificates used for decryption.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.GenericPriority">
      <summary>
            Generic priority of the message.
            Message priority can be stored used three different headers: <see cref="P:Limilabs.Mail.IMail.Priority" />,  <see cref="P:Limilabs.Mail.IMail.Importance" /> and <see cref="P:Limilabs.Mail.IMail.XPriority" />.
            This enum is used by <seealso cref="M:Limilabs.Mail.IMail.GetGenericPriority" /> method, which checks all those headers.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh" />
      <seealso cref="M:Limilabs.Mail.IMail.PriorityLow" />
    </member>
    <member name="F:Limilabs.Mail.GenericPriority.Low">
      <summary>
            Message has low priority.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.GenericPriority.Normal">
      <summary>
            Message has normal priority.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.GenericPriority.High">
      <summary>
            Message has high priority.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.ReplyBuilder">
      <summary>
            You can use this class to create a reply from specified email.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.ReplyBuilder.#ctor(Limilabs.Mail.IMail)">
      <summary>
            Creates new ReplyBuilder object.
            </summary>
      <param name="email">Original email to reply to.</param>
    </member>
    <member name="M:Limilabs.Mail.ReplyBuilder.ReplyToAll(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References" />, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo" />, <see cref="P:Limilabs.Mail.MailBuilder.Text" />, and <see cref="P:Limilabs.Mail.MailBuilder.Html" /> properties.
            </summary>
      <param name="from">From mailbox used for replying.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReplyBuilder.Reply(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References" />, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo" />, <see cref="P:Limilabs.Mail.MailBuilder.Text" />, and <see cref="P:Limilabs.Mail.MailBuilder.Html" /> properties.
            </summary>
      <param name="from">From mailbox used for replying.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReplyBuilder.Reply(System.String)">
      <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References" />, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo" />, <see cref="P:Limilabs.Mail.MailBuilder.Text" />, and <see cref="P:Limilabs.Mail.MailBuilder.Html" /> properties.
            </summary>
      <param name="fromAddress">From address used for replying.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="M:Limilabs.Mail.ReplyBuilder.ReplyToAll(System.String)">
      <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References" />, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo" />, <see cref="P:Limilabs.Mail.MailBuilder.Text" />, and <see cref="P:Limilabs.Mail.MailBuilder.Html" /> properties.
            </summary>
      <param name="fromAddress">From address used for replying.</param>
      <returns>MailBuilder class that can be used to create an actual email.</returns>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.TextReplyTemplate">
      <summary>
            Gets or sets plain text version of the reply template.
            </summary>
      <remarks>
            Template sample:
            <pre>
            [Text]
            
            On [Original.Date] [Original.Sender.Name] wrote:
            [QuoteText]
            </pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.HtmlReplyTemplate">
      <summary>
            Gets or sets HTML version of the reply template.
            </summary>
      <remarks>
            Template sample:
            <pre>
            [Html]
            &lt;br /&gt;&lt;br /&gt;
            On [Original.Date] [Original.Sender.Name] wrote:
            &lt;blockquote style=""margin-left: 1em; padding-left: 1em; border-left: 1px #ccc solid;""&gt;
            [QuoteHtml]
            &lt;/blockquote&gt;
            </pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.SubjectReplyTemplate">
      <summary>
            Gets or sets reply template for the subject.
            </summary>
      <remarks>
            Template sample:
            <pre>
            RE: [Original.Subject]
            </pre></remarks>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.IncludeAttachments">
      <summary>
            Gets or sets the value that specifies if <see cref="P:Limilabs.Mail.IMail.NonVisuals" /> collection is copied to resulting email.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.CreatePlainTextAutomatically">
      <summary>
            Gets or sets a value indicating if plain text version of a body is extracted from HTML when <see cref="P:Limilabs.Mail.ReplyBuilder.Html" /> property is set.
            Default is true.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.Text">
      <summary>
            Gets or sets plain text version of the reply. Please remember that setting <see cref="P:Limilabs.Mail.ReplyBuilder.Html" /> will override plain text.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.ReplyBuilder.Html">
      <summary>
            Gets or sets HTML version of the reply. Extracts plain text from HTML and also sets <see cref="P:Limilabs.Mail.ReplyBuilder.Text" /> property.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Tools.AddressValidator">
      <summary>
             Validates email address.
             Uses Format, MX and SMTP validation.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Tools.AddressValidator.Validate(System.String)">
      <summary>
             Validates email address (email format, existence of MX record, SMTP connection).
            </summary>
      <param name="address">Email address to validate (e.g. mail@example.com).</param>
      <returns>Result of the validation.</returns>
    </member>
    <member name="M:Limilabs.Mail.Tools.AddressValidator.ValidateFormat(System.String)">
      <summary>
             Validates only email format.
             </summary>
      <param name="address">Email address to validate (e.g. mail@example.com).</param>
      <returns>Result of the validation.</returns>
    </member>
    <member name="M:Limilabs.Mail.Tools.AddressValidator.ValidateMX(System.String)">
      <summary>
             Validates email format and existence of MX record.
             </summary>
      <param name="address">Email address to validate (e.g. mail@example.com).</param>
      <returns>Result of the validation.</returns>
    </member>
    <member name="T:Limilabs.Mail.Tools.AddressValidationResult">
      <summary>
            Represents result of the email address validation.
            </summary>
      <seealso cref="T:Limilabs.Mail.Tools.AddressValidator" />
    </member>
    <member name="F:Limilabs.Mail.Tools.AddressValidationResult.Success">
      <summary>
            Email is valid.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Tools.AddressValidationResult.IncorrectFormat">
      <summary>
            Email has incorrect format.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Tools.AddressValidationResult.NoMXRecord">
      <summary>
            No MX record was found for the domain.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Tools.AddressValidationResult.SmtpRejection">
      <summary>
            Smtp server rejected email address.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Tools.AddressValidationResult.SmtpError">
      <summary>
            Smtp server returned an error.
            </summary>
    </member>
    <member name="T:Limilabs.Client.DNS.DnsHelper">
      <summary>
            Helper class for accessing DNS.
            </summary>
    </member>
    <member name="M:Limilabs.Client.DNS.DnsHelper.GetSmtpServers(System.String)">
      <summary>
            Gets SMTP servers for specified domain or email address.
            This method searches DNS MX records. Servers are sorted by priority, first being the highest.
            </summary>
      <param name="domainOrEmail">Domain or email address to search SMTP servers for.</param>
      <returns>List of the SMTP servers.</returns>
    </member>
    <member name="M:Limilabs.Client.DNS.DnsHelper.GetSmtpServer(System.String)">
      <summary>
            Gets highest priority SMTP server for specified domain or email address.
            This method searches DNS MX records.
            </summary>
      <param name="domainOrEmail">Domain or email address to search SMTP servers for.</param>
      <returns>Highest priority SMTP server.</returns>
    </member>
    <member name="T:Limilabs.Mail.Headers.DSNAction">
      <summary>
            Indicates the action performed by the Reporting-MTA as a result of its attempt to deliver the message.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DSNAction.Failed" />, <see cref="F:Limilabs.Mail.Headers.DSNAction.Delayed" />, <see cref="F:Limilabs.Mail.Headers.DSNAction.Delivered" />, <see cref="F:Limilabs.Mail.Headers.DSNAction.Relayed" />, <see cref="F:Limilabs.Mail.Headers.DSNAction.Expanded" />.
            <seealso cref="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Action" /><seealso cref="P:Limilabs.Mail.Tools.BounceResult.Action" /></summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DSNAction.Failed">
      <summary>
            Indicates that the message could not be delivered to the recipient.  
            The Reporting MTA has abandoned any attempts to deliver the message to this recipient.  
            No further notifications should be expected.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DSNAction.Delayed">
      <summary>
            Indicates that the Reporting MTA has so far been unable to deliver or relay the message, but it will continue to attempt to do so.  
            Additional notification messages may be issued as the message is further delayed or successfully delivered, 
            or if delivery attempts are later abandoned.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DSNAction.Delivered">
      <summary>
            Indicates that the message was successfully delivered to the recipient address specified by the sender, 
            which includes "delivery" to a mailing list exploder.
            It does not indicate that the message has been read. 
            This is a terminal state and no further DSN for this recipient should be expected.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DSNAction.Relayed">
      <summary>
            Indicates that the message has been relayed or gatewayed into an environment that does not accept responsibility
            for generating DSNs upon successful delivery. 
            This action-value SHOULD NOT be used unless the sender has requested notification of successful delivery for this recipient.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.DSNAction.Expanded">
      <summary>
            Indicates that the message has been successfully delivered to the recipient address as specified by the sender,
            and forwarded by the Reporting-MTA beyond that destination to multiple additional recipient addresses.
            An action-value of "expanded" differs from <see cref="F:Limilabs.Mail.Headers.DSNAction.Delivered" /> in that "expanded" is not a terminal state.  
            Further "failed" and/or "delayed" notifications may be provided.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeDeliveryStatusNotification">
      <summary>
            Represents Delivery Status Notification (DSN).
            Provides indications of successful delivery or delivery failure.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ReportingMTA">
      <summary>
            Indicates the name of the Message Transfer Agent (MTA) which is reporting the results of delivery attempts described in this Delivery Status Notification (DSN).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ReceivedFromMTA">
      <summary>
            Indicates the name of the Message Transfer Agent (MTA) from which the message was received.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ArrivalDate">
      <summary>
            Indicates the date and time at which the message arrived at the Reporting MTA. 
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Date">
      <summary>
            Indicates the date field. 
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.FirstRecipient">
      <summary>
            Gets all Delivery Status Notification for first recipient, or null if no recipient is found.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Recipients">
      <summary>
            Gets all Delivery Status Notification for all recipient.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Item(System.String)">
      <summary>
            Gets any field defined in this Delivery Status Notification (DSN) header.
            </summary>
      <param name="name">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeMessageDispositionNotification">
      <summary>
            Message Disposition Notifications (MDN) provide a notification of the "disposition" of a message - indicating, 
            for example, whether it is read by a recipient, discarded before being read.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.FinalRecipient">
      <summary>
            Indicates the recipient.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.OriginalMessageID">
      <summary>
            Gets original message id ('Original-Message-ID' field). Without surrounding brackets (&lt; and &gt;)
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.ActionMode">
      <summary>
            Specifies if the disposition described by the <see cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Type" /> was a result of an manual or automatic action.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.SendingMode">
      <summary>
            Specifies if the Message Delivery Notification (MDN) was sent manually or automatically.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Type">
      <summary>
            Describes disposition type of the message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Item(System.String)">
      <summary>
            Gets any field defined in this Message Delivery Notification (MDN).
            </summary>
      <param name="name">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="T:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification">
      <summary>
            Defines Delivery Status Notification (DSN) for a single recipient.
            <seealso cref="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.FirstRecipient" /><seealso cref="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Recipients" /></summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Action">
      <summary>
            Indicates the action performed by the <see cref="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ReportingMTA" /> as a result of its attempt to deliver the message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.DiagnosticCode">
      <summary>
            For a "failed" or "delayed" recipient, contains the actual diagnostic code issued by the mail transport.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Status">
      <summary>
            Contains a transport-independent status code which indicates the delivery status of the message to that recipient.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.OriginalRecipient">
      <summary>
            Indicates the original recipient address as specified by the sender of the message for which the DSN is being issued.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.FinalRecipient">
      <summary>
            Indicates the recipient for which this set of per-recipient fields applies.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Item(System.String)">
      <summary>
            Gets any field defined in Delivery Status Notification (DSN) for this recipient.
            </summary>
      <param name="name">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="T:Limilabs.Client.Authentication.SignatureType">
      <summary>
            Signature types used by <see cref="T:Limilabs.Client.Authentication.OAuth" /> authentication (<see cref="M:Limilabs.Client.Authentication.IOAuth.SignatureMethod(Limilabs.Client.Authentication.SignatureType)" />).
            </summary>
      <seealso cref="T:Limilabs.Client.Authentication.OAuth" />
      <seealso cref="T:Limilabs.Client.Authentication.IOAuth" />
      <seealso cref="T:Limilabs.Client.Authentication.ISignedOAuth" />
    </member>
    <member name="F:Limilabs.Client.Authentication.SignatureType.HMACSHA1">
      <summary>
            HMACSHA1 method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.SignatureType.PLAINTEXT">
      <summary>
            Plaint text method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.Authentication.SignatureType.RSASHA1">
      <summary>
            Not supported RSASHA1 method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.MimeStructure">
      <summary>
            Represents part of the mime tree stored on the IMAP server.
            You can download the content of a part using following methods:
            <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" />, <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" />, <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" />, <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" />,
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.MimeStructure.EstimateActualSize">
      <summary>
             Estimates actual attachment size.
             Bases on assumption that <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Base64" /> are 37% smaller and <see cref="F:Limilabs.Mail.Headers.MimeEncoding.XUUE" /> encoded files are 33% smaller.
            </summary>
      <returns>Estimated size of the attachment.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.ID">
      <summary>
             Gets the id of this part.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.FileName">
      <summary>
            Gets the suggested file name of this part. May be <see langword="null" /> if not present.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.SafeFileName">
      <summary>
            Gets the safe file name of this part. All special characters and path are removed.
            If the file name is not specified (<see cref="P:Limilabs.Client.IMAP.MimeStructure.FileName" /> is <see langword="null" /> or empty) generates random file name in format "att_d1be267b623941159a159158138a636e.dat".
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.ContentTransferEncoding">
      <summary>
            Gets the content transfer encoding of this part.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.ContentId">
      <summary>
            Content id of the part. Without enclosing '&lt;' and '&gt;'.
            You can use <see cref="T:Limilabs.Mail.Headers.ContentIdHelper" /> to extract content id from cid url.
            </summary>
      <remarks>E.g. 01@mobile</remarks>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.Size">
      <summary>
            Gets the size of this part in bytes.
            Note that this size is the size in attachment's transfer encoding and not the resulting size after any decoding.
            This means that, for example base64 encoded files, are in fact 37% smaller than the value of this property.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.Encoding">
      <summary>
            Gets the encoding of this part.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.MimeStructure.ContentType">
      <summary>
            Gets the content type of this text part. May be <see langword="null" /> if not present.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.FluentSearch">
      <summary>
            Represents IMAP search query. You can use <see cref="M:Limilabs.Client.IMAP.Imap.Search" /> method to create this object..
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
      <remarks>
        <see cref="F:Limilabs.Client.IMAP.ResultType.Uids" /> is default, use <see cref="M:Limilabs.Client.IMAP.FluentSearch.ResultsAs(Limilabs.Client.IMAP.ResultType)" /> method to change the result type.
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.ResultsAs(Limilabs.Client.IMAP.ResultType)">
      <summary>
            Sets the result type (message numbers or UIDs) of this search query.
            </summary>
      <param name="resultType">Result type.</param>
      <returns>This search query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.UseEncoding(System.Text.Encoding)">
      <summary>
            Forces the use of specified encoding.  Some servers do not support this feature.
            </summary>
      <param name="encoding">Search parameters encoding.</param>
      <returns>This search query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.NoCharset">
      <summary>
            Forces the client not to use CHARSET command. Forces the use of default 8-bit encoding.
            Some servers (e.g. Exchange 2007) fail to understand CHARSET command.
            </summary>
      <returns>This search query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.Where(Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Adds search criteria to this search.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> and other <see cref="T:Limilabs.Client.IMAP.Expression" /> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery" /> to this method.
            </summary>
      <param name="criterion">Search criteria.</param>
      <returns>This search query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.Sort(Limilabs.Client.IMAP.ISorter)">
      <summary>
            Adds sort criteria to this search. 
            Use <see cref="M:Limilabs.Client.IMAP.SortBy.Multiple(Limilabs.Client.IMAP.ISorter[])" /> and other <see cref="T:Limilabs.Client.IMAP.SortBy" /> class properties to create a valid sort expression.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Sort" />. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
      <param name="sorter">Sort criteria.</param>
      <returns>This search query object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.GetList">
      <summary>
            Issues the search query and retrieves UIDs or message numbers of messages, that match the search criteria, using server-side searching.
            </summary>
      <returns>List of UIDs or numbers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FluentSearch.op_Implicit(Limilabs.Client.IMAP.FluentSearch)~System.Collections.Generic.List{System.Int64}">
      <summary>
            Issues the search query and retrieves UIDs or message numbers of messages, that match the search criteria, using server-side searching.
            </summary>
      <param name="search">Search query.</param>
      <returns>List of UIDs or numbers.</returns>
    </member>
    <member name="T:Limilabs.Client.IMAP.BodyStructure">
      <summary>
            Represents structure of the email stored on the IMAP server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Collections.Generic.List{System.Int64})" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(System.Collections.Generic.List{System.Int64})" /> methods to get the structure of the specified emails.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})" />
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.UID">
      <summary>
             Message UID on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.MessageNumber">
      <summary>
             Message number on the IMAP server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.Text">
      <summary>
            Contains information about plain text version of the email.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> to get the part's content.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.Html">
      <summary>
            Contains information about HTML content of the email.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> to get the part's content.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.Attachments">
      <summary>
            Contains information about email's attachments.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> to get the part's content.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.Visuals">
      <summary>
            Contains information about email's visual elements.
            E.g. Images embedded inside HTML email.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> to get the part's content.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.BodyStructure.NonVisuals">
      <summary>
            Contains information about email's non visual elements.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)" /> to get the part's content.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapResponse">
      <summary>
            Represents IMAP server response.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.ImapResponse.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.IMAP.ImapResponse" />.
            </summary>
      <returns>
            A string that represents the current <see cref="T:Limilabs.Client.IMAP.ImapResponse" />.
            </returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapResponse.Tag">
      <summary>
            Gets tag expected for this response.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapResponse.Status">
      <summary>
             Gets status of this response.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapResponse.Message">
      <summary>
            Gets response message e.g.: "LOGOUT completed".
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapResponse.Lines">
      <summary>
            Gets all lines of the response except the status line.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.ImapResponse.StatusLine">
      <summary>
            Gets status line, includes <see cref="P:Limilabs.Client.IMAP.ImapResponse.Tag" />, <see cref="P:Limilabs.Client.IMAP.ImapResponse.Status" /> and <see cref="P:Limilabs.Client.IMAP.ImapResponse.Message" /> e.g.: "A0001 OK LOGOUT completed".
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ISorter">
      <summary>
            Represents IMAP sort criteria.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.ISorter.Render(Limilabs.Client.IMAP.ImapCommand)">
      <summary>
            Renders current sorter object to specified command list.
            </summary>
      <param name="command">Command list to render on.</param>
    </member>
    <member name="T:Limilabs.Client.IMAP.FolderInfo">
      <summary>
            Represents IMAP folder (mailbox) info.
            </summary>
      <remarks>
            INBOX name is case insensitive, all other names may be case sensitive.
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.ToString">
      <summary>
            Returns <see cref="P:Limilabs.Client.IMAP.FolderInfo.Name" /> property.
            </summary>
      <returns>
        <see cref="P:Limilabs.Client.IMAP.FolderInfo.Name" /> property.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.CompareTo(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes (&lt;0), 
            follows (&gt;0), or occurs in the same position (=0) in the sort order as the other object.
            </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.Equals(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.op_Equality(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.FolderInfo" /> objects are equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.FolderInfo.op_Inequality(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.FolderInfo" /> objects are not equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are not equal; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.Name">
      <summary>
            Gets the full folder name.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.ShortName">
      <summary>
            Gets the name of the last (deepest) path level name.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.SeparatorCharacter">
      <summary>
            Gets the folder path separator character.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.Flags">
      <summary>
            Gets flags associated with this folder.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.Parent">
      <summary>
            Gets the parent of this folder.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.SubFolders">
      <summary>
            Gets the direct sub folders of this folder.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.CanSelect">
      <summary>
            Gets the value indicating if you can select this folder. (Searches for <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoSelect" /> flag)
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderInfo.HasChildren">
      <summary>
            Gets the value indicating if this folder has children. 
            <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren" /> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoInferiors" /> flag results in false, <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasChildren" /> in true, null otherwise.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ResultType">
      <summary>
            Defines result type for IMAP searches.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
      <seealso cref="M:Limilabs.Client.IMAP.FluentSearch.ResultsAs(Limilabs.Client.IMAP.ResultType)" />
    </member>
    <member name="F:Limilabs.Client.IMAP.ResultType.Uids">
      <summary>
            Result should be returned in form of unique message ids.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ResultType.Numbers">
      <summary>
            Result should be returned in form of message numbers.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.SortBy">
      <summary>
            Represents expressions that can be used by <see cref="M:Limilabs.Client.IMAP.FluentSearch.Sort(Limilabs.Client.IMAP.ISorter)" /> methods.
            To join several sort criteria use <see cref="M:Limilabs.Client.IMAP.SortBy.Multiple(Limilabs.Client.IMAP.ISorter[])" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Reverse(Limilabs.Client.IMAP.ISorter)">
      <summary>
             Reverses specified sorter. Descending order is used.
             Note: REVERSE only reverses a single criterion, and does not
             affect the implicit "sequence number" sort criterion if all
             other criteria are identical.  Consequently, a sort of
             REVERSE SUBJECT is not the same as a reverse ordering of a
             SUBJECT sort.  This can be avoided by use of additional
             criteria, e.g., SUBJECT DATE vs. REVERSE SUBJECT REVERSE
             DATE.  In general, however, it's better (and faster, if the
            client has a "reverse current ordering" command) to reverse
            the results in the client instead of issuing a new SORT.
             </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Multiple(Limilabs.Client.IMAP.ISorter[])">
      <summary>
            Returns multiple sort criteria.
            </summary>
      <param name="sorters">Sort criteria to join.</param>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Arrival">
      <summary>
            Internal date and time of the message.  This differs from the
            ON criteria in SEARCH, which uses just the internal date.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Cc">
      <summary>
            Sorts on local part of the first "cc" address.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Date">
      <summary>
            Sent date and time, as described in section 2.2.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.From">
      <summary>
            Sorts on local part of the first "From" address.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Size">
      <summary>
            Size of the message in octets.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.Subject">
      <summary>
            Base subject text.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.SortBy.To">
      <summary>
             Sorts on local part of the first "To" address.
            </summary>
      <returns>New sorter.</returns>
    </member>
    <member name="T:Limilabs.Client.IMAP.CommonFolders">
      <summary>
            Identifies common folders using names and flags returned by <see cref="F:Limilabs.Client.IMAP.ImapExtension.XList" /> or <see cref="F:Limilabs.Client.IMAP.ImapExtension.SpecialUse" /> extensions 
            of <see cref="M:Limilabs.Client.IMAP.Imap.GetFolders" /> method.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders(System.String)" />
    </member>
    <member name="M:Limilabs.Client.IMAP.CommonFolders.#ctor(System.Collections.Generic.List{Limilabs.Client.IMAP.FolderInfo})">
      <summary>
            Initializes a new instance of the CommonFolders object.
            </summary>
      <param name="folders">Folder list returned by <see cref="M:Limilabs.Client.IMAP.Imap.GetFolders" />.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.CommonFolders.#ctor(System.Collections.Generic.List{Limilabs.Client.IMAP.FolderInfo},System.Boolean)">
      <summary>
            Initializes a new instance of the CommonFolders object.
            </summary>
      <param name="folders">Folder list returned by <see cref="M:Limilabs.Client.IMAP.Imap.GetFolders" />.</param>
      <param name="recognizeByName">Specifies if folders should be also recognized by using its names. Default is true.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.CommonFolders.FindFolderByFlag(System.String)">
      <summary>
            Finds folder with specified flag.
            </summary>
      <param name="flag">Flag to search for.</param>
      <returns>Folder having the specified flag.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.CommonFolders.GetAll">
      <summary>
            Returns all folders.
            </summary>
      <returns>List of all folders.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Inbox">
      <summary>
            Inbox folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox" /> or name "INBOX").
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.AllMail">
      <summary>
            AllMail folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.All" /> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.XAllMail" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Drafts">
      <summary>
            Drafts folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Drafts" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Important">
      <summary>
            Important folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Flagged" /> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.XImportant" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Sent">
      <summary>
            Sent folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Sent" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Spam">
      <summary>
            Spam folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Junk" />, <see cref="F:Limilabs.Client.IMAP.FolderFlag.XSpam" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Starred">
      <summary>
            Starred folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.XStarred" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Trash">
      <summary>
            Trash folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Trash" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.CommonFolders.Archive">
      <summary>
            Important folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Archive" />).
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.AccountStats">
      <summary>
            Represents account statistics. 
            You can use <see cref="M:Limilabs.Client.POP3.Pop3.GetAccountStat" /> to get those informations.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.AccountStats.MessageCount">
      <summary>
            Number of messages on server.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.AccountStats.MailboxSize">
      <summary>
            Size of all mail messages on the server in octets.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3ResponseStatus">
      <summary>
            Represents a status of a <see cref="T:Limilabs.Client.POP3.Pop3Response" /> or a <see cref="T:Limilabs.Client.POP3.Pop3MultiLineResponse" />.
            </summary>
      <seealso cref="P:Limilabs.Client.POP3.Pop3Response.Status" />
      <seealso cref="P:Limilabs.Client.POP3.Pop3MultiLineResponse.Status" />
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.Negative">
      <summary> 
            Negative status ("-ERR" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.Positive">
      <summary>
            Positive status ("+OK" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.SendMoreData">
      <summary>
            Positive status ("+OK" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.Error">
      <summary> 
            Error status (unknown reasponse). 
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpAuthenticationMethod">
      <summary>
            Represents authentication methods supported by the remote server.
            You can use <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods" /> method to obtain the list of all methods supported by the remote server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.Login">
      <summary>
            AUTH LOGIN authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.Plain">
      <summary>
            AUTH PLAIN authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.CramMD5">
      <summary>
            AUTH CRAM-MD5 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.DigestMD5">
      <summary>
            AUTH DIGEST-MD5 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.XOAuth">
      <summary>
            AUTH XOAUTH authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.XOAuth2">
      <summary>
            AUTH XOAUTH2 authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.NTLM">
      <summary>
            AUTH NTLM authentication method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.GssApi">
      <summary>
            AUTH GSSAPI authentication method.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Licensing.LicenseHelper">
      <summary>
            Utility class for license related functions.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Licensing.LicenseHelper.UseMachineKeyStore(System.Boolean)">
      <summary>
            Sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.
            </summary>
      <param name="value">
        <c>true</c> if the key should be persisted in the computer key store; otherwise, <c>false</c>.</param>
    </member>
    <member name="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicensePath">
      <summary>
            Returns the file path used to load the license file.
            </summary>
      <returns>License file path.</returns>
    </member>
    <member name="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicenseStatus">
      <summary>
            Gets the status of the license file.
            </summary>
      <returns>License file status.</returns>
    </member>
    <member name="T:Limilabs.Mail.Licensing.LicenseStatus">
      <summary>
            Status of the license validation.
            </summary>
      <seealso cref="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicenseStatus" />
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.NotLoaded">
      <summary>
            There was no attempt to load and check the license file yet.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.NoLicenseFile">
      <summary>
            There is no license file in appropriate folder. 
            Please check the value of <see cref="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicensePath" /> method and place your license there.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Invalid">
      <summary>
            License was loaded, but is invalid.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.InvalidSignature">
      <summary>
            License was loaded, but it has invalid signature.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.InvalidXml">
      <summary>
            License was loaded, but the XML is invalid.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Exception">
      <summary>
            License was loaded, but an exception occurred.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Valid">
      <summary>
            License was loaded and is valid.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Revoked">
      <summary>
            Valid license was loaded, but was revoked.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Alarm">
      <summary>
            Represents alarm calendar entity.
            You can use <see cref="M:Limilabs.Mail.Appointments.Event.AddAlarm" /> or <see cref="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)" /> to add alarm to event.
            You can check <see cref="P:Limilabs.Mail.Appointments.Event.Alarms" /> collection to get alarms defined for a event.
            </summary>
      <remarks>
        <code>
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            </code>
      </remarks>
      <seealso cref="P:Limilabs.Mail.Appointments.Event.Alarms" />
      <seealso cref="P:Limilabs.Mail.Appointments.Event.Alarm" />
      <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm" />
      <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)" />
    </member>
    <member name="M:Limilabs.Mail.Appointments.Alarm.#ctor">
      <summary>
            Creates new event entity
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Alarm.ExactlyAt(System.DateTime)">
      <summary>
            Sets the alarm time to precise date and time.
            </summary>
      <param name="alarmTime">Date and time at which alarm should be raised .</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)">
      <summary>
            Sets the alarm time offset relative to start of the event.
            </summary>
      <param name="timeSpan">Time span before event start when alarm should be raised.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)">
      <summary>
            Sets the alarm time offset relative to end of the event.
            </summary>
      <param name="timeSpan">Time span before event end when alarm should be raised.</param>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Alarm.AlarmTime">
      <summary>
            Gets exact alarm time (Always converted to the UTC value).
            </summary>
      <seealso cref="M:Limilabs.Mail.Appointments.Alarm.ExactlyAt(System.DateTime)" />
    </member>
    <member name="P:Limilabs.Mail.Appointments.Alarm.RelativeTo">
      <summary>
            Gets relative to information of <see cref="P:Limilabs.Mail.Appointments.Alarm.AlarmOffset" />.
            </summary>
      <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)" />
      <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)" />
    </member>
    <member name="P:Limilabs.Mail.Appointments.Alarm.AlarmOffset">
      <summary>
            Gets alarm offset. Offset is relative to <see cref="P:Limilabs.Mail.Appointments.Alarm.RelativeTo" /> property.
            </summary>
      <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)" />
      <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)" />
    </member>
    <member name="P:Limilabs.Mail.Appointments.Alarm.Action">
      <summary>
            Gets or sets alarm action (display, audio).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Alarm.Description">
      <summary>
            Gets or sets alarm description.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.AlarmAction">
      <summary>
            Represents action that should be taken when alarm is raised.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Appointments.AlarmAction.Display" /> and <see cref="F:Limilabs.Mail.Appointments.AlarmAction.Audio" />.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Alarm.Action" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.AlarmAction.Display">
      <summary>
            Alarm should be displayed.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.AlarmAction.Audio">
      <summary>
            Audio notification should be played.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Appointment">
      <summary>
            Represents appointment calendar entity. 
            To get all appointments, that an email contains, you can use <see cref="P:Limilabs.Mail.IMail.Appointments" /> collection.
            You can add appointment to an email using <see cref="M:Limilabs.Mail.MailBuilder.AddAppointment(Limilabs.Mail.Appointments.Appointment)" /> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.AddAppointment(Limilabs.Mail.Appointments.Appointment)" /> methods.
            </summary>
      <remarks>
        <code>
            BEGIN:VCALENDAR
            METHOD:REQUEST
            PRODID:Microsoft Exchange Server 2007
            VERSION:2.0
            BEGIN:VEVENT
            ORGANIZER;CN="Alice":MAILTO:alice@mail.com
            ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN='Bob':MAILTO:bob@mail.com
            SUMMARY;LANGUAGE=en-US:First Meeting
            DTSTART:20100315T080000
            DTEND:20100315T083000
            UID:040000008200E00074
            CLASS:PUBLIC
            DTSTAMP:20100317T141328Z
            STATUS:CONFIRMED
            LOCATION;LANGUAGE=en-US:Room 42
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            END:VEVENT
            END:VCALENDAR
            </code>
      </remarks>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.#ctor">
      <summary>
            Creates new Appointment entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.AddEvent">
      <summary>
            Adds new event to the <see cref="P:Limilabs.Mail.Appointments.Appointment.Events" /> collection.
            </summary>
      <returns>Event that was added.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.AddEvent(Limilabs.Mail.Appointments.Event)">
      <summary>
            Adds event to the <see cref="P:Limilabs.Mail.Appointments.Appointment.Events" /> collection.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone">
      <summary>
            Adds timezone to the <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones" /> collection.
            </summary>
      <returns>Event that was added.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone(Limilabs.Mail.Appointments.VTimeZone)">
      <summary>
            Adds timezone to the <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones" /> collection.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.Cancel">
      <summary>
            Creates canceled version of this appointment.
            </summary>
      <returns>New appointment with all events canceled.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.Update">
      <summary>
            Creates new version of this appointment that can be updated.
            </summary>
      <returns>New appointment.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.Counter">
      <summary>
            Creates new version of this appointment that can be updated.
            </summary>
      <returns>New appointment.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.Decline(System.String)">
      <summary>
            Creates new appointment with <see cref="P:Limilabs.Mail.Appointments.Participant.Status" /> set to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Declined" /> for users with specified email. 
            </summary>
      <param name="email">Email of user that declined the event.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Appointment.Accept(System.String)">
      <summary>
            Creates new appointment with <see cref="P:Limilabs.Mail.Appointments.Participant.Status" /> set to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Accepted" /> for users with specified email. 
            </summary>
      <param name="email">Email of user that accepted the event.</param>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.Method">
      <summary>
            Gets or sets iCalendar object method associated with the calendar object (request, cancel).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.ProductId">
      <summary>
            Gets or sets the identifier for the product that created the iCalendar object.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.Version">
      <summary>
            Gets or sets version that is required in order to interpret the iCalendar object.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.Events">
      <summary>
            List of events in this appointment.
            </summary>
      <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddEvent" />
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.TimeZones">
      <summary>
            List of timezones defined in this appointment.
            </summary>
      <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone" />
      <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone(Limilabs.Mail.Appointments.VTimeZone)" />
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.Event">
      <summary>
            Gets first event from the <see cref="P:Limilabs.Mail.Appointments.Appointment.Events" /> list or <see langword="null" /> if there are no events.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Appointment.TimeZone">
      <summary>
            Gets first time zone from the <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones" /> list or <see langword="null" /> if there are no time zones defined.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.PDI.PdiHeader">
      <summary>
            Represents single calendar header.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.#ctor(System.String,System.String)">
      <summary>
            Creates new PdiHeader object with specified <see cref="P:Limilabs.Mail.PDI.PdiHeader.Key" /> and <see cref="P:Limilabs.Mail.PDI.PdiHeader.Value" />.
            </summary>
      <param name="key">Header's key.</param>
      <param name="value">Header's raw value.</param>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.#ctor(System.String)">
      <summary>
            Creates new PdiHeader object with specified <see cref="P:Limilabs.Mail.PDI.PdiHeader.Key" />.
            </summary>
      <param name="key">Header's key.</param>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.Render">
      <summary>
            Renders this header.
            </summary>
      <returns>Header rendered to string.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.HasKeyParameter(System.String)">
      <summary>
            Returns true if the specified header key parameter exists.
            </summary>
      <param name="parameterName">Name of the parameter to search for.</param>
      <returns>True if parameter exists false otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.GetKeyParameter(System.String)">
      <summary>
            Returns the value of the first key parameter or <see langword="null" /> if parameter does not exist.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <returns>Value of the parameter or <see langword="null" /> when parameter does not exist.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.GetKeyParameters(System.String)">
      <summary>
            Returns the values of the specified header parameter or <see langword="null" /> when parameter does not exist.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <returns>Values of the parameter or <see langword="null" /> when parameter does not exist.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.HasValueParameter(System.String)">
      <summary>
            Returns true if the specified header value parameter exists.
            </summary>
      <param name="parameterName">Name of the parameter to search for.</param>
      <returns>True if parameter exists false otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.GetValueParameter(System.String)">
      <summary>
            Returns the value of the of the first value parameter or <see langword="null" /> if parameter does not exist.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <returns>Value of the parameter or <see langword="null" /> when parameter does not exist.</returns>
    </member>
    <member name="M:Limilabs.Mail.PDI.PdiHeader.GetValueParameters(System.String)">
      <summary>
            Returns the values of the specified header parameter or <see langword="null" /> when parameter does not exist.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <returns>Values of the parameter or <see langword="null" /> when parameter does not exist.</returns>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.Group">
      <summary>
            Gets or sets header's group.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.Key">
      <summary>
            Gets or sets header's key.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.Value">
      <summary>
            Gets header's value.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.RawValue">
      <summary>
            Gets or sets header's raw value.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.BinaryValue">
      <summary>
            Gets header's binary value.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.KeyParameters">
      <summary>
            Header key parameters. You can use <see cref="M:Limilabs.Mail.PDI.PdiHeader.GetKeyParameter(System.String)" /> and <see cref="M:Limilabs.Mail.PDI.PdiHeader.HasKeyParameter(System.String)" /> methods for easier access.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.ValueParameters">
      <summary>
            You can use <see cref="M:Limilabs.Mail.PDI.PdiHeader.GetValueParameter(System.String)" /> and <see cref="M:Limilabs.Mail.PDI.PdiHeader.HasValueParameter(System.String)" /> methods for easier access.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.IsEmpty">
      <summary>
            Gets information if the header is empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.PDI.PdiHeader.RawLine">
      <summary>
            Raw line that this object was parsed from.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.AppointmentParser">
      <summary>
            iCalendar appointment parser.
            </summary>
      <seealso cref="P:Limilabs.Mail.IMail.Appointments" />
    </member>
    <member name="M:Limilabs.Mail.Appointments.AppointmentParser.#ctor(System.Text.Encoding)">
      <summary>
            Creates new AppointmentParser with specified encoding.
            </summary>
      <param name="encoding">Encoding to be used when extracting encoded data.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.AppointmentParser.#ctor">
      <summary>
            Creates new AppointmentParser with default encoding.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.AppointmentParser.Parse(System.String)">
      <summary>
            Parses specifed text and creates new iCalendar appointment card object.
            </summary>
      <param name="text">Text to parse.</param>
      <returns>VCard business card.</returns>
    </member>
    <member name="T:Limilabs.Mail.Appointments.EventStatus">
      <summary>
            Represents event status.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Event.Status" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.EventStatus.Tentative">
      <summary>
            Indicates event is tentative.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.EventStatus.Confirmed">
      <summary>
            Indicates event is definite.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.EventStatus.Canceled">
      <summary>
            Indicates event is canceled.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Event">
      <summary>
            Represents event calendar entity.
            </summary>
      <remarks>
        <code>
            BEGIN:VEVENT
            ORGANIZER;CN="Alice":MAILTO:alice@mail.com
            ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN='Bob':MAILTO:bob@mail.com
            SUMMARY;LANGUAGE=en-US:First Meeting
            DTSTART:20100315T080000
            DTEND:20100315T083000
            UID:040000008200E00074
            CLASS:PUBLIC
            DTSTAMP:20100317T141328Z
            STATUS:CONFIRMED
            LOCATION;LANGUAGE=en-US:Room 42
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            END:VEVENT
            </code>
      </remarks>
      <seealso cref="P:Limilabs.Mail.Appointments.Appointment.Events" />
      <seealso cref="P:Limilabs.Mail.Appointments.Appointment.Event" />
      <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddEvent" />
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.#ctor">
      <summary>
            Creates new event entity.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.AddAlarm">
      <summary>
            Creates new alarm and adds it to the <see cref="P:Limilabs.Mail.Appointments.Event.Alarms" /> collection of this event.
            </summary>
      <returns>Newly create alarm that was added to this event.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)">
      <summary>
            Adds alarm to the <see cref="P:Limilabs.Mail.Appointments.Event.Alarms" /> collection of this event.
            </summary>
      <param name="alarm">Alarm to add.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.AddRecurringRule">
      <summary>
            Creates new recurring rule and adds it to the <see cref="P:Limilabs.Mail.Appointments.Event.RecurringRules" /> collection of this event.
            </summary>
      <returns>Newly recurring rule that was added to this event.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.AddRecurringRule(Limilabs.Mail.Appointments.RecurringRule)">
      <summary>
            Adds recurring rule to the <see cref="P:Limilabs.Mail.Appointments.Event.RecurringRules" /> collection of this event.
            </summary>
      <param name="rule">Recurring rule to add.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.SetOrganizer(Limilabs.Mail.Appointments.Person)">
      <summary>
            Sets organizer for this event.
            </summary>
      <param name="person">Person to be set as the organizer to this event.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.AddParticipant(Limilabs.Mail.Appointments.Participant)">
      <summary>
            Adds new participant to this event.
            </summary>
      <param name="participant">Participant to be added to this event.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.AllDay">
      <summary>
            Marks the event as an all day event. 
            Time in <see cref="P:Limilabs.Mail.Appointments.Event.Start" /> and <see cref="P:Limilabs.Mail.Appointments.Event.End" /> properties will be ignored if this method is used.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.InTimeZone(Limilabs.Mail.Appointments.VTimeZone)">
      <summary>
            Specifies time zone for this event. Sets <see cref="P:Limilabs.Mail.Appointments.Event.StartTimeZoneId" /> and <see cref="P:Limilabs.Mail.Appointments.Event.EndTimeZoneId" />.
            Remember to add the specified timezone to <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones" />.
            </summary>
      <param name="timezone">Time zone.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.Cancel">
      <summary>
            Creates canceled version of this event.
            </summary>
      <returns>New canceled event.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.Update">
      <summary>
            Creates new version of this event that can be updated.
            </summary>
      <returns>New event.</returns>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.Accept(System.String)">
      <summary>
            Sets <see cref="P:Limilabs.Mail.Appointments.Participant.Status" /> to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Accepted" /> for users with specified email. 
            </summary>
      <param name="email">Email of user that accepted the event.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Event.Decline(System.String)">
      <summary>
            Sets <see cref="P:Limilabs.Mail.Appointments.Participant.Status" /> to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Declined" /> for users with specified email. 
            </summary>
      <param name="email">Email of user that declined the event.</param>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.UID">
      <summary>
            Gets or sets the unique id of this event.
            For sending an UPDATE for an event the UID should match the original UID.
            Also <see cref="P:Limilabs.Mail.Appointments.Event.Sequence" /> should be set.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Class">
      <summary>
            Gets or sets class of this event (public, private, confidential).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Status">
      <summary>
            Gets or sets status of this event (tentative, confirmed, canceled).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Stamp">
      <summary>
            Gets or sets time stamp of this event (Always converted to UTC format).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Start">
      <summary>
            Gets or sets start time of this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.End">
      <summary>
            Gets or sets end time of this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.StartTimeZoneId">
      <summary>
             Gets or sets time zone id for start time of this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.EndTimeZoneId">
      <summary>
             Gets or sets time zone id for end time of this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Priority">
      <summary>
            Gets or sets priority of this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Sequence">
      <summary>
            Gets or sets sequence of this event.
            You should increment this number for each event update. First update should have sequence set to 1.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Summary">
      <summary>
            Gets or sets summery of this event.
            In Microsoft Outlook, the SUMMARY corresponds to the "Subject" entry in the "Appointment" form.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Description">
      <summary>
            Gets or sets description of this event.
            In Microsoft Outlook, the DESCRIPTION corresponds to the descriptive text below "Appointment" form.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Location">
      <summary>
            Gets or sets location of this event.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Organizer">
      <summary>
            Gets or sets the organizer of this event. Use <see cref="M:Limilabs.Mail.Appointments.Event.SetOrganizer(Limilabs.Mail.Appointments.Person)" /> method to set organizer.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Alarms">
      <summary>
            List of alarms for this event.
            </summary>
      <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm" />
      <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)" />
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Participants">
      <summary>
            Gets all participants of this event. Use <see cref="M:Limilabs.Mail.Appointments.Event.AddParticipant(Limilabs.Mail.Appointments.Participant)" /> method to add new participant to this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.RecurringRules">
      <summary>
            Gets all recurring rules for this event. Use <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule" /> method to add new participant to this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.ExceptionDates">
      <summary>
            Gets a list of date/time exceptions for this event. (EXDATE). Use <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule" /> method to add new participant to this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Event.Alarm">
      <summary>
            Gets first alarm from the <see cref="P:Limilabs.Mail.Appointments.Event.Alarms" /> list or <see langword="null" /> if there are no alarms for this event.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.EventClass">
      <summary>
            Represents class of the event.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Event.Class" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.EventClass.Public">
      <summary>
            Event is public.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.EventClass.Private">
      <summary>
            Event is private.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.EventClass.Confidential">
      <summary>
            Event is confidential.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Method">
      <summary>
            Represents method of the appointment.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Appointment.Method" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.Method.Request">
      <summary>
            Request.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Method.Reply">
      <summary>
            Reply.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Method.Cancel">
      <summary>
            Cancel.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Method.Counter">
      <summary>
            Counter (used by an "Attendee" of an existing event to submit to the "Organizer" a counter proposal to the event description.)
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.Method.DeclineCounter">
      <summary>
            Counter (used by the "Organizer" of an event to reject a counter proposal submitted 
            by an "Attendee". The "Organizer" must send the "DECLINECOUNTER" message 
            to the "Attendee" that sent the "COUNTER" method to the "Organizer".)
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.Participant">
      <summary>
            Represents event participant.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Event.Participants" />
      <seealso cref="M:Limilabs.Mail.Appointments.Event.AddParticipant(Limilabs.Mail.Appointments.Participant)" />
    </member>
    <member name="T:Limilabs.Mail.Appointments.Person">
      <summary>
            Represents a person.
            </summary>
      <seealso cref="T:Limilabs.Mail.Appointments.Participant" />
      <seealso cref="P:Limilabs.Mail.Appointments.Event.Organizer" />
      <seealso cref="M:Limilabs.Mail.Appointments.Event.SetOrganizer(Limilabs.Mail.Appointments.Person)" />
    </member>
    <member name="M:Limilabs.Mail.Appointments.Person.#ctor(System.String,System.String)">
      <summary>
            Creates new Person object with specified common name and email.
            </summary>
      <param name="cn">Common name of the person.</param>
      <param name="email">Email of the person.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Person.Render(Limilabs.Mail.PDI.PdiHeader)">
      <summary>
            Renders this person on specified calendar header.
            </summary>
      <param name="header">Header to render on.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Person.Parse(Limilabs.Mail.PDI.PdiHeader)">
      <summary>
            Extracts person information from specified header.
            </summary>
      <param name="header">Header to extract information from.</param>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Person.Cn">
      <summary>
            Gets or sets the common name of the person.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Person.Email">
      <summary>
            Gets or sets email of the person.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Participant.#ctor(System.String,System.String)">
      <summary>
            Creates new participant with specified common name and email.
            </summary>
      <param name="cn">Common name of the person.</param>
      <param name="email">Email of the person.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Participant.#ctor(System.String,System.String,Limilabs.Mail.Appointments.ParticipationRole,System.Boolean)">
      <summary>
            Creates new participant with specified common name and email.
            </summary>
      <param name="cn">Common name of the person.</param>
      <param name="email">Email of the person.</param>
      <param name="role">Participation role.</param>
      <param name="responseRequired">Specifies whether participant is required.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Participant.Render(Limilabs.Mail.PDI.PdiHeader)">
      <summary>
            Renders this participant on specified calendar header.
            </summary>
      <param name="header">Header to render on.</param>
    </member>
    <member name="M:Limilabs.Mail.Appointments.Participant.Parse(Limilabs.Mail.PDI.PdiHeader)">
      <summary>
            Extracts participant information from specified header.
            </summary>
      <param name="header">Header to extract information from.</param>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Participant.Role">
      <summary>
            Gets or sets participation role.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Participant.ResponseRequired">
      <summary>
            Gets or sets information whether participant is required.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Appointments.Participant.Status">
      <summary>
            Gets or sets participation status.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.ParticipationRole">
      <summary>
            Represents user participation role.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Participant.Role" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationRole.Chair">
      <summary>
            Chair
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationRole.Required">
      <summary>
            Participant is required.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationRole.Optional">
      <summary>
            Participant is optional.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationRole.NonParticipant">
      <summary>
            Not participant.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.ParticipationStatus">
      <summary>
            Represents user participation status.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Participant.Status" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.NeedsAction">
      <summary>
            Needs action.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Accepted">
      <summary>
            Accepted.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Declined">
      <summary>
            Declined.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Tentative">
      <summary>
            Tentatively accepted.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Delegated">
      <summary>
            Delegated.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Completed">
      <summary>
            Completed.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.InProcess">
      <summary>
            In progress.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Appointments.RelativeTo">
      <summary>
            Represents information about <see cref="P:Limilabs.Mail.Appointments.Alarm.AlarmOffset" /> relation.
            </summary>
      <seealso cref="P:Limilabs.Mail.Appointments.Alarm.RelativeTo" />
    </member>
    <member name="F:Limilabs.Mail.Appointments.RelativeTo.Start">
      <summary>
             Alarm is related to the <see cref="T:Limilabs.Mail.Appointments.Event" />'s <see cref="F:Limilabs.Mail.Appointments.RelativeTo.Start" /> time.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Appointments.RelativeTo.End">
      <summary>
             Alarm is related to the <see cref="T:Limilabs.Mail.Appointments.Event" />'s <see cref="F:Limilabs.Mail.Appointments.RelativeTo.End" /> time.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.DKIM.CanonicalizationType">
      <summary>
            Represents DKIM canonicalization.
            You can use it to specify <see cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.BodyCanonicalization" /> or <seealso cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HeaderCanonicalization" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.DKIM.CanonicalizationType.Simple">
      <summary>
            Simple canonicalization (almost no changes to the headers or body are allowed).
            </summary>
    </member>
    <member name="F:Limilabs.Mail.DKIM.CanonicalizationType.Relaxed">
      <summary>
            Relaxed canonicalization (minor changes, like additional spaces, are allowed).
            </summary>
    </member>
    <member name="F:Limilabs.Mail.DKIM.CanonicalizationType.Nowsp">
      <summary>
            Nowsp canonicalization. It should not be used and is considered insecure. (It is not defined in RFC4871)
            </summary>
    </member>
    <member name="T:Limilabs.Mail.DKIM.DKIMHashAlgorithm">
      <summary>
            Represents DKIM hash algorithm.
            </summary>
      <seealso cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HashAlgorithmName" />
    </member>
    <member name="F:Limilabs.Mail.DKIM.DKIMHashAlgorithm.SHA1">
      <summary>
            RSA-SHA1 hash algorithm.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.DKIM.DKIMHashAlgorithm.SHA256">
      <summary>
            RSA-SHA256 hash algorithm.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.DKIM.DKIMSignatureInfo">
      <summary>
            Represents DKIM signature information. (E.g. Canonicalization used, hash algorithm)
            </summary>
      <seealso cref="P:Limilabs.Mail.MimeDocument.DKIMSignatureInfo" />
      <seealso cref="M:Limilabs.Mail.MailMessage.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)" />
      <seealso cref="M:Limilabs.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)" />
    </member>
    <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.#ctor">
      <summary>
            Creates new instance of DKIMSignatureInfo.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.IsValid(System.Boolean)">
      <summary>
            Checks if this object is correctly filled.
            </summary>
      <param name="alreadySigned">Specifies if this object was already used for signing (true) or you are planning to use it to sign a message (false).</param>
      <returns>True if object is correctly filled, false otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.GetErrors">
      <summary>
            Gets list of the errors in this object.
            </summary>
      <returns>List of errors.</returns>
    </member>
    <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.GetErrors(System.Boolean)">
      <summary>
            Gets list of the errors in this object.
            </summary>
      <returns>List of errors.</returns>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Selector">
      <summary>
            Gets or sets public key DNS selector (s=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Version">
      <summary>
            Gets or sets DKIM version (v=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Domain">
      <summary>
            Gets or sets public key DNS domain (d=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HeaderList">
      <summary>
            Gets or sets list of headers that are included in the signature (h=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HashAlgorithmName">
      <summary>
            Gets or sets hash algorithm (a=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HeaderCanonicalization">
      <summary>
            Gets or sets header canonicalization (c=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.BodyCanonicalization">
      <summary>
            Gets or sets body canonicalization (c=).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Length">
      <summary>
            Gets or sets the number of body characters that are included in the signature (l=).
            Null means that hash is computed for entire body.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Time">
      <summary>
            Gets or sets the signature timestamp - the time that this signature was created (t=).
            Default (null) is an unknown creation time.  
            </summary>
    </member>
    <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Expires">
      <summary>
            Gets or sets the signature expiration  - the time that this signature was created (x=).
            Default (null) is an unknown expiration time.  
            The value of this property must be greater than the value of <see cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Time" /> if both are present.
            Signatures MAY be considered invalid if the verification time at the verifier is past the expiration date.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MimeDocumentFactory">
      <summary>
            Factory class for <see cref="T:Limilabs.Mail.MimeDocument" /> class.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MimeDocumentFactory.#ctor">
      <summary>
            Creates new MimeDocumentFactory object.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MimeDocumentFactory.CreateMimeDocument(System.String)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MimeDocument" /> form specified string.
            </summary>
      <param name="documentString">String containing a document.</param>
      <returns>New mime document.</returns>
    </member>
    <member name="M:Limilabs.Mail.MimeDocumentFactory.CreateMimeDocument(Limilabs.Mail.MIME.MimeBase)">
      <summary>
            Creates <see cref="T:Limilabs.Mail.MimeDocument" /> with specified mime object as root. Sets <see cref="P:Limilabs.Mail.MimeDocument.MimeVersion" /> to 1.0.
            </summary>
      <param name="root">Root of the <see cref="T:Limilabs.Mail.MimeDocument" />.</param>
      <returns>New mime document.</returns>
    </member>
    <member name="P:Limilabs.Mail.MimeDocumentFactory.SMIMEConfiguration">
      <summary>
            Gets S/MIME decrypt configuration (automatic decryption, certificates used for decryption)
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MimeDocumentFactory.SetDefaults">
      <summary>
            Gets or set the value indicating whether default values (message-id, date) should be set.
            Default is true.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeFactory">
      <summary>
            Factory class for all mime classes.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeText" /> object using UTF8 encoding (<see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain" />).
            </summary>
      <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeText" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeText" /> object using UTF8 encoding and specified text (<see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain" />).
            </summary>
      <param name="text">Text to fill new object with.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeText" /> object containing specified text.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeCalendar" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.TextCalendar" />).
            </summary>
      <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeCalendar" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar(Limilabs.Mail.Appointments.Appointment)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeCalendar" /> object containing specified appointment (<see cref="F:Limilabs.Mail.Headers.ContentType.TextCalendar" />).
            </summary>
      <param name="appointment">Appointment card to fill the new object with.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeCalendar" /> object containing specified appointment.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeVCard" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.TextVCard" />).
            </summary>
      <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeVCard" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard(Limilabs.Mail.BusinessCard.VCard)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeVCard" /> object containing specified business card (<see cref="F:Limilabs.Mail.Headers.ContentType.TextVCard" />).
            </summary>
      <param name="vCard">Business card to fill the new object with.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeVCard" /> object containing specified business card.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeRfc822" /> object representing RFC822 message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" />). 
            </summary>
      <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeRfc822" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822(Limilabs.Mail.IMail)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeRfc822" /> object representing RFC822 message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" />). 
            </summary>
      <param name="email">Message to fill the new object with.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeRfc822" /> object containing specified message.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeData" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationOctetStream" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeData" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMixed(Limilabs.Mail.MIME.MimeBase)">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeMultipart" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartMixed" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeMultipart" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRelated(Limilabs.Mail.MIME.MimeBase)">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeRelated" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartRelated" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeRelated" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeAlternative">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeAlternative" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartAlternative" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeAlternative" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeReport">
      <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeReport" /> object with (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartReport" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeReport" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateManualDispositionNotification(Limilabs.Mail.Headers.DispositonType)">
      <summary>
            Creates new manual <see cref="T:Limilabs.Mail.MIME.MimeMessageDispositionNotification" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageDispositionNotification" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeReport" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateAutomaticDispositionNotification(Limilabs.Mail.Headers.DispositonType)">
      <summary>
            Creates new automatic <see cref="T:Limilabs.Mail.MIME.MimeMessageDispositionNotification" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageDispositionNotification" />).
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeReport" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeSigned(Limilabs.Mail.MIME.MimeBase,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeSigned" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartSigned" />).
            </summary>
      <param name="certificate">Certificate used for signing.</param>
      <param name="root">Root of the mime tree to sign.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeSigned" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeSigned(Limilabs.Mail.MIME.MimeBase,Limilabs.Mail.SignatureConfiguration)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeSigned" /> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartSigned" />).
            </summary>
      <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
      <param name="root">Root of the mime tree to sign.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimeSigned" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeFactory.CreatePkcs7Signature(System.Byte[])">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimePkcs7Signature" /> object representing pkcs7 detached signature (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationXPkcs7Signature" />).
            </summary>
      <param name="pkcs7SignatureData">Signature data.</param>
      <returns>New <see cref="T:Limilabs.Mail.MIME.MimePkcs7Signature" /> object.</returns>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeSensitivity">
      <summary>
            Sensitivity of email message.
            You can use static fields of this class e.g. <see cref="F:Limilabs.Mail.Headers.MimeSensitivity.Personal" />, <see cref="F:Limilabs.Mail.Headers.MimeSensitivity.Private" />, <see cref="F:Limilabs.Mail.Headers.MimeSensitivity.CompanyConfidential" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSensitivity.Personal">
      <summary>
            Message is personal.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSensitivity.Private">
      <summary>
            Message is private.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSensitivity.CompanyConfidential">
      <summary>
            Message is company confidential.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.IContentTypeHeader">
      <summary>
            Represents 'Content-type' header.
            You can use this class to add additional options to content-type header
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.IContentTypeHeader.Value">
      <summary>
            Content type value. May be <c>null</c>.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.IContentTypeHeader.Item(System.String)">
      <summary>
            Gets or sets additional options in this header.
            </summary>
      <param name="optionsKey">Options key.</param>
      <returns>Options value.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.IContentTypeHeader.Name">
      <summary>
            Suggested filename ('name' parameter). May be <c>null</c>.
            Consider using <see cref="P:Limilabs.Mail.MIME.MimeData.SafeFileName" /> as it is guaranteed to contain valid file name.
            </summary>
      <remarks>
              It is important that you should not blindly use the suggested
              filename.  The suggested filename SHOULD be checked (and possibly
              changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security
              problem.
            </remarks>
      <seealso cref="P:Limilabs.Mail.MIME.MimeData.FileName" />
    </member>
    <member name="T:Limilabs.Mail.Headers.ReceivedEntry">
      <summary>
            Represents single 'received' header of the email.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.ReceivedEntry.ToString">
      <summary>
            Returns the string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.From">
      <summary>
            From part.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.By">
      <summary>
             By part.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.Via">
      <summary>
             Via part.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.With">
      <summary>
             With part.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.Id">
      <summary>
             Id part.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.For">
      <summary>
             For part.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ReceivedEntry.Date">
      <summary>
             Date part.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.Flag">
      <summary>
            Represents flag used by IMAP protocol to mark email messages.
            Static fields represent most common, system flags.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" /> and <see cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" /> to set or remove a flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)" />
      <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.All">
      <summary>
            Gets \ALL flag. It repesents all messages in the mailbox.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Seen">
      <summary>
            Gets \SEEN flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)" />
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.New">
      <summary>
            Gets \NEW flag. It represents messages that have the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag set but not the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag. This is functionally equivalent to "(\RECENT \UNSEEN)".
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Recent">
      <summary>
            Gets \RECENT flag.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Old">
      <summary>
            Gets \OLD flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag set. 
            This is functionally equivalent to "NOT \RECENT" (as opposed to "NOT \NEW").
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Draft">
      <summary>
            Gets \DRAFT flag.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Deleted">
      <summary>
            Gets \DELETED flag.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Flagged">
      <summary>
            Gets \FLAGGED flag.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Answered">
      <summary>
            Gets \ANSWERED flag.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Unseen">
      <summary>
            Gets \UNSEEN flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag set.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)" />
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Unanswered">
      <summary>
            Gets \UNANSWERED flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Answered" /> flag set.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Undeleted">
      <summary>
            Gets \UNDELETED flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Deleted" /> flag set.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Undraft">
      <summary>
            Gets \UNDRAFT flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Draft" /> flag set.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Unflagged">
      <summary>
            Gets \UNFLAGGED flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Flagged" /> flag set.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.Star">
      <summary>
            Gets \* flag. It indicates that it is possible to create new keywords by attempting to store those flags in the mailbox.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" /> to do so.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Flag.MDNSent">
      <summary>
            Gets $MDNSent flag. It indicates if Message Disposition Notification (MDN) was sent for particular message.
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsMDNSent" /> to check if server supports $MDNSent.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.#ctor(System.String)">
      <summary>
            Creates new instance of the Flag object with specified name.
            </summary>
      <param name="name">Name of the flag.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.Equals(Limilabs.Client.IMAP.Flag)">
      <summary>
             Determines whether the specified <see cref="T:Limilabs.Client.IMAP.Flag" /> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
      <param name="other">The <see cref="T:Limilabs.Client.IMAP.Flag" /> to compare with the current <see cref="T:Limilabs.Client.IMAP.Flag" /></param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            Names are compared case insensitive.
            </summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current <see cref="T:Limilabs.Client.IMAP.Flag" />.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.op_Equality(Limilabs.Client.IMAP.Flag,Limilabs.Client.IMAP.Flag)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.Flag" /> objects are equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.op_Inequality(Limilabs.Client.IMAP.Flag,Limilabs.Client.IMAP.Flag)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.Flag" /> objects are not equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are not equal; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Flag.ToString">
      <summary>
            Returns <see cref="P:Limilabs.Client.IMAP.Flag.FullName" /> property.
            </summary>
      <returns>
        <see cref="P:Limilabs.Client.IMAP.Flag.FullName" /> property.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.Flag.IsSystemFlag">
      <summary>
            Gets information if this is a system flag. All system flags begin with "\" character.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Flag.Name">
      <summary>
            Gets the name of this flag. E.g. SEEN, UNFLAGGED.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Flag.FullName">
      <summary>
            Gets the full name of this flag. This property includes backslash for system flags E.g. \SEEN, \UNFLAGGED, MYFLAG.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.Expression">
      <summary>
            Represents expressions that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.ICriterion)" /> or <see cref="M:Limilabs.Client.IMAP.FluentSearch.Where(Limilabs.Client.IMAP.ICriterion)" />  methods.
            To join several criteria use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> or <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
      <seealso cref="T:Limilabs.Client.IMAP.FluentSearch" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.ICriterion)" />
      <seealso cref="T:Limilabs.Client.IMAP.SimpleImapQuery" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.All">
      <summary>
            Creates criterion to find all messages.
            </summary>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Subject(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
      <param name="subject">Subject fragment to search for.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])">
      <summary>
            Creates conjunction between expressions (AND).
            </summary>
      <param name="criterions">Criteria to AND.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Creates disjunction between two expressions (OR).
            </summary>
      <param name="first">First expression.</param>
      <param name="second">Second expression.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.UID(Limilabs.Client.IMAP.Range)">
      <summary>
            Creates criterion to find messages with UIDs within the specified range.
            </summary>
      <param name="range">UID range.</param>
      <returns>New expression.</returns>
      <example>
            List&lt;long&gt; uids = imap.Search().Where(Expression.UID(Range.From(1024)));
            </example>
      <seealso cref="M:Limilabs.Client.IMAP.Range.From(System.Int64)" />
      <seealso cref="P:Limilabs.Client.IMAP.Range.End" />
      <seealso cref="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.From(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's FROM field.
            </summary>
      <param name="from">Address to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.To(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's TO field.
            </summary>
      <param name="to">Address to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Cc(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's CC field.
            </summary>
      <param name="cc">Address to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Bcc(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's BCC field.
            </summary>
      <param name="bcc">Address to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Not(Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Creates criterion to find messages that do not match the specified search key.
            </summary>
      <param name="criterion">Criterion that must not be matched.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.HasFlag(Limilabs.Client.IMAP.Flag)">
      <summary>
            Creates criterion to find messages that have specified flag set.
            </summary>
      <param name="flag">Flag that should be set.</param>
      <returns>New expression.</returns>
      <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Body(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the body of the message.
            </summary>
      <param name="text">Body fragment to search for.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Text(System.String)">
      <summary>
            Creates criterion to find messages that contain the specified string in the header or body of the message.
            </summary>
      <param name="text">Header or Body fragment to search for.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Larger(System.Int64)">
      <summary>
            Creates criterion to find messages with an [RFC-2822] size larger than the specified number of octets.
            </summary>
      <param name="largerThan">Size to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Smaller(System.Int64)">
      <summary>
            Creates criterion to find messages with an [RFC-2822] size smaller than the specified number of octets.
            </summary>
      <param name="smallerThan">Size to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.On(System.DateTime)">
      <summary>
             Creates criterion to find messages whose internal date (disregarding time and timezone) is within the specified date.
            
            In other words, "ON 13-APR-2000" means messages with an INTERNALDATE text which starts with "13-APR-2000", 
            even if timezone differential from the local timezone is sufficient to move that INTERNALDATE into the previous or next day.
            </summary>
      <param name="dateTime">Date to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.SentOn(System.DateTime)">
      <summary>
             Creates criterion to find messages whose [RFC-2822] Date: header (disregarding time and timezone) is within the specified date.
            </summary>
      <param name="dateTime">Date to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Before(System.DateTime)">
      <summary>
             Creates criterion to find messages whose internal date (disregarding time and timezone) is earlier than the specified date.
            </summary>
      <param name="dateTime">Date to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.SentBefore(System.DateTime)">
      <summary>
             Creates criterion to find messages whose [RFC-2822] Date: header (disregarding time and timezone) is earlier than the specified date.
            </summary>
      <param name="dateTime">Date to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Since(System.DateTime)">
      <summary>
             Creates criterion to find messages whose internal date (disregarding time and timezone) is within or later than the specified date.
            </summary>
      <param name="dateTime">Date to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.SentSince(System.DateTime)">
      <summary>
             Creates criterion to find messages whose [RFC-2822] Date: header (disregarding time and timezone) is within or later than the specified date.
            </summary>
      <param name="dateTime">Date to match.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.Header(System.String,System.String)">
      <summary>
             Creates criterion to find messages that have a header with the specified field-name (as defined in [RFC-2822]) and that contains the specified string
             in the text of the header (what comes after the colon). If the string to search is zero-length, 
             this matches all messages that have a header line with the specified field-name regardless of the contents.
            </summary>
      <param name="header">Header name.</param>
      <param name="value">Header value.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.HasHeader(System.String)">
      <summary>
             Creates criterion to find messages that have specified header.
            </summary>
      <remarks>Does not work with Exchange server. </remarks>
      <param name="header">Header name.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.HasKeyword(System.String)">
      <summary>
            Creates criterion to find messages with the specified keyword flag set.
            </summary>
      <param name="keyword">Keyword that should be set.</param>
      <returns>New expression.</returns>
      <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.GmailMessageId(System.String)">
      <summary>
            Creates criterion to find messages with specified Gmail message id (X-GM-MSGID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
      <param name="messageId">Gmail's message id.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.GmailThreadId(System.String)">
      <summary>
            Creates criterion to find messages with specified Gmail thread id (X-GM-THRID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
      <param name="threadId">Gmail's thread id.</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.GmailRawSearch(System.String)">
      <summary>
            Creates criterion to find messages with specified Gmail thread id (X-GM-THRID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
      <param name="search">Gmail's raw search string (e.g. "has:attachment in:unread").</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.GmailLabel(System.String)">
      <summary>
            Creates criterion to find messages with specified Gmail label (X-GM-LABELS).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1" /> extension support.
            </summary>
      <param name="label">Gmail's label (e.g. @"\Inbox", "Important", "my label").</param>
      <returns>New expression.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Expression.MessageId(System.String)">
      <summary>
            Creates criterion to find messages that have a message-id header that contains specified value.
            </summary>
      <remarks>
            Some servers (Yahoo) require the search argument to be in exactly the same format, as the email header value.
            It's incorrect behavior, but there is a workaround for it: you can use <see cref="P:Limilabs.Mail.IMail.Headers" /> collection:
            <code>
            IMail email = ...
            Expression.MessageId(email.Headers["Message-ID"])
            </code></remarks>
      <param name="messageId">Message id.</param>
      <returns>New expression.</returns>
    </member>
    <member name="T:Limilabs.Client.IMAP.Imap">
      <summary>
            IMAP client implementation. 
            It allows listing, moving, copying, downloading, uploading and deleting emails from IMAP servers.
            </summary>
    </member>
    <member name="T:Limilabs.Client.ClientBase">
      <summary>
            Implements simple TCP/IP text client.
            </summary>
    </member>
    <member name="M:Limilabs.Client.ClientBase.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes a new instance of the ClientBase object.
            Sets <see cref="P:Limilabs.Client.ClientBase.ReceiveTimeout" /> and <see cref="P:Limilabs.Client.ClientBase.SendTimeout" /> to 20 sec.
            </summary>
      <param name="addressFamily">Address family.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.TcpKeepAlive(System.TimeSpan,System.TimeSpan)">
      <summary>
            Turns TCP keepalive on.
            </summary>
      <param name="keepAliveTime">Duration between two keepalive transmissions in idle condition. By default is set to no less than 2 hours.</param>
      <param name="keepAliveInterval">Duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.AttachSSL(System.Net.Sockets.Socket,System.String)">
      <summary>
            Attaches client to specified socket.
            </summary>
      <param name="socket">Socket to attach to.</param>
      <param name="targetHost">Target host used for SSL negotiation</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Attach(System.Net.Sockets.Socket)">
      <summary>
            Attaches client to specified socket.
            </summary>
      <param name="socket">Socket to attach to.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Attach(System.Net.Sockets.Socket,System.Boolean)">
      <summary>
            Attaches client to specified socket.
            </summary>
      <param name="socket">Socket to attach to.</param>
      <param name="useSSL">If true starts SSL negotiation (Please use <see cref="P:Limilabs.Client.ClientBase.SSLConfiguration" /> to specify <see cref="P:Limilabs.Client.SSLConfiguration.TargetHost" />).
            </param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.GetServerGreeting">
      <summary>
            Override this function to get server's greeting.
            </summary>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)">
      <summary>
            Establishes connection to a remote server.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
      <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)">
      <summary>
            Establishes connection to a remote server. You can use <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)" /> when SSL connection is needed.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)">
      <summary>
            Establishes connection to a remote server using SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Connect(System.Net.IPAddress,System.Int32,System.Boolean)">
      <summary>
            Establishes connection to a remote server.
            </summary>
      <param name="ipAddress">IP address.</param>
      <param name="port">The port number of the remote server.</param>
      <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Connect(System.Net.IPEndPoint,System.Boolean)">
      <summary>
            Establishes connection to a remote server.
            </summary>
      <param name="ipEndPoint">Network endpoint (IP address and port) of the connection.</param>
      <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.Net.IPEndPoint,System.Boolean)">
      <summary>
            Begins an asynchronous request for a remote server connection. 
            </summary>
      <param name="ipEndPoint">Network endpoint (IP address and port) of the remote server.</param>
      <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.ClientBase.BeginConnectSSL(System.String,System.Int32)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.ClientBase.BeginConnectSSL(System.String,System.Int32,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.String,System.Int32)">
      <summary>
            Begins an asynchronous request for a remote server connection. You can use <see cref="M:Limilabs.Client.ClientBase.BeginConnectSSL(System.String,System.Int32)" /> when SSL connection is needed.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.String,System.Int32,System.Boolean)">
      <summary>
            Begins an asynchronous request for a remote server connection. 
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
      <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server connection.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="port">The port number of the remote server.</param>
      <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.ClientBase.EndConnect(System.IAsyncResult)">
      <summary>
            Ends a pending asynchronous connection request.
            </summary>
      <param name="result">Object that stores state information and any user defined data for this asynchronous operation.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Send(System.String)">
      <summary>
            Sends text command to server. Adds "\r\n" to the command.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            An error occurred when accessing the socket.
            -or-
            The <see cref="T:System.Net.Sockets.NetworkStream" /> is closed.
            -or-
            There is a failure reading from the network.
            </exception>
      <param name="command">Text command to send.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Send(System.Byte[])">
      <summary>
            Sends specified byte array to server.
            </summary>
      <param name="bytes">Byte array to send.</param>
    </member>
    <member name="M:Limilabs.Client.ClientBase.Dispose">
      <summary>
            Releases all resources acquired by this object. Closes connection, without issuing any quit commands.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.SSLConfiguration">
      <summary>
            Represents SSL configuration (client certificates, enabled SSL protocols).
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.ReceiveTimeout">
      <summary>
            Gets or sets the amount of time the underlying <see cref="P:Limilabs.Client.ClientBase.Socket" /> will wait to receive data once a read operation is initiated.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.SendTimeout">
      <summary>
            Gets or sets the amount of time the underlying <see cref="P:Limilabs.Client.ClientBase.Socket" /> will wait for a send operation to complete successfully.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.Connected">
      <summary>
            Gets a value indicating whether the underlying <see cref="P:Limilabs.Client.ClientBase.Socket" /> is connected to a remote host.
            This property makes a nonblocking, zero-byte Send call to determine the current state of the connection.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.Socket">
      <summary>
            Gets the underlying <see cref="P:Limilabs.Client.ClientBase.Socket" />.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.IsEncrypted">
      <summary>
            Gets a Boolean value that indicates whether communication to the remote server is encrypted.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.ReadStream">
      <summary>
            Gets underlying read stream for current connection.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ClientBase.WriteStream">
      <summary>
            Gets underlying write stream for current connection.
            </summary>
    </member>
    <member name="E:Limilabs.Client.ClientBase.ServerCertificateValidate">
      <summary>
            Event which is called for custom server certificate validation.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Imap.DefaultPort">
      <summary>
            Default IMAP protocol port (143).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)" /> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.Imap.DefaultSSLPort">
      <summary>
            Default IMAP protocol over SSL port (993).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)" /> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.#ctor">
      <summary>
            Initializes new instance of the Imap class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes new instance of the Imap class.
            </summary>
      <param name="addressFamily">Address family.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Connect(System.String)">
      <summary>
            Connects to IMAP server on port 143. Use <see cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)" /> when SSL connection is needed.
            </summary>
      <param name="host">Target host name or IP address.</param>
      <exception cref="T:Limilabs.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)">
      <summary>
            Connects to IMAP server using SSL on port 993.
            </summary>
      <param name="host">Target host name or IP address.</param>
      <seealso cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" />
      <exception cref="T:Limilabs.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.BeginConnect(System.String)">
      <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultPort" />.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.BeginConnect(System.String,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultPort" />.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.BeginConnectSSL(System.String)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultSSLPort" /> and SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.BeginConnectSSL(System.String,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultSSLPort" /> and SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetServerGreeting">
      <summary>
            Override this function to get server's greeting.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.StartTLS">
      <summary>
            Sends 'STARTTLS' command and initializes SSL connection.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.StartTLS" />. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)">
      <summary>
            Logs user in using best available method. 
            When no AUTH capability is found, this method switches to SSL (<see cref="M:Limilabs.Client.IMAP.Imap.StartTLS" />) and tries again.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)">
      <summary>
            Logs user in using LOGIN command. 
            When LOGIN command is disabled by including the LOGINDISABLED capability this method tries to log-in using <see cref="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)" />.
            Unless SSL connection is used this method sends the password in clear text.
            You can check which methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> method.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)">
      <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)">
      <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="adminUser">Administrator's user.</param>
      <param name="adminPassword">Administrator's password.</param>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)">
      <summary>
            Logs user in using AUTHENTICATE CRAM-MD5 command. This method does NOT send the password in clear text.
            You can check which methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> method.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)">
      <summary>
            Logs user in using AUTHENTICATE DIGEST-MD5 command. This method does NOT send the password in clear text.
            You can check which methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> method.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI">
      <summary>
            Logs user in using <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" /> mechanism. Target will be constructed as "imap/" + TargetHost name.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            Target will be constructed as "imap/" + TargetHost name.
            </summary>
      <param name="mechanism">Mechanism to use.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "imap/" + fully qualified target name.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            Target will be constructed as "imap/" + TargetHost name.
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="userWithDomain">User's login (e.g. "domain/user").</param>
      <param name="password">User's password.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="userWithDomain">User's login (e.g. "domain/user").</param>
      <param name="password">User's password.</param>
      <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "imap/" + fully qualified target name.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)">
      <summary>
            Logs user in using AUTHENTICATE XOAUTH command. This method does NOT send the password.
            You can use <see cref="T:Limilabs.Client.Authentication.OAuth" /> class to create the key.
            You can check which methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> method.
            </summary>
      <param name="key">XOAuth key. The key will be encoded using BASE64. You can use <see cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetXOAuthKey" /> method to create this key.</param>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.LoginOAUTH2(System.String,System.String)">
      <summary>
            Logs user in using AUTHENTICATE XOAUTH2 command. This method does NOT send the password.
            You can use <a href="http://www.dotnetopenauth.net/">DotNetOpenAuth</a> to create the key.
            You can check which methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> method.
            </summary>
      <param name="user">User's login (email address).</param>
      <param name="accessToken">OAuth 2.0 access token.</param>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SendCommand(System.String)">
      <summary>
            Sends command and waits for the server response.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws on response status different than <see cref="F:Limilabs.Client.IMAP.ImapResponseStatus.Positive" /> ("BAD", "NO", "BYE", "+" responses).
            </exception>
      <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            This is equivalent to calling 'SendCommand(command, <c>true</c>);'.
            </remarks>
      <param name="command">Command e.g. "NOOP".</param>
      <returns>IMAP response object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SendCommand(System.String,System.Boolean)">
      <summary>
            Sends command and waits for the server response.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws on response status different than <see cref="F:Limilabs.Client.IMAP.ImapResponseStatus.Positive" /> ("BAD", "NO", "BYE", "+" responses), if '<paramref name="throwException" />' is set to <c>true</c>.
            </exception>
      <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
      <param name="command">Command e.g. "NOOP".</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on response other then OK</param>
      <returns>IMAP response object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Close">
      <summary>
            Sends the LOGOUT command.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws <see cref="T:Limilabs.Client.ServerException" /> on response other then OK to LOGOUT command.
            </exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Close(System.Boolean)">
      <summary>
            Sends the LOGOUT command.
            </summary>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on response other then OK</param>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws <see cref="T:Limilabs.Client.ServerException" /> on response other then OK to LOGOUT command.
            </exception>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.ReceiveResponse(System.String)">
      <summary>
            Receives the response ending with specified request tag.
            </summary>
      <param name="tag">Request tag</param>
      <returns>IMAP response object.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Capability">
      <summary>
            Sends CAPABILITY command. Consider using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" />, <see cref="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods" /> or <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods" /> methods as they are faster.
            </summary>
      <returns>Server's capability list.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SupportedExtensions">
      <summary>
            Lists extensions supported by the remote server (e.g. SORT, XLIST, UIDPLUS)
            </summary>
      <returns>Extensions supported by remote server.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods">
      <summary>
            Lists authentication methods supported by the remote server.
            </summary>
      <returns>Authentication methods supported by remote server.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods">
      <summary>
            Lists threading methods supported by the remote server.
            </summary>
      <returns>Authentication methods supported by remote server.</returns>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetQuotaRoot(System.String)">
      <summary>
            Gets quotas for specified folder.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Quota" />, you can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
      <param name="folder">Folder name.</param>
      <returns>Quotas for specified folder.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetQuota(System.String)">
      <summary>
            Gets quota with specified name.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Quota" />, you can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
      <param name="name">Name of the quota.</param>
      <returns>Quota with specified name.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CloseCurrentFolder">
      <summary>
            Issues CLOSE command to the server.
            Unless Examine was used to open folder, CLOSE command permanently removes all messages that have the <see cref="F:Limilabs.Client.IMAP.Flag.Deleted" /> flag set from the currently selected folder, 
            and returns to the authenticated state from the selected state (no folder is selected).
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.SelectInbox" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Status(System.String)">
      <summary>
            The STATUS command requests the status of the indicated mailbox.
            It does not change the currently selected mailbox, nor does it affect the state of any messages in the queried mailbox (messages don't lose the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" />) flag.
            This command MUST NOT be used as a "check for new messages in the selected mailbox" operation 
            (You should rather use <see cref="T:Limilabs.Client.IMAP.FolderStatus" /> and <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> or <see cref="P:Limilabs.Client.IMAP.FolderStatus.UIDNext" />) or <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)" />).
            STATUS command is not guaranteed to be fast in its response.
            </summary>
      <param name="folder">Folder name.</param>
      <returns>Status information of the specified folder.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Status(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            The STATUS command requests the status of the indicated mailbox.
            It does not change the currently selected mailbox, nor does it affect the state of any messages in the queried mailbox (messages don't lose the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" />) flag.
            This command MUST NOT be used as a "check for new messages in the selected mailbox" operation 
            (You should rather use <see cref="T:Limilabs.Client.IMAP.FolderStatus" /> and <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> or <see cref="P:Limilabs.Client.IMAP.FolderStatus.UIDNext" />) or <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)" />).
            STATUS command is not guaranteed to be fast in its response.
            </summary>
      <param name="folder">Folder name.</param>
      <returns>Status information of the specified folder.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SelectInbox">
      <summary>
            Selects 'INBOX' as a current folder (mailbox) so that messages inside can be accessed.
            Select command will remove the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> IMAP flag).
            </summary>
      <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> commands or other commands.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Selects specified folder (mailbox) as the current folder so that messages inside can be accessed.
            Select command will remove the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> IMAP flag).
            </summary>
      <remarks>
            If folder.Flags contain <see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox" /> this method invokes <see cref="M:Limilabs.Client.IMAP.Imap.SelectInbox" /> method.
            </remarks>
      <param name="folder">Folder to select.</param>
      <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> or other commands.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Select(System.String)">
      <summary>
            Selects specified folder (mailbox) as the current folder so that messages inside can be accessed.
            Select command will remove the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> IMAP flag).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="folder">Folder name.</param>
      <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> or other commands.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.ExamineInbox">
      <summary>
            Selects 'INBOX' as a current read-only folder (mailbox) so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag
            </summary>
      <returns>Status of the folder (mailbox).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Examine(System.String)">
      <summary>
            Selects specified folder (mailbox) as the current read-only folder so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="folder">Folder name.</param>
      <returns>Status of the folder (mailbox).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Selects specified folder (mailbox) as the current read-only folder so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag.
            </summary>
      <remarks>
            If folder.Flags contain <see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox" /> this method invokes <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox" />.
            </remarks>I
            <param name="folder">Folder name.</param><returns>Status of the folder (mailbox).</returns></member>
    <member name="M:Limilabs.Client.IMAP.Imap.Noop">
      <summary>
            Always succeeds. It does nothing.
            Can be used as a periodic poll for new messages - updates <see cref="T:Limilabs.Client.IMAP.FolderStatus" /> returned by last <see cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)" /> command.
            Can also be used to reset any inactivity auto-logout timer on the server.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Noop(System.Boolean)">
      <summary>
            Always succeeds. It does nothing.
            Can be used as a periodic poll for new messages - updates <see cref="T:Limilabs.Client.IMAP.FolderStatus" /> returned by last <see cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)" /> command.
            Can also be used to reset any inactivity auto-logout timer on the server.
            </summary>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on response other then OK</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)">
      <summary>
            Creates new threading query.
            </summary>
      <example>
            List&lt;<see cref="T:Limilabs.Client.IMAP.FluentThread" />&gt; threads = imap.Thread(ThreadMethod.OrderedSubject).Where(Expression.Text("text"));
            </example>
      <example>
            List&lt;<see cref="T:Limilabs.Client.IMAP.FluentThread" />&gt; threads = imap.Thread(ThreadMethod.OrderedSubject).Where(Expression.Text("text")).ResultAs(<see cref="F:Limilabs.Client.IMAP.ResultType.Numbers" />);
            </example>
      <returns>New threading query.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Gets threaded messages, that match specified search criteria, using server-side threading.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" />, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)" /> and other <see cref="T:Limilabs.Client.IMAP.Expression" /> methods to create a valid search query.
            </summary>
      <param name="method">Threading method that should be used.</param>
      <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> to join several criterions.</param>
      <returns>List of message threads.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.ThreadNumbers(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Gets threaded messages, that match specified search criteria, using server-side threading. Uses <see cref="F:Limilabs.Client.IMAP.ResultType.Numbers" /> as <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)" /> method parameter.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" />, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)" /> and other <see cref="T:Limilabs.Client.IMAP.Expression" /> methods to create a valid search query.
            </summary>
      <param name="method">Threading method that should be used.</param>
      <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> to join several criterions.</param>
      <returns>List of message threads.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetAll">
      <summary>
            Gets UIDs of all messages in the current folder (mailbox) sorted from oldest to newest. Equivalent to Search(Expression.All()).
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.PeekMessageByUID(System.Int64)" />
      <returns>UID list sorted from oldest to newest.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Search">
      <summary>
            Creates new search query.
            </summary>
      <example>
            List&lt;long&gt; uids = imap.Search().Where(Expression.Subject("report")).Sort(SortBy.Date());
            </example>
      <example>
            List&lt;long&gt; numbers = imap.Search().Where(Expression.Header("Message-ID", "id")).ResultAs(<see cref="F:Limilabs.Client.IMAP.ResultType.Numbers" />);
            </example>
      <returns>New search query.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SearchFlag(Limilabs.Client.IMAP.Flag)">
      <summary>
            Gets UIDS of all messages in the current folder (mailbox) with specified flag sorted from oldest to newest. Equivalent to Search(Expression.HasFlag(flag))
            </summary>
      <param name="flag">Flag to search for.</param>
      <returns>UID list sorted from oldest to newest.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)">
      <summary>
            Gets UIDS of all messages in the current folder (mailbox) with specified flag sorted from oldest to newest. Equivalent to Search(Expression.HasFlag(flag))
            </summary>
      <param name="flag">Flag to search for.</param>
      <returns>UID list sorted from oldest to newest.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Gets UIDS of all messages that match specified search criteria using server-side searching sorted from oldest to newest.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" />, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)" /> and other <see cref="T:Limilabs.Client.IMAP.Expression" /> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery" /> to this method.
            </summary>
      <example>
            List&lt;long&gt; uids = imap.Search(Expression.And(Expression.Subject("report"), Expression.HasFlag(Flag.Unseen)));
            </example>
      <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> to join several criterions.</param>
      <returns>UID list sorted from oldest to newest.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SearchNumbers(Limilabs.Client.IMAP.Flag)">
      <summary>
            Gets numbers of all messages in the current folder (mailbox) with specified flag sorted from oldest to newest.
            Equivalent to Search().Where(Expression.HasFlag(flag)).ResultsAs(ResultType.Numbers)
            </summary>
      <param name="flag">Flag to search for.</param>
      <returns>List of message numbers sorted from oldest to newest.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SearchNumbers(Limilabs.Client.IMAP.ICriterion)">
      <summary>
            Gets numbers of all messages that match specified criteria sorted from oldest to newest.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" />, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)" /> and other <see cref="T:Limilabs.Client.IMAP.Expression" /> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery" /> to this method.
            </summary>
      <example>
            List&lt;long&gt; uids = imap.SearchNumber(Expression.And(Expression.Subject("report"), Expression.HasFlag(Flag.Unseen)));
            </example>
      <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])" /> to join several criterions</param>
      <returns>List of message numbers sorted from oldest to newest.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByUID(System.Int64)">
      <summary>
            Gets headers of the specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>String containing mail message headers or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByNumber(System.Int64)">
      <summary>
            Gets headers of the specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>String containing mail message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="uids">Unique-id of the messages to get information for.</param>
      <returns>List of message data objects containing message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List of message data objects containing message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekMessageByUID(System.Int64)">
      <summary>
            Gets specified mail message from server. This method in contrast to <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageByUID(System.Int64)" /> does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>String containing mail message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekMessageByNumber(System.Int64)">
      <summary>
            Gets specified mail message from server. This method in contrast to <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageByNumber(System.Int64)" /> does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>String containing mail message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageByUID(System.Int64)">
      <summary>
            Gets specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            This method sets the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> unless folder is selected with <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)" />  or <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox" />.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>String containing mail message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageByNumber(System.Int64)">
      <summary>
            Gets specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            This method sets the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> unless folder is selected with <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox" />.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>String containing mail message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessage(System.Int64)">
      <summary>
            Gets specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            This method sets the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> unless folder is selected with <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)" /> or <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox" />.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>String containing mail message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(System.Int64)">
      <summary>
            Gets all headers of the specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>String containing mail message headers or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByNumber(System.Int64)">
      <summary>
            Gets all headers of the specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>String containing mail message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetHeaders(System.Int64)">
      <summary>
            Gets all headers of the specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>String containing mail message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="uids">Unique-id of the messages to get information for.</param>
      <returns>List of message data objects containing message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List of message data objects containing message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetHeaders(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List of message data objects containing message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByUID(System.Int64,System.String[])">
      <summary>
            Gets specific headers of the specified email message from server.
            </summary>
      <param name="uid">Unique-id of the message to get information for.</param>
      <param name="headers">Headers to get.</param>
      <returns>Message data object containing specific message headers or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByNumber(System.Int64,System.String[])">
      <summary>
            Gets specific headers of the specified email message from server.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="headers">Headers to get.</param>
      <returns>Message data object containing message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByUID(System.Collections.Generic.List{System.Int64},System.String[])">
      <summary>
            Gets specific headers of the specified email messages from server.
            </summary>
      <param name="uids">Unique-id of the messages to get information for.</param>
      <param name="headers">Headers to get.</param>
      <returns>List of message data objects containing specific messages headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByNumber(System.Collections.Generic.List{System.Int64},System.String[])">
      <summary>
            Gets specific headers of the specified email messages from server.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="headers">Headers to get.</param>
      <returns>List of message data objects containing specific messages headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByUID(System.Int64,System.String[])">
      <summary>
            Gets specific headers of the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="uid">Unique-id of the message to get information for.</param>
      <param name="headers">Headers to get.</param>
      <returns>Message data object containing specific message headers or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByNumber(System.Int64,System.String[])">
      <summary>
            Gets specific headers of the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="headers">Headers to get.</param>
      <returns>Message data object containing message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByUID(System.Collections.Generic.List{System.Int64},System.String[])">
      <summary>
            Gets specific headers of the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="uids">Unique-id of the messages to get information for.</param>
      <param name="headers">Headers to get.</param>
      <returns>List of message data objects containing specific messages headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByNumber(System.Collections.Generic.List{System.Int64},System.String[])">
      <summary>
            Gets specific headers of the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="headers">Headers to get.</param>
      <returns>List of message data objects containing specific messages headers.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)">
      <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uid">Unique-id of the message to get information for.</param>
      <returns>Message information (<see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope" /> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure" />) or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Int64)">
      <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>Message information (<see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope" /> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure" />) or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfo(System.Int64)">
      <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>Message information (<see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope" /> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure" />) or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets message information for the specified messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uids">Unique-id of the messages to get information for.</param>
      <returns>Message information (<see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope" /> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure" />)</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets message information for the specified messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>Message information (<see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope" /> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure" />)</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfo(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets message information for the specified messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>Message information (<see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope" /> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure" />)</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByUID(System.Int64)">
      <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" />, <see cref="P:Limilabs.Client.IMAP.Envelope.To" />...) 
            of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uid">Unique-id of the message to get envelope for.</param>
      <returns>Envelope information for specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByNumber(System.Int64)">
      <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" />, <see cref="P:Limilabs.Client.IMAP.Envelope.To" />...) 
            of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>Envelope information for specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelope(System.Int64)">
      <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" />, <see cref="P:Limilabs.Client.IMAP.Envelope.To" />...) 
            of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>Envelope information for specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" />, <see cref="P:Limilabs.Client.IMAP.Envelope.To" />...) 
            of the specified messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uids">Unique-id of the messages to get envelope for.</param>
      <returns>Envelope information for specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" />, <see cref="P:Limilabs.Client.IMAP.Envelope.To" />...) 
            of the specified messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>Envelope information for specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelope(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject" />, <see cref="P:Limilabs.Client.IMAP.Envelope.From" />, <see cref="P:Limilabs.Client.IMAP.Envelope.To" />...) 
            of the specified messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>Envelope information for specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Int64)">
      <summary>
            Gets the structure of the specified message.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>Structure of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(System.Int64)">
      <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>Structure of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructure(System.Int64)">
      <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <returns>Structure of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uids">Unique-ids of the messages to get.</param>
      <returns>Structure of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>Structure of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructure(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>Structure of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMimePartHeadersByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Gets the MIME headers for specified part.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <param name="part">Mime part to get.</param>
      <returns>Part's data or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMimePartHeadersByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Gets the MIME headers for specified part.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="part">Mime part to get.</param>
      <returns>Part's data or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Gets the data for specified part.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <param name="part">Mime part to get.</param>
      <returns>Part's data or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMimePartByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Gets the data for specified part.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="part">Mime part to get.</param>
      <returns>Part's data or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Gets the text data for specified part.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <param name="part">Mime part to get.</param>
      <returns>Text body of the part or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetMimePartTextByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Gets the text data for specified part.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="part">Mime part to get.</param>
      <returns>Text body of the part or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekMimePartByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Peeks the data for specified part. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <param name="part">Mime part to get.</param>
      <returns>Part's data or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekMimePartByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Peeks the data for specified part. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="part">Mime part to get.</param>
      <returns>Part's data or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekMimePartTextByUID(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Peeks the text data for specified part. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <param name="part">Mime part to get.</param>
      <returns>Text body of the part or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.PeekMimePartTextByNumber(System.Int64,Limilabs.Client.IMAP.MimeStructure)">
      <summary>
            Peeks the text data for specified part. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="part">Mime part to get.</param>
      <returns>Text body of the part or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByUID(System.Int64)">
      <summary>
            Gets flags for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})" />
      <param name="uid">Unique-id of the message to get flags for.</param>
      <returns>List containing flags of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByNumber(System.Int64)">
      <summary>
            Gets flags for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing flags of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFlags(System.Int64)">
      <summary>
            Gets flags for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing flags of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})" />
      <param name="uids">Unique-ids of the messages to get flags for.</param>
      <returns>List containing flags of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing flags of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFlags(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})" />
      <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing flags of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)">
      <summary>
            Flags the message with specified flag.
            </summary>
      <param name="uid">Unique-id of the message to flag.</param>
      <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
      <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)">
      <summary>
            Flags the message with specified flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
      <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.FlagMessage(System.Int64,Limilabs.Client.IMAP.Flag)">
      <summary>
            Flags the message with specified flag.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
      <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
      <summary>
            Flags the messages with specified flag.
            </summary>
      <param name="uids">Unique-id of the messages to flag.</param>
      <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
      <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
      <summary>
            Flags the messages with specified flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
      <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.FlagMessage(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
      <summary>
            Flags the messages with specified flag.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
      <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)">
      <summary>
            Removes specified flag from the message.
            </summary>
      <param name="uid">Unique-id of the message to remove flag from.</param>
      <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)">
      <summary>
            Removes specified flag from the message.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessage(System.Int64,Limilabs.Client.IMAP.Flag)">
      <summary>
            Removes specified flag from the message.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
      <summary>
            Removes specified flag from messages.
            </summary>
      <param name="uids">Unique-id of the message to remove flag from.</param>
      <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
      <summary>
            Removes specified flag from messages.
            </summary>
      <param name="messageNumbers">1 based message number.</param>
      <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessage(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
      <summary>
            Removes specified flag from messages.
            </summary>
      <param name="messageNumbers">1 based message number.</param>
      <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)">
      <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)" />
      <param name="uid">Unique-id of the message.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)">
      <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeen(System.Int64)">
      <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})" />
      <param name="uids">Unique-ids of the messages.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeen(System.Collections.Generic.List{System.Int64})">
      <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseen(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)">
      <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message. 
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)" />
      <param name="uid">Unique-id of the message.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)">
      <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)">
      <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeen(System.Int64)" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message. 
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})" />
      <param name="uids">Unique-ids of the messages.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseen(System.Collections.Generic.List{System.Int64})">
      <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing flags of the specified messages after the change.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Int64)">
      <summary>
            Gets Gmail labels for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            You can label message using <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)" /> method.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)" />
      <param name="uid">Unique-id of the message to get Gmail labels for.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByNumber(System.Int64)">
      <summary>
            Gets Gmail labels for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Int64)" />
      <param name="messageNumber">1 based message number.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets Gmail labels for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" />
      <param name="uids">Unique-ids of the messages to get Gmail labels for.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Gets Gmail labels for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)" />
      <param name="messageNumbers">1 based message numbers.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Labels the messages with specified label.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" />
      <param name="uids">Unique-id of the messages to label.</param>
      <param name="label">Label to be added.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Labels the messages with specified label.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" />
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="label">Label to be added.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
      <summary>
            Labels the messages with specified labels.
            </summary>
      <param name="uids">Unique-id of the messages to label.</param>
      <param name="labels">Labels to be added.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
      <summary>
            Labels the messages with specified labels.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="labels">Labels to be added.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)">
      <summary>
            Labels the message with specified label.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)" />
      <param name="uid">Unique-id of the message to label.</param>
      <param name="label">Label to be added.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.String)">
      <summary>
            Labels the message with specified label.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Int64,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)" />
      <param name="messageNumber">1 based message number.</param>
      <param name="label">Label to be added.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.Collections.Generic.List{System.String})">
      <summary>
            Labels the message with specified labels.
            </summary>
      <param name="uid">Unique-id of the message to label.</param>
      <param name="labels">Labels to be added.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.Collections.Generic.List{System.String})">
      <summary>
            Labels the message with specified labels.
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="labels">Labels to be added.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)">
      <summary>
            Removes specified label from the message.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)" />
      <param name="uid">Unique-id of the message to remove specified label from.</param>
      <param name="label">Label to be removed.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Int64,System.String)">
      <summary>
            Removes specified label from the message.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)" />
      <param name="messageNumber">1 based message number.</param>
      <param name="label">Label to be removed.</param>
      <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Removes specified label from messages.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" />
      <param name="uids">Unique-id of the message to remove specified label from.</param>
      <param name="label">Label to be removed.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Removes specified label from messages.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)" />
      <param name="messageNumbers">1 based message number.</param>
      <param name="label">Label to be removed.</param>
      <returns>List containing Gmail labels of the specified messages.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByUID(System.Int64)">
      <summary>
            Deletes message specified by the <paramref name="uid" />. Issues EXPUNGE command after.
            </summary>
      <param name="uid">Unique-id of the message to flag.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByNumber(System.Int64)">
      <summary>
            Deletes message specified by the <paramref name="messageNumber" />. Issues EXPUNGE command after.
            </summary>
      <param name="messageNumber">1 based message number.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessage(System.Int64)">
      <summary>
            Deletes message specified by the <paramref name="messageNumber" />. Issues EXPUNGE command after.
            </summary>
      <param name="messageNumber">1 based message number.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByUID(System.Collections.Generic.List{System.Int64})">
      <summary>
            Deletes message specified by the <paramref name="uids" />. Issues EXPUNGE command after.
            </summary>
      <param name="uids">Unique-id of the messages to flag.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByNumber(System.Collections.Generic.List{System.Int64})">
      <summary>
            Deletes messages specified by the <paramref name="messageNumbers" />. Issues EXPUNGE command after.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessage(System.Collections.Generic.List{System.Int64})">
      <summary>
            Deletes messages specified by the <paramref name="messageNumbers" />. Issues EXPUNGE command after.
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Int64,System.String)">
      <summary>
            Copies the specified message to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="uid">Unique-id of the message.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Int64,System.String)">
      <summary>
            Copies the specified message to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="messageNumber">1 based message number.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Copies the specified message to the specified destination folder (mailbox).
            </summary>
      <param name="uid">Unique-id of the message.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Copies the specified message to the specified destination folder (mailbox).
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Copies the specified messages to the specified destination folder (mailbox).
            </summary>
      <param name="uids">Unique-ids of the messages.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Copies the specified messages to the specified destination folder (mailbox).
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Copies the specified messages to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="uids">Unique-ids of the messages.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Copies the specified messages to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Moves the specified message to the specified destination folder (mailbox).
            </summary>
      <param name="uid">Unique-id of the message.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Moves the specified message to the specified destination folder (mailbox).
            </summary>
      <param name="messageNumber">1 based message number.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Int64,System.String)">
      <summary>
            Moves the specified message to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="uid">Unique-id of the message.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Int64,System.String)">
      <summary>
            Moves the specified message to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="messageNumber">1 based message number.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-id of the copied message if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Moves the specified messages to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="uids">Unique-ids of the messages.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Collections.Generic.List{System.Int64},System.String)">
      <summary>
            Moves the specified messages to the specified destination folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Moves the specified messages to the specified destination folder (mailbox).
            </summary>
      <param name="uids">Unique-ids of the messages.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Moves the specified messages to the specified destination folder (mailbox).
            </summary>
      <param name="messageNumbers">1 based message numbers.</param>
      <param name="destinationFolder">Destination folder (mailbox).</param>
      <returns>Unique-ids of the copied messages if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetNamespaces">
      <summary>
            Lists all namespaces available for this user.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Namespace" />. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Folder list.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SubscribeFolder(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Subscribes user to specified folder.
            </summary>
      <param name="folder">Folder name to subscribe to.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SubscribeFolder(System.String)">
      <summary>
            Subscribes user to specified folder.
            </summary>
      <param name="folder">Folder name to subscribe to.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnsubscribeFolder(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Unsubscribes user from specified folder.
            </summary>
      <param name="folder">Folder name to unsubscribe from.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UnsubscribeFolder(System.String)">
      <summary>
            Unsubscribes user from specified folder.
            </summary>
      <param name="folder">Folder name to unsubscribe from.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSubscribedFolders">
      <summary>
            Lists all folders (mailboxes) user is subscribed to.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Folder list.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSubscribedFolders(System.String)">
      <summary>
            Lists folders (mailboxes) user is subscribed to, starting from specified folder.
            </summary>
      <param name="folder">Parent folder (mailbox) to start search from.</param>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Folder list.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetSubscribedFolders(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Lists folders (mailboxes) user is subscribed to, starting from specified folder.
            </summary>
      <param name="folder">Parent folder (mailbox) to start search from.</param>
      <returns>Folder list.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFolders">
      <summary>
            Lists all folders (mailboxes) starting from root.
            Folders starting with '#' are usually shared between users. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetNamespaces" /> to obtain information about shared folders.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.SubFolders)">
      <summary>
            Lists all folders (mailboxes) starting from root.
            Folders starting with '#' are usually shared between users. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetNamespaces" /> to obtain information about shared folders.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(System.String)">
      <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(System.String,Limilabs.Client.IMAP.SubFolders)">
      <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.SubFolders)">
      <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersOneLevelDown">
      <summary>
            Lists folders (mailboxes) starting from root. Only direct children are returned.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersOneLevelDown(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Lists folders (mailboxes) under specified folder (mailbox). Only direct children are returned.
            </summary>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersOneLevelDown(System.String)">
      <summary>
            Lists folders (mailboxes) under specified folder (mailbox). Only direct children are returned.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <returns>Folder list.</returns>
      <seealso cref="T:Limilabs.Client.IMAP.CommonFolders" />
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.CreateFolder(System.String)">
      <summary>
             Creates a folder (mailbox) with the given name.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="folder">Folder name.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolder(System.String)">
      <summary>
            Permanently removes a folder (mailbox) with the given name.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths.
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            
            The DELETE command MUST NOT remove inferior hierarchical names. For example, if a mailbox "foo" has an inferior "foo.bar" 
            (assuming "." is the hierarchy delimiter character), removing "foo" MUST NOT remove "foo.bar".  
            
            It is an error to attempt to delete a name that has inferior hierarchical names and also has the \Noselect mailbox name attribute.
            
            It is permitted to delete a name that has inferior hierarchical names and does not have the \Noselect mailbox name attribute.  
            In this case, all messages in that mailbox are removed, and the name will acquire the \Noselect mailbox name attribute.
            </remarks>
      <param name="folder">Folder name.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.RenameFolder(System.String,System.String)">
      <summary>
             Changes the name of a folder (mailbox).
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="existingFolder">Existing folder name.</param>
      <param name="newFolder">New folder name.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersTree(Limilabs.Client.IMAP.SubFolders)">
      <summary>
            Lists folder tree roots starting from root. 
            In contrast to GetFolders method only roots are returned. You can use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders" /> to access sub folders.
            </summary>
      <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
      <returns>Folder tree roots (use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders" /> to access sub folders).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersTree(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.SubFolders)">
      <summary>
            Lists folder tree roots starting from specified folder (mailbox).
            In contrast to GetFolders method only roots are returned. You can use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders" /> to access sub folders.
            </summary>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
      <returns>Folder tree roots (use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders" /> to access sub folders).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersTree(System.String,Limilabs.Client.IMAP.SubFolders)">
      <summary>
            Lists folder tree roots starting from specified folder (mailbox).
            In contrast to GetFolders method only roots are returned. You can use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders" /> to access sub folders.
            </summary>
      <param name="parent">Parent folder (mailbox) to start search from.</param>
      <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
      <returns>Folder tree roots (use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders" /> to access sub folders).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolderRecursively(System.String)">
      <summary>
            Permanently removes all sub folders and folder (mailbox) with the given name.
            </summary>
      <param name="folder">Folder name to remove.</param>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolderRecursively(Limilabs.Client.IMAP.FolderInfo)">
      <summary>
            Permanently removes all sub folders and folder (mailbox) specified.
            </summary>
      <param name="folder">Folder to remove.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,System.String,Limilabs.Client.IMAP.UploadMessageInfo)">
      <summary>
            Uploads message to specified folder (mailbox).
            </summary>
      <param name="folder">Folder to upload.</param>
      <param name="eml">Message to upload.</param>
      <param name="messageInfo">Additional message information (e.g. flags, internal date, Gmail labels).</param>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,Limilabs.Mail.IMail)">
      <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <param name="folder">Folder name to upload to.</param>
      <param name="email">Message to upload.</param>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,System.String)">
      <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
      <param name="folder">Folder name to upload to.</param>
      <param name="eml">Message to upload.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,Limilabs.Mail.IMail,Limilabs.Client.IMAP.UploadMessageInfo)">
      <summary>
            Uploads message to specified folder (mailbox).
            </summary>
      <param name="folder">Folder to upload.</param>
      <param name="email">Message to upload.</param>
      <param name="messageInfo">Additional message information (e.g. flags, internal date, Gmail labels).</param>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,Limilabs.Mail.IMail)">
      <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
      <param name="folder">Folder to upload  to.</param>
      <param name="email">Message to upload.</param>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,System.String)">
      <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
      <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
      <param name="folder">Folder to upload  to.</param>
      <param name="eml">Message to upload.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,System.String,Limilabs.Client.IMAP.UploadMessageInfo)">
      <summary>
            Uploads message to specified folder (mailbox).
            </summary>
      <param name="folder">Folder to upload.</param>
      <param name="eml">Message to upload.</param>
      <param name="messageInfo">Additional message information (e.g. flags, internal date).</param>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,Limilabs.Mail.IMail,Limilabs.Client.IMAP.UploadMessageInfo)">
      <summary>
            Uploads message to specified folder (mailbox).
            </summary>
      <param name="folder">Folder to upload.</param>
      <param name="email">Message to upload.</param>
      <param name="messageInfo">Additional message information (e.g. flags, internal date).</param>
      <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />).</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Idle">
      <summary>
            Sends IDLE command. 
            This method hangs until server announces new event in current folder or until <see cref="M:Limilabs.Client.IMAP.Imap.StopIdle" /> command is issued.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Idle" />. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
      <returns>New folder status.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.Idle(System.TimeSpan)">
      <summary>
            Sends IDLE command. 
            This method hangs until server announces new event in current folder or until <see cref="M:Limilabs.Client.IMAP.Imap.StopIdle" /> command is issued.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Idle" />. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions" /> method.
            </summary>
      <param name="timeout">Specifies the timeout after which IDLE command is reissued (this prevents server from disconnecting).</param>
      <returns>New folder status.</returns>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.StopIdle">
      <summary>
            Stops IDLE command started by <see cref="M:Limilabs.Client.IMAP.Imap.Idle" /> or <see cref="M:Limilabs.Client.IMAP.Imap.Idle(System.TimeSpan)" /> method.
            This method is thread-safe.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.Imap.SendYahooIDCommand">
      <summary>
            Sends Yahoo's specific ID command ('ID ("GUID" "1")'). 
            This command is required to access yahoo.
            This command is sent automatically on connection when the host address contains "yahoo" string.
            </summary>
      <returns>IMAP response object.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.Imap.IDInformation">
      <summary>
            Represents client information send to the server on connection using ID command (<see cref="F:Limilabs.Client.IMAP.ImapExtension.ID" />).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Imap.CommandTagLength">
      <summary>
            Gets or set the length of the generated unique command identifier.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.Imap.CurrentFolder">
      <summary>
            Gets the status of the currently selected folder.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.FolderStatus">
      <summary>
            Represents folder status: message counts, available flags.
            Returned by <see cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)" />, <see cref="M:Limilabs.Client.IMAP.Imap.SelectInbox" />, <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox" /> and updated be all other commands.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.Name">
      <summary>
            Gets the name of the folder (mailbox).
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.ReadOnly">
      <summary>
            Gets a boolean value indicating if the folder (mailbox) is read only.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags">
      <summary>
            Gets a boolean value indicating if custom flags (keywords) can be created in the folder (mailbox).
            Internally it checks if <see cref="P:Limilabs.Client.IMAP.FolderStatus.PermanentFlags" /> collection contains <see cref="F:Limilabs.Client.IMAP.Flag.Star" />.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.SupportsMDNSent">
      <summary>
            Gets a boolean value indicating if <see cref="F:Limilabs.Client.IMAP.Flag.MDNSent" /> ($MDNSent) is supported.
            Internally it checks if <see cref="P:Limilabs.Client.IMAP.FolderStatus.PermanentFlags" /> collection contains <see cref="F:Limilabs.Client.IMAP.Flag.MDNSent" /> or <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags" /> returns true.
            </summary>
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)" />
      <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)" />
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.MessageCount">
      <summary>
            Gets total message count in the folder (mailbox) (EXISTS). 
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.Recent">
      <summary>
            Gets number of messages with <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.Expunge">
      <summary>
            Gets numbers of messages that have been permanently removed from the folder (mailbox). 
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.UIDValidity">
      <summary>
            Gets the unique identifier validity value.
            
            Any change of unique identifiers between sessions MUST be detectable using the change of UIDVALIDITY.
            If unique identifiers from an earlier session fail to persist in this session, 
            the UIDVALIDITY value MUST be greater than the one used in the earlier session.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.UIDNext">
      <summary>
             Gets the next unique identifier value.
             
             The next unique identifier value is the predicted value that will be assigned to a new message in the folder (mailbox).
             Unless the unique identifier validity (<see cref="P:Limilabs.Client.IMAP.FolderStatus.UIDValidity" />) also changes , the next unique identifier value 
             MUST NOT change unless new messages are added to the mailbox; 
             and  the next unique identifier value 
             MUST change whenever new messages are added to the mailbox, even if those new messages are subsequently deleted.
            
             The next unique identifier value is intended to provide a means for a client to determine whether 
             any messages have been delivered to the mailbox since the previous time it checked this value.
             </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.Flags">
      <summary>
            Gets the list of flags available in the folder. 
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.FolderStatus.PermanentFlags">
      <summary>
            Gets the list of the known flags that can be change permanently.
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.ImapResponseStatus">
      <summary>
            Represents a status of a <see cref="T:Limilabs.Client.IMAP.ImapResponse" />.
            </summary>
      <seealso cref="P:Limilabs.Client.IMAP.ImapResponse.Status" />
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Negative">
      <summary> 
            Negative status ("NO" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Positive">
      <summary> 
            Positive status ("OK" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Error">
      <summary> 
            Error status ("BAD" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.SendMoreData">
      <summary> 
            Requires more data status ("+" response). 
            </summary>
    </member>
    <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Bye">
      <summary> 
            Bye response received, server failure occured, connection was closed by the server ("* BYE" response). 
            </summary>
    </member>
    <member name="T:Limilabs.Client.IMAP.SimpleImapQuery">
      <summary>
            Simple IMAP query that can be used instead joining several criteria defined in <see cref="T:Limilabs.Client.IMAP.Expression" /> class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.IMAP.SimpleImapQuery.Render(Limilabs.Client.IMAP.ImapCommand)">
      <summary>
            Renders current criteria object to specified command list.
            </summary>
      <param name="command">Command to render on.</param>
    </member>
    <member name="M:Limilabs.Client.IMAP.SimpleImapQuery.IsASCII">
      <summary>
            Returns true if this criterion requires only ASCII characters to be rendered.
            </summary>
      <returns>True if this criterion requires only ASCII characters to be rendered, false otherwise.</returns>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Subject">
      <summary>
            Messages that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Body">
      <summary>
             Messages that contain the specified string in the body of the message.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.From">
      <summary>
            Messages that contain the specified string in the envelope structure's FROM field.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.To">
      <summary>
             Messages that contain the specified string in the envelope structure's TO field.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Cc">
      <summary>
            Messages that contain the specified string in the envelope structure's CC field.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Bcc">
      <summary>
             Messages that contain the specified string in the envelope structure's BCC field.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Answered">
      <summary>
            Messages with the \Answered flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Flagged">
      <summary>
            Messages with the \Flagged flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Deleted">
      <summary>
            Messages with the \Deleted flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Draft">
      <summary>
            Messages with the \Draft flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.New">
      <summary>
            Messages that have the \Recent flag set but not the \Seen flag. This is functionally equivalent to "(RECENT UNSEEN)".
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Old">
      <summary>
            Messages that do not have the \Recent flag set.  This is functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Recent">
      <summary>
             Messages that have the \Recent flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Seen">
      <summary>
            Messages that have the \Seen flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Unanswered">
      <summary>
            Messages that do not have the \Answered flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Undeleted">
      <summary>
            Messages that do not have the \Deleted flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Undraft">
      <summary>
            Messages that do not have the \Draft flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Unflagged">
      <summary>
            Messages that do not have the \Flagged flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Unseen">
      <summary>
            Messages that do not have the \Seen flag set.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.LargerThen">
      <summary>
            Messages with an [RFC-2822] size larger than the specified number of octets.
            </summary>
    </member>
    <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.SmallerThen">
      <summary>
            Messages with an [RFC-2822] size smaller than the specified number of octets.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.HtmlException">
      <summary>
            Represents an error that occurred during html parsing.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.HtmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes new instance of HtmlException with serialized data.
            </summary>
      <param name="info">Serialized object data.</param>
      <param name="context">Contextual information.</param>
    </member>
    <member name="T:Limilabs.Mail.IMail">
      <summary>
            This class provides simple access to email message.
            Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create this object.
            It is possible to access entire MIME tree using <see cref="T:Limilabs.Mail.MimeDocument" /> property.
            </summary>
      <seealso cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.String)" />
      <seealso cref="M:Limilabs.Mail.MailBuilder.CreateFromEmlFile(System.String)" />
    </member>
    <member name="M:Limilabs.Mail.IMail.CheckSignature(System.Boolean)">
      <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 email message and, optionally, validates the signers' certificates.
            Checks also if the content was signed by the person that sent it.
            </summary>
      <param name="verifySignatureOnly">
            A System.Boolean value that specifies whether only the digital signatures are verified 
            without the signers' certificates being validated. 
            If <paramref name="verifySignatureOnly" /> is <c>true</c>, only the digital signatures are verified. 
            If it is <c>false</c>, the digital signatures are verified, the signers' certificates are validated, 
            and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or 
            if the key usage supports digital signatures or non repudiation.
            </param>
    </member>
    <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature">
      <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message. Queries DNS server to get the public key.
            </summary>
      <returns>True if signature was valid, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature(System.Security.Cryptography.RSACryptoServiceProvider)">
      <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message.
            </summary>
      <param name="rsa">RSA class containing public key used for signature validation.</param>
      <returns>True if signature was valid, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature(Limilabs.Mail.DKIMValidationConfiguration)">
      <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message. Queries DNS server to get the public key.
            </summary>
      <param name="configuration">DKIM validation configuration.</param>
      <returns>True if signature was valid, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIMValidationConfiguration)">
      <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message.
            </summary>
      <param name="rsa">RSA class containing public key used for signature validation.</param>
      <param name="configuration">DKIM validation configuration.</param>
      <returns>True if signature was valid, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.GetSignedCms">
      <summary>
            Gets the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object for signed emails.
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.GetEnvelopedCms">
      <summary>
            Gets the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> object for encrypted emails.
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.ReSignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Computes the signature again.
            <param name="certificate">certificate used for signing.</param></summary>
    </member>
    <member name="M:Limilabs.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
      <summary>
            Signs this message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
      <param name="rsa">RSA class containing private key used for signing.</param>
      <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
      <param name="publicKeyDnsDomain">DNS public key domain.</param>
    </member>
    <member name="M:Limilabs.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)">
      <summary>
            Signs this message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
      <param name="rsa">RSA class containing private key used for signing.</param>
      <param name="signatureInfo">DKIM signature information.</param>
    </member>
    <member name="M:Limilabs.Mail.IMail.Decrypt">
      <summary>
            Decrypts the message. 
            Searches through <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My" /> certificate store to find appropriate certificate.
            You can use <see cref="P:Limilabs.Mail.MailBuilder.SMIMEConfiguration" /> to specify certificates and automatic email decryption.
            </summary>
      <returns>Decrypted email message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.Decrypt(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})">
      <summary>
            Decrypts the message.
            Searches through specified certificates and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My" /> certificate store to find appropriate certificate.
            </summary>
      <param name="certificates">Certificates used for decryption.</param>
      <returns>Decrypted email message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Decrypts the message using specified certificate for decryption.
            Uses the specified certificate and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My" /> certificate store to find appropriate certificate.
            </summary>
      <param name="certificate">Certificate used for decryption.</param>
      <returns>Decrypted email message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.Decrypt(Limilabs.Mail.SMIMEConfiguration)">
      <summary>
            Decrypts the message using specified S/MIME configuration.
            </summary>
      <param name="configuration">S/MIME configuration.</param>
      <returns>Decrypted email message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.ExtractSigned">
      <summary>
            Extracts signed message.
            </summary>
      <returns>Extracted email message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.ExtractSigned(Limilabs.Mail.SMIMEConfiguration)">
      <summary>
            Extracts signed message using specified S/MIME configuration.
            </summary>
      <param name="configuration">S/MIME configuration.</param>
      <returns>Extracted email message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.RenderEml">
      <summary>
            Renders mail message. Does not render BCC header.
            </summary>
      <returns>Message in eml format.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.RenderEml(System.Boolean)">
      <summary>
            Renders mail message. 
            </summary>
      <param name="renderBcc">Specifies if BCC header should be rendered.</param>
      <returns>Message in eml format.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.Save(System.String)">
      <summary>
            Saves email using eml format to specified file.
            </summary>
      <param name="path">The file to write to.</param>
    </member>
    <member name="M:Limilabs.Mail.IMail.GetBodyAsHtml">
      <summary>
            Returns body in HTML format. If <see cref="P:Limilabs.Mail.IMail.IsHtml" /> is false this method uses <see cref="P:Limilabs.Mail.IMail.Text" /> property to create valid HTML.
            </summary>
      <returns>Body of the message in HTML format.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.GetBodyAsText">
      <summary>
            Returns body in plain text format. If <see cref="P:Limilabs.Mail.IMail.IsText" /> is false this method uses <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml" /> method to extract plain text from <see cref="P:Limilabs.Mail.IMail.Html" /> property.
            </summary>
      <returns>Body of the message as plain text.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.GetTextFromHtml">
      <summary>
            Extracts plain text from <see cref="P:Limilabs.Mail.IMail.Html" />.
            This text may be different from what is actually stored in the email's <see cref="P:Limilabs.Mail.IMail.Text" /> property.
            </summary>
      <returns>Body of the HTML converted to plain text.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.SaveHtmlAs(System.String)">
      <summary>
            Saves HTML version of the message as regular HTML file, also saves all visual elements as files to the same folder.
            If the message is plain text only, this method uses <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml" /> to create HTML from plain text.
            </summary>
      <param name="path">Name of the resulting HTML file (e.g. "c:\\example\\email.html").</param>
    </member>
    <member name="M:Limilabs.Mail.IMail.PriorityHigh">
      <summary>  
            Sets <see cref="P:Limilabs.Mail.IMail.XPriority" /> to 1, <see cref="P:Limilabs.Mail.IMail.Priority" /> to <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent" /> and
            <see cref="P:Limilabs.Mail.IMail.Importance" /> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.High" /></summary>
    </member>
    <member name="M:Limilabs.Mail.IMail.PriorityLow">
      <summary>  
            Sets <see cref="P:Limilabs.Mail.IMail.XPriority" /> to 5, <see cref="P:Limilabs.Mail.IMail.Priority" /> to <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent" /> and
            <see cref="P:Limilabs.Mail.IMail.Importance" /> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low" /></summary>
    </member>
    <member name="M:Limilabs.Mail.IMail.RequestReadReceipt">
      <summary> 
            This method copies From list to all read receipts lists.
            Read receipts are stored using <seealso cref="P:Limilabs.Mail.IMail.NotificationTo" />, 
            <seealso cref="P:Limilabs.Mail.IMail.ReturnReceiptTo" /> or <seealso cref="P:Limilabs.Mail.IMail.XConfirmReadingTo" /> header.
            </summary>
      <remarks>
            Read receipt requests may not be always honored because:
            <list><item>A mail client may not recognize the special Disposition-Notification-To header.</item><item>A mail client may not implement that functionality.</item><item>The end user may have that functionality turned off.</item><item>The end user may optionally not choose to send one for your particular email.</item></list></remarks>
    </member>
    <member name="M:Limilabs.Mail.IMail.GetGenericPriority">
      <summary>
            Gets message priority.
            It checks following headers in the specified order: <see cref="P:Limilabs.Mail.IMail.Priority" />, <see cref="P:Limilabs.Mail.IMail.Importance" />, <see cref="P:Limilabs.Mail.IMail.XPriority" />.
            </summary>
      <returns>Priority of the message.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.Reply">
      <summary>
            Creates <see cref="T:Limilabs.Mail.ReplyBuilder" /> configured to reply to this email.
            </summary>
      <returns>ReplyBuilder hat can be used to create a reply.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.Forward">
      <summary>
            Creates <see cref="T:Limilabs.Mail.ForwardBuilder" /> configured to forward this email.
            </summary>
      <returns>ReplyBuilder hat can be used to create a reply.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.RemoveAttachments">
      <summary>
            Creates <see cref="T:Limilabs.Mail.MailBuilder" /> with all visual and non-visual attachments removed.
            Same as invoking RemoveAttachments(true, true).
            </summary>
      <returns>
        <see cref="T:Limilabs.Mail.MailBuilder" /> that can be used to create email without attachments.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.RemoveAttachments(System.Boolean,System.Boolean)">
      <summary>
            Creates <see cref="T:Limilabs.Mail.MailBuilder" /> with all visual and non-visual attachments removed according to parameter values.
            </summary>
      <param name="removeVisuals">Specifies if visuals attachments (those in <see cref="P:Limilabs.Mail.IMail.Visuals" /> collection) should be removed.</param>
      <param name="removeNonVisuals">Specifies if visuals attachments (those in <see cref="P:Limilabs.Mail.IMail.NonVisuals" /> collection) should be removed.</param>
      <returns>
        <see cref="T:Limilabs.Mail.MailBuilder" /> that can be used to create email without attachments.</returns>
    </member>
    <member name="M:Limilabs.Mail.IMail.ExtractAttachmentsFromInnerMessages">
      <summary>
            Extracts attachments from this message and all attached messages (<see cref="T:Limilabs.Mail.MIME.MimeRfc822" /> objects with <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" /> content type).
            </summary>
      <returns>
            List of all attachments in this email message and all attached messages. It contains <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment" /> and <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline" /> attachments.
            </returns>
    </member>
    <member name="P:Limilabs.Mail.IMail.Document">
      <summary>
            Gets the entire <see cref="T:Limilabs.Mail.MimeDocument" /> object associated with this email message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Subject">
      <summary>
            Gets or sets the subject of this email message ('Subject' header). May be <c>null</c>.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.MimeVersion">
      <summary>
            Gets or sets MIME version of this email message ('MIME-version' header).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.MessageID">
      <summary>
            Gets or sets id of this email message ('Message-ID' header). Does not include surrounding brackets (&lt; and &gt;).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.InReplyTo">
      <summary>
            Gets or sets the id of the parent email message ('In-Reply-To' header). Does not contain surrounding brackets (&lt; and &gt;).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.References">
      <summary>
            Gets the ids of the referenced email messages. Does not include surrounding brackets (&lt; and &gt;).
            This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.From">
      <summary>
            Gets the author(s) of this email message ('From' header). 
            This collection can be modified. If it's empty, email message is NOT <a href="http://www.limilabs.com/mail/rfc/2822">RFC 2822</a> compliant.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Sender">
      <summary>
            Gets or sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            If 'Sender' is <c>null</c>, it returns first item from <see cref="P:Limilabs.Mail.IMail.From" /> collection.
            </summary>
      <remarks>
            'Sender' is not required if <see cref="P:Limilabs.Mail.IMail.From" /> property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox" />.
            'Sender' property is needed when message is from more than one person (<see cref="P:Limilabs.Mail.IMail.From" /> contains more than one mailbox).
            In such case Sender provides information which mailbox is responsible for the actual transmission.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.IMail.ReplyTo">
      <summary>
            Gets the address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox" /> which represents single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> which represents group of email addresses.
            This collection can be modified. May be empty.
            </summary>
      <remarks>
            The Reply-To value should not be used by any server. It is meant for client side use.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.IMail.To">
      <summary>
            Gets the address(es) of the primary recipient(s) of this email message ('To' header).
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox" /> which represents single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> which represents group of email addresses.
            This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Cc">
      <summary>
            Gets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox" /> which represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> which represents group of email addresses.
            This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Bcc">
      <summary>
            Gets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox" /> which represents single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> which represents group of email addresses.
            This collection can be modified. May be empty.
            BCC header is not rendered when <see cref="M:Limilabs.Mail.IMail.RenderEml" /> method is used, however it is rendered when message is saved.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.NotificationTo">
      <summary>
            Gets the disposition notifications addresses ('Disposition-Notification-To' header). 
            This collection can be modified. May be empty.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.RequestReadReceipt" />
    </member>
    <member name="P:Limilabs.Mail.IMail.ReturnReceiptTo">
      <summary>
            Gets return receipt addresses ('Return-Receipt-To' header). This collection can be modified. May be empty.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.RequestReadReceipt" />
    </member>
    <member name="P:Limilabs.Mail.IMail.XConfirmReadingTo">
      <summary>
            Gets confirm reading addresses ('X-Confirm-Reading-To' header). This collection can be modified. May be empty.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.RequestReadReceipt" />
    </member>
    <member name="P:Limilabs.Mail.IMail.ReturnPath">
      <summary>
            Gets or sets return path address ('Return-Path' header). Does not include brackets (&lt; and &gt;).
            </summary>
      <remarks>
            All bounces that occur during the SMTP session should go back to the Return-Path value.
            The recipient's mail server is supposed to add a Return-Path header to the top of the email.
            If Return-Path header already exists in the email, then that header should be replaced by the recipient's mail server.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.IMail.Date">
      <summary>
            Gets or sets the send date of this email message ('Date' header). 
            May be <c>null</c> in case of parsing error.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListArchive">
      <summary>
            Gets URL list of mailing list archive ('List-Archive' header). This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListHelp">
      <summary>
             Gets URL list for mailing list information ('List-Help' header). This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListId">
      <summary>
            Gets or sets mailing list identifier ('List-Id' header).May be <c>null</c>.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListOwner">
      <summary>
            Gets URL list for mailing list owner's mailbox ('List-Owner' header). This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListPost">
      <summary>
            Gets URL list for mailing list posting ('List-Post' header). This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListSubscribe">
      <summary>
            Gets URL list for mailing list subscription ('List-Subscribe' header). This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ListUnsubscribe">
      <summary>
            Gets list of URLs ("http://www.example.com/unsubscribe") or emails ("mailto:unsubscribe@lexample.com") for mailing list unsubscription ('List-Unsubscribe' header). 
            This collection can be modified. May be empty.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Importance">
      <summary>
            Gets or sets the importance of this email message ('Importance' header).
            Consider using <see cref="M:Limilabs.Mail.IMail.GetGenericPriority" /> as it also checks <see cref="P:Limilabs.Mail.IMail.Priority" /> and <see cref="P:Limilabs.Mail.IMail.XPriority" /> properties.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh" />
      <seealso cref="M:Limilabs.Mail.IMail.PriorityLow" />
    </member>
    <member name="P:Limilabs.Mail.IMail.Priority">
      <summary>
            Gets or sets the priority of this email message ('Priority' header).
            Consider using <see cref="M:Limilabs.Mail.IMail.GetGenericPriority" /> as it also checks <see cref="P:Limilabs.Mail.IMail.Importance" /> and <see cref="P:Limilabs.Mail.IMail.XPriority" /> properties.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh" />
      <seealso cref="M:Limilabs.Mail.IMail.PriorityLow" />
    </member>
    <member name="P:Limilabs.Mail.IMail.XPriority">
      <summary>
            Gets or sets the X-Priority of this email message ('X-Priority' header) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Limilabs.Mail.IMail.GetGenericPriority" /> as it also checks <see cref="P:Limilabs.Mail.IMail.Priority" /> and <see cref="P:Limilabs.Mail.IMail.Importance" /> properties.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh" />
      <seealso cref="M:Limilabs.Mail.IMail.PriorityLow" />
    </member>
    <member name="P:Limilabs.Mail.IMail.Sensitivity">
      <summary>
            Gets or sets the sensitivity of this email message ('Sensitivity' header)
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Html">
      <summary>
            Gets HTML version of this email message. 
            You can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml" /> method to extract plain text from HTML content.
            You can also use <see cref="M:Limilabs.Mail.IMail.GetBodyAsText" /> or <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml" /> to obtain body in a specific format.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Rtf">
      <summary>
            Gets RTF version of this email message.  RTF is exracted from a TNEF attachment (winmail.dat) a proprietary e-mail attachment format used by Microsoft Outlook and Microsoft Exchange Server.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Text">
      <summary>
            Gets plain text version of this email message.
            For some HTML emails plain text may be not defined, you can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml" /> method to extract plain text from HTML content.
            You can also use <see cref="M:Limilabs.Mail.IMail.GetBodyAsText" /> or <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml" /> to obtain body in a specific format.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.TextData">
      <summary>
            Gets the object representing 'text/plain' body of this email message. May be <c>null</c> if no text/plain data is present. 
            You may use <see cref="P:Limilabs.Mail.IMail.Text" /> as a shortcut to retrieve plain text data.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.HtmlData">
      <summary>
            Gets the object representing 'text/html' body of this email message. May be <c>null</c> if no HTML data is present.
            You may use <see cref="P:Limilabs.Mail.IMail.Html" /> as a shortcut to retrieve HTML data.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.HtmlDataString">
      <summary>
            Gets HTML data of this email message. You can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml" /> method to extract plain text from HTML content.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.TextDataString">
      <summary>
            Gets plain text data from this email message.
            For some HTML emails plain text may be not defined, you can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml" /> method to extract plain text from HTML content.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.IsRtf">
      <summary>
            Returns true if body of this email message is specified in RTF format. You can use <see cref="P:Limilabs.Mail.IMail.Rtf" /> property to access RTF version of the body.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.IsHtml">
      <summary>
            Returns true if body of this email message is specified in HTML format. You can use <see cref="P:Limilabs.Mail.IMail.Html" /> property to access HTML version of the body.
            </summary>
      <remarks>This property is not always negation of <see cref="P:Limilabs.Mail.IMail.IsText" /> property. Both <see cref="P:Limilabs.Mail.IMail.IsText" /> and <see cref="P:Limilabs.Mail.IMail.IsHtml" /> may be true or false simultaneously.</remarks>
    </member>
    <member name="P:Limilabs.Mail.IMail.IsText">
      <summary>
            Returns true if body of this email message is specified in plain text format. You can use <see cref="P:Limilabs.Mail.IMail.Text" /> property to access plain text version of the body.
            </summary>
      <remarks>This property is not always negation of <see cref="P:Limilabs.Mail.IMail.IsHtml" /> property. Both <see cref="P:Limilabs.Mail.IMail.IsText" /> and <see cref="P:Limilabs.Mail.IMail.IsHtml" /> may be true or false simultaneously.</remarks>
    </member>
    <member name="P:Limilabs.Mail.IMail.Attachments">
      <summary>
            Gets the list of all attachments in this email message.
            It contains <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment" /> and <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline" /> attachments.
            </summary>
      <seealso cref="M:Limilabs.Mail.IMail.ExtractAttachmentsFromInnerMessages" />
    </member>
    <member name="P:Limilabs.Mail.IMail.Visuals">
      <summary>
            Gets the list of all visual elements (<see cref="P:Limilabs.Mail.MIME.MimeBase.ContentDisposition" />.Value equal to <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline" />) in this email message.
            You can use Visuals[string cid] to find the picture embedded in the HTML body using its content id ('Content-ID' header).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.NonVisuals">
      <summary>
            Gets the list of all non visual elements (<see cref="P:Limilabs.Mail.MIME.MimeBase.ContentDisposition" />.Value equal to <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment" />) in this email message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Appointments">
      <summary>
            Gets the list of all appointments in this email message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.VCards">
      <summary>
            Gets the list of all vCards in this email message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.ReadReceipts">
      <summary>
            Gets the list of all Message Disposition Notifications (MDNs) in this email message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.IsSigned">
      <summary>
            Indicates if this email message has been signed.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.IsEncrypted">
      <summary>
            Indicates if this email message has been encrypted.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.NeedsDecryption">
      <summary>
            Indicates if this email message needs to be decrypted.
            You can use <see cref="M:Limilabs.Mail.IMail.Decrypt" />, <see cref="M:Limilabs.Mail.IMail.Decrypt(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})" />, <see cref="M:Limilabs.Mail.IMail.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> to decrypt a message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.NeedsSignedExtraction">
      <summary>
            Indicates if this email message needs signed message extraction.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.IsDKIMSigned">
      <summary>
            Indicates if this email message has been DKIM (DomainKeys Identified Mail) signed.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Received">
      <summary>
            Gets the list of all 'received' headers added to this email message.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.DKIMSignatureInfo">
      <summary>
            Gets DKIM signature information.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMail.Headers">
      <summary>
            MIME headers collection for root MIME entity. Keys are always in lower case.
            </summary>
      <remarks>Same as using Document.Root.Headers</remarks>
    </member>
    <member name="T:Limilabs.Mail.MailBuilder">
      <summary>
            Provides methods for <see cref="T:Limilabs.Mail.IMail" /> object creation.
            You should use <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.String)" /> if you already have an eml data downloaded via <see cref="T:Limilabs.Client.POP3.Pop3" /> or <see cref="T:Limilabs.Client.IMAP.Imap" /> client.
            You should use other properties and <see cref="M:Limilabs.Mail.MailBuilder.Create" /> method to create message that you'll send using <see cref="T:Limilabs.Client.SMTP.Smtp" /> client.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.#ctor">
      <summary>
            Creates new MailBuilder object.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddCustomHeader(System.String,System.String)">
      <summary>
            Adds custom header that will be added to <see cref="T:Limilabs.Mail.IMail" /> object after creation.
            </summary>
      <param name="header">Header name.</param>
      <param name="value">Header value.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Signs the message.
            </summary>
      <param name="certificate">Certificate used for signing.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.SignWith(Limilabs.Mail.SignatureConfiguration)">
      <summary>
            Signs the message.
            </summary>
      <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.EncryptWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Encrypts the message using specified certificate.
            You can call this method multiple times to use several certificates for encryption.
            General rule is that both sender and receiver should be able to decrypt the message.
            </summary>
      <param name="certificate">Certificate to use for encryption.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.EncryptWith(Limilabs.Mail.EncryptionConfiguration)">
      <summary>
            Encrypts the message using specified encryption configuration.
            </summary>
      <param name="configuration">Encryption configuration: such as certificates, algorithm etc.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
      <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
      <param name="rsa">RSA class containing private key used for signing.</param>
      <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
      <param name="publicKeyDnsDomain">DNS public key domain.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)">
      <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
      <param name="rsa">RSA class containing private key used for signing.</param>
      <param name="signatureInfo">DKIM signature information.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.PriorityHigh">
      <summary>  
            Sets <see cref="P:Limilabs.Mail.MailBuilder.XPriority" /> to 1, <see cref="P:Limilabs.Mail.MailBuilder.Priority" /> to <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent" /> and <see cref="P:Limilabs.Mail.MailBuilder.Importance" /> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.High" /></summary>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.PriorityLow">
      <summary>  
            Sets <see cref="P:Limilabs.Mail.MailBuilder.XPriority" /> to 5, <see cref="P:Limilabs.Mail.MailBuilder.Priority" /> to <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent" /> and <see cref="P:Limilabs.Mail.MailBuilder.Importance" /> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low" /></summary>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.RequestReadReceipt">
      <summary> 
            This method copies From list to all read receipts lists just before email is created (<see cref="M:Limilabs.Mail.MailBuilder.Create" /> method).
            Read receipts are stored using <seealso cref="P:Limilabs.Mail.IMail.NotificationTo" />, 
            <seealso cref="P:Limilabs.Mail.IMail.ReturnReceiptTo" /> or <seealso cref="P:Limilabs.Mail.IMail.XConfirmReadingTo" /> header.
            </summary>
      <remarks>
            Read receipt requests may not be always honored because:
            <list><item>A mail client may not recognize the special Disposition-Notification-To header.</item><item>A mail client may not implement that functionality.</item><item>The end user may have that functionality turned off.</item><item>The end user may optionally not choose to send one for your particular email.</item></list></remarks>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddAttachment(System.String)">
      <summary>
            Adds attachment. Data are read from the specified file.
            </summary>
      <param name="path">The file to read data from.</param>
      <returns>Newly added attachment.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddAttachment(System.Byte[])">
      <summary>
            Adds attachment with specified data.
            </summary>
      <param name="data">Data that will be contained in newly added attachment.</param>
      <returns>Newly added attachment.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddAttachment(Limilabs.Mail.MIME.MimeData)">
      <summary>
            Adds attachment.
            </summary>
      <param name="attachment">Attachment to add.</param>
      <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData" />
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddVisual(System.String)">
      <summary>
            Adds visual object. Data are read from the specified file.
            </summary>
      <param name="path">The file to read data from.</param>
      <returns>Newly added visual object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddVisual(System.Byte[])">
      <summary>
            Adds visual object with specified data.
            </summary>
      <param name="data">Data that will be contained in newly added visual object.</param>
      <returns>Newly added visual object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddVisual(Limilabs.Mail.MIME.MimeData)">
      <summary>
            Adds visual object. 
            </summary>
      <param name="visual">Visual attachment to add.</param>
      <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData" />
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddAlternative(Limilabs.Mail.MIME.MimeBase)">
      <summary>
            Adds alternative view for this message.
            </summary>
      <param name="alternativeView">Alternative view to add.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddAppointment(Limilabs.Mail.Appointments.Appointment)">
      <summary>
            Adds specified appointment as alternative view for this message. 
            </summary>
      <param name="appointment">Appointment to add.</param>
      <returns>Newly created MimeCalendar object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.AddVCard(Limilabs.Mail.BusinessCard.VCard)">
      <summary>
            Adds specified VCARD as attachment to this message. 
            </summary>
      <param name="vCard">VCard business card to add.</param>
      <returns>Newly created MimeVCard object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.Create">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail" /> using builder configuration.
            </summary>
      <returns>New <see cref="T:Limilabs.Mail.IMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.CreateFromDocument(Limilabs.Mail.MimeDocument)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail" /> using specified MIME document.
            </summary>
      <param name="document">MIME document.</param>
      <returns>New <see cref="T:Limilabs.Mail.IMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.String)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail" /> using specified eml raw data string.
            </summary>
      <param name="eml">Raw eml data string.</param>
      <returns>New <see cref="T:Limilabs.Mail.IMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.CreateFromEmlFile(System.String)">
      <summary>
            Loads raw eml data from file and creates new <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <remarks>Usually email files have *.eml extension.</remarks>
      <param name="path">The file to read raw eml data from.</param>
      <returns>New <see cref="T:Limilabs.Mail.IMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.LoadHtml(System.String)">
      <summary>
            Sets HTML version of the message.
            Modifies passed HTML, so that img tags reference inline images.
            Adds all images that can be found on disk to <see cref="P:Limilabs.Mail.MailBuilder.Visuals" /> collection.
            Extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text" /> property.
            </summary>
      <seealso cref="P:Limilabs.Mail.MailBuilder.Html" />
      <param name="html">HTML to be set.</param>
    </member>
    <member name="M:Limilabs.Mail.MailBuilder.LoadHtml(System.String,System.String)">
      <summary>
            Sets HTML version of the message.
            Modifies passed HTML, so that img tags reference inline images.
            Adds all images that can be found on disk to <see cref="P:Limilabs.Mail.MailBuilder.Visuals" /> collection.
            Extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text" /> property.
            </summary>
      <seealso cref="P:Limilabs.Mail.MailBuilder.Html" />
      <param name="html">HTML to be set.</param>
      <param name="rootFolder">Base folder to search images in.</param>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.NonVisuals">
      <summary>
            Gets the list of all visual elements. You can use <see cref="M:Limilabs.Mail.MailBuilder.AddAttachment(Limilabs.Mail.MIME.MimeData)" /> method to add attachment to this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Visuals">
      <summary>
            Gets the list of all non visual elements. You can use <see cref="M:Limilabs.Mail.MailBuilder.AddVisual(Limilabs.Mail.MIME.MimeData)" /> method to add attachment to this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Alternatives">
      <summary>
            Gets the list of all alternative elements. You can use <see cref="M:Limilabs.Mail.MailBuilder.AddAlternative(Limilabs.Mail.MIME.MimeBase)" /> or <see cref="M:Limilabs.Mail.MailBuilder.AddAppointment(Limilabs.Mail.Appointments.Appointment)" /> methods to add attachment to this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Text">
      <summary>
            Gets or sets plain text version of the email. Please remember that setting <see cref="P:Limilabs.Mail.MailBuilder.Html" /> will override plain text.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Html">
      <summary>
            Gets or sets HTML version of the email. 
            If value is not empty extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text" /> property.
            </summary>
      <see cref="P:Limilabs.Mail.MailBuilder.CreatePlainTextAutomatically" />
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.SetDefaults">
      <summary>
            Gets or set the value indicating whether default values (message-id, date) should be set.
            Default is true.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Subject">
      <summary>
            Gets or sets subject of a message ('Subject' header).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.MessageID">
      <summary>
            Gets or sets id of a email message ('Message-ID' header). Does not include surrounding brackets (&lt; and &gt;).
            If not set or set to null generated automatically.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.References">
      <summary>
            Gets unique ids (<see cref="P:Limilabs.Mail.IMail.MessageID" />) of the referenced email messages ('References' header). Does not include brackets (&lt; and &gt;).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.InReplyTo">
      <summary>
            Gets or sets the id of the parent email message ('In-Reply-To' header). Does not include surrounding brackets (&lt; and &gt;).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.From">
      <summary>
            Gets the author(s) of this email message ('From' header).
            If it's empty, email message is NOT <a href="http://www.limilabs.com/mail/rfc/2822">RFC 2822</a> compliant.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Sender">
      <summary>
            Gets or sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
      <remarks>
            'Sender' is not required if <see cref="P:Limilabs.Mail.MailBuilder.From" /> property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox" />.
            'Sender' property is needed when message is from more than one person (<see cref="P:Limilabs.Mail.MailBuilder.From" /> contains more than one mailbox).
            In such case Sender provides information which mailbox is responsible for the actual transmission.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.ReplyTo">
      <summary>
            Gets email address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.To">
      <summary>
            Gets address(es) of the primary recipient(s) of this email message ('To' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Cc">
      <summary>
            Gets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Bcc">
      <summary>
            Gets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            BCC header is not rendered when <see cref="M:Limilabs.Mail.IMail.RenderEml" /> method is used, however it is rendered when message is saved.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.NotificationTo">
      <summary>
            Gets the disposition notifications address(es) ('Disposition-Notification-To' header). 
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt" /> method instead of adding addresses to this property.
            </summary>
      <seealso cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt" />
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.ReturnReceiptTo">
      <summary>
            Gets return receipt address(es) ('Return-Receipt-To' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt" /> method instead of adding addresses to this property.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.XConfirmReadingTo">
      <summary>
            Gets confirm reading address(es) ('X-Confirm-Reading-To' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt" /> method instead of adding addresses to this property.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.ReturnPath">
      <summary>
            Gets or sets return path address ('Return-Path' header). Does not include brackets (&lt; and &gt;).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Date">
      <summary>
            Gets or sets the send date of a email message ('Date' header).
            If null, <see cref="P:Limilabs.Mail.IMail.Date" /> is set automatically to current date and time when <see cref="M:Limilabs.Mail.MailBuilder.Create" /> method is used.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Importance">
      <summary>
            Gets or sets the importance of a email message ('Importance' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.PriorityHigh" /> or <see cref="M:Limilabs.Mail.MailBuilder.PriorityLow" /> methods instead of setting this field.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Priority">
      <summary>
            Gets or sets the priority of a email message ('Priority' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.PriorityHigh" /> or <see cref="M:Limilabs.Mail.MailBuilder.PriorityLow" /> methods instead of setting this field.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.XPriority">
      <summary>
            Gets or sets the X-Priority of this email message ('X-Priority' header) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.PriorityHigh" /> or <see cref="M:Limilabs.Mail.MailBuilder.PriorityLow" /> methods instead of setting this field.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.Sensitivity">
      <summary>
            Gets or sets the sensitivity of a email message ('Sensitivity' header).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.SMIMEConfiguration">
      <summary>
            Gets S/MIME decrypt configuration (automatic decryption, certificates used for decryption).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.ProcessTnefAutomatically">
      <summary>
            Gets or sets a value indicating if TNEF attachments (winmail.dat) should be processed.
            TNEF processing extracts attachments and RTF data from TNEF file and removes TNEF from attachments collections afterwards.
            Default is true.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MailBuilder.CreatePlainTextAutomatically">
      <summary>
            Gets or sets a value indicating if plain text version of a body is extracted from HTML when <see cref="P:Limilabs.Mail.MailBuilder.Html" /> property is set.
            Default is true.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimePkcs7Signature">
      <summary>
            Represents Pkcs7-signature.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeCalendar">
      <summary>
            Represents MIME entity containing text/calendar data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar" /> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar(Limilabs.Mail.Appointments.Appointment)" /> methods to create objects of this type.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeCalendar.ChooseContentType(System.String)">
      <summary>
            This method sets content type to text/calendar.
            </summary>
      <param name="fileName">Name of the file form which data will be loaded</param>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeCalendar.SafeFileName">
      <summary>
            Suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName" /> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName" /> is false) 
            tries to use <see cref="P:Limilabs.Mail.Appointments.Event.Summary" /> to create a file name or
            generates random file name in format "att_d1be267b623941159a159158138a636e.ics".
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeCalendar.ContentTypeMethod">
      <summary>
            Gets or sets content type method.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.SignatureException">
      <summary>
            Represents an error that occurred during signature validation or signing.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.SignatureException.#ctor(System.String)">
      <summary>
            Creates new empty SignatureException object with specified message.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.SignatureException.#ctor(System.String,System.Exception)">
      <summary>
            Creates new empty SignatureException object with specified message and inner exception.
            </summary>
    </member>
    <member name="T:Limilabs.Client.ServerException">
      <summary>
            Represents an error that occurred on the server.
            </summary>
    </member>
    <member name="M:Limilabs.Client.ServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes new instance of ServerException with serialized data.
            </summary>
      <param name="info">Serialized object data.</param>
      <param name="context">Contextual information.</param>
    </member>
    <member name="T:Limilabs.Client.SMTP.HeloType">
      <summary>
            Hello types for <see cref="M:Limilabs.Client.SMTP.Smtp.Ehlo(Limilabs.Client.SMTP.HeloType,System.String)" /> method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.HeloType.Helo">
      <summary>
            HELO command.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.HeloType.Ehlo">
      <summary>
            EHLO command (Extended HELO).
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.HeloType.EhloHelo">
      <summary>
            First try EHLO then fallback to HELO.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Fluent.INewSmtp">
      <summary>
            Represents SMTP connection configuration.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Fluent.INewSmtp.Server(System.String)">
      <summary>
            Sets host name. IP address can also be used.
            You can use <see cref="M:Limilabs.Mail.Fluent.INewSmtp.OnPort(System.Int32)" /> method to specify non default port.
            </summary>
      <param name="serverName">Host name or IP address.</param>
      <returns>SMTP connection configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.INewSmtp.WithSSL">
      <summary>
            Instructs to use secure SSL connection.
            Changes port to default SSL port (465) for SMTP protocol.
            </summary>
      <returns>SMTP connection configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.INewSmtp.WithSSL(Limilabs.Client.ServerCertificateValidateEventHandler)">
      <summary>
            Instructs to use secure SSL connection.
            Changes port to default SSL port (465) for SMTP protocol.
            </summary>
      <param name="certificateValidateEventHandler">Event which is called for custom server validation.</param>
      <returns>SMTP connection configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.INewSmtp.OnPort(System.Int32)">
      <summary>
            Sets the port on which connection will be made.
            </summary>
      <param name="port">Port number.</param>
      <returns>SMTP connection configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.INewSmtp.WithCredentials(System.String,System.String)">
      <summary>
            Sets the SMTP server credentials.
            </summary>
      <param name="user">User name.</param>
      <param name="password">User's password.</param>
      <returns>SMTP connection configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.INewSmtp.Send">
      <summary>
            Sends the message.
            </summary>
      <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.SendMessageResult.Status" /> property to check if the operation succeed.</returns>
      <remarks>
            SMTP connection is created, opened, and closed.
            </remarks>
    </member>
    <member name="T:Limilabs.Mail.Fluent.IFluentMail">
      <summary>
            Email configuration.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Text(System.String)">
      <summary>
            Sets plain text version of the email. Please remember that using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Html(System.String)" /> method will override plain text.
            </summary>
      <param name="text">Plain text version of email body.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Html(System.String)">
      <summary>
            Sets HTML version of the email. 
            If <paramref name="html" /> is not empty extracts plain text from HTML and overrides <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Text(System.String)" />.
            </summary>
      <param name="html">HTML version of email body.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.From(System.String)">
      <summary>
            Sets the author of this email ('From' header).
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">Email address of the email's author.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.From(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Sets the author of this email ('From' header).
            </summary>
      <param name="from">Email's author.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Sender(System.String)">
      <summary>
            Sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
      <param name="address">Email address of the email's sender.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Sender(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
      <param name="from">Email's sender.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReplyTo(System.String)">
      <summary>
            Sets email address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">Reply-To email address.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReplyTo(Limilabs.Mail.Headers.MailAddress)">
      <summary>
            Sets email address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="replyTo">Reply-To mailbox.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.To(System.String)">
      <summary>
            Sets address(es) of the primary recipient(s) of this email message ('To' header).
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">Email address of the email recipient.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.To(Limilabs.Mail.Headers.MailAddress)">
      <summary>
            Sets address(es) of the primary recipient(s) of this email message ('To' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="to">Email recipient.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Cc(System.String)">
      <summary>
            Sets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">CC recipient.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Cc(Limilabs.Mail.Headers.MailAddress)">
      <summary>
            Sets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="cc">Email address of the CC recipient.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Bcc(System.String)">
      <summary>
            Sets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">Email address of the BCC recipient.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Bcc(Limilabs.Mail.Headers.MailAddress)">
      <summary>
            Sets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox" /> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup" /> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="bcc">BCC recipient.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.NotificationTo(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Sets the disposition notifications address(es) ('Disposition-Notification-To' header). 
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt" /> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="notification">Disposition-Notification-To mailbox.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.NotificationTo(System.String)">
      <summary>
            Sets the disposition notifications address(es) ('Disposition-Notification-To' header). 
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt" /> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">Disposition-Notification-To email address.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReturnReceiptTo(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Sets return receipt address(es) ('Return-Receipt-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt" /> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="returnReceiptTo">Return-Receipt-To mailbox.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReturnReceiptTo(System.String)">
      <summary>
            Sets return receipt address(es) ('Return-Receipt-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt" /> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">Return-Receipt-To email address.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.XConfirmReadingTo(Limilabs.Mail.Headers.MailBox)">
      <summary>
            Sets confirm reading address(es) ('X-Confirm-Reading-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt" /> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="confirmReadingTo">X-Confirm-Reading-To mailbox.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.XConfirmReadingTo(System.String)">
      <summary>
            Sets confirm reading address(es) ('X-Confirm-Reading-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt" /> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
      <param name="address">X-Confirm-Reading-To email address.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt">
      <summary> 
            This method copies From list to all read receipt lists just before email is created (<see cref="M:Limilabs.Mail.Fluent.IFluentMail.Create" /> method).
            Read receipts are stored using <seealso cref="P:Limilabs.Mail.IMail.NotificationTo" />, <seealso cref="P:Limilabs.Mail.IMail.ReturnReceiptTo" /> and <seealso cref="P:Limilabs.Mail.IMail.XConfirmReadingTo" /> header.
            </summary>
      <remarks>
            Read receipt requests may not be always honored because:
            <list><item>A mail client may not recognize the special Disposition-Notification-To header.</item><item>A mail client may not implement that functionality.</item><item>The end user may have that functionality turned off.</item><item>The end user may optionally not choose to send one for your particular email.</item></list></remarks>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Priority(Limilabs.Mail.Headers.MimePriority)">
      <summary>
            Sets the priority of a email message ('Priority' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh" /> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow" /> methods instead of using this method.
            </summary>
      <param name="mimePriority">Message's priority.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.XPriority(System.Int32)">
      <summary>
            Sets the X-Priority of this email message ('X-Priority' header) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh" /> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow" /> methods instead of using this method.
            </summary>
      <param name="priority">Message's priority value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Importance(Limilabs.Mail.Headers.MimeImportance)">
      <summary>
            Sets the importance of the message.
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh" /> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow" /> methods instead of using this method.
            </summary>
      <param name="mimeImportance">Message's importance.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Sensitivity(Limilabs.Mail.Headers.MimeSensitivity)">
      <summary>
            Sets the sensitivity of a email message ('Sensitivity' header).
            </summary>
      <param name="sensitivity">Message's sensitivity.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh">
      <summary>  
            Sets <see cref="M:Limilabs.Mail.Fluent.IFluentMail.XPriority(System.Int32)" /> to 1, <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Priority(Limilabs.Mail.Headers.MimePriority)" /> to <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent" /> and
            <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Importance(Limilabs.Mail.Headers.MimeImportance)" /> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.High" /></summary>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow">
      <summary>  
            Sets <see cref="M:Limilabs.Mail.Fluent.IFluentMail.XPriority(System.Int32)" /> to 5, <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Priority(Limilabs.Mail.Headers.MimePriority)" /> to <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent" /> and
            <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Importance(Limilabs.Mail.Headers.MimeImportance)" /> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low" /></summary>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.MessageID(System.String)">
      <summary>
            Sets id of a email message ('Message-ID' header). If not set or set to null generated automatically.
            </summary>
      <param name="messageId">Message id without surrounding brackets.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.References(System.String)">
      <summary>
            Adds unique id (<see cref="P:Limilabs.Mail.IMail.MessageID" />) of the referenced email message ('References' header).
            </summary>
      <param name="messageId">Referenced message id without surrounding brackets.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.InReplyTo(System.String)">
      <summary>
            Sets the id of the parent email message ('In-Reply-To' header).
            </summary>
      <param name="messageId">Referenced message id without surrounding brackets.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Subject(System.String)">
      <summary>
            Sets subject of a message ('Subject' header).
            </summary>
      <param name="subject">Subject of the message.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Date(System.DateTime)">
      <summary>
            Sets the send date of a email message ('Date' header).
            If null, <see cref="P:Limilabs.Mail.IMail.Date" /> is set automatically to current date and time when <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Create" /> method is used.
            </summary>
      <param name="date">Date of the message.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddCustomHeader(System.String,System.String)">
      <summary>
            Adds custom header.
            </summary>
      <param name="header">Header name.</param>
      <param name="value">Header value.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAttachment(System.String)">
      <summary>
            Adds a attachment to the message.
            </summary>
      <param name="path">The file to read data from.</param>
      <returns>Email configuration for this attachment.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAttachment(System.Byte[])">
      <summary>
            Adds a attachment to the message.
            </summary>
      <param name="data">Data of the attachment.</param>
      <returns>Email configuration for this attachment.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddVisual(System.String)">
      <summary>
            Adds a visual attachment to the message.
            </summary>
      <param name="path">The file to read data from.</param>
      <returns>Email configuration for this attachment.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddVisual(System.Byte[])">
      <summary>
            Adds a visual attachment to the message.
            </summary>
      <param name="data">Data of the visual attachment.</param>
      <returns>Email configuration for this attachment.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAlternative(Limilabs.Mail.MIME.MimeBase)">
      <summary>
            Adds alternative view for this message.
            </summary>
      <param name="alternativeView">Alternative view to add.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAppointment(Limilabs.Mail.Appointments.Appointment)">
      <summary>
            Adds specified appointment as alternative view for this message. 
            </summary>
      <param name="appointment">Appointment to add.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddVCard(Limilabs.Mail.BusinessCard.VCard)">
      <summary>
            Adds specified VCARD as attachment to this message. 
            </summary>
      <param name="vCard">VCard business card to add.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Signs the message.
            </summary>
      <param name="certificate">Certificate used for signing.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.SignWith(Limilabs.Mail.SignatureConfiguration)">
      <summary>
            Signs the message.
            </summary>
      <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.EncryptWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Encrypts the message using specified certificate.
            You can call this method multiple times to use several certificates for encryption.
            General rule is that both sender and receiver should be able to decrypt the message.
            </summary>
      <param name="certificate">Certificate to use for encryption.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.EncryptWith(Limilabs.Mail.EncryptionConfiguration)">
      <summary>
            Encrypts the message using specified encryption configuration.
            General rule is that both sender and receiver should be able to decrypt the message.
            </summary>
      <param name="configuration">Encryption configuration: such as certificates, algorithm etc.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
      <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
      <param name="rsa">RSA class containing private key used for signing.</param>
      <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
      <param name="publicKeyDnsDomain">DNS public key domain.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)">
      <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
      <param name="rsa">RSA class containing private key used for signing.</param>
      <param name="signatureInfo">DKIM signature information.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Create">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <returns>Email object.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.UsingNewSmtp">
      <summary>
            Creates new SMTP configuration for this message with localhost set as a server.
            </summary>
      <returns>Email configuration for SMTP server connection.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.UsingNewSmtp(System.String)">
      <summary>
            Creates new SMTP configuration for this message with specified server address.
            </summary>
      <returns>Email configuration for SMTP server connection.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentMail.Send(Limilabs.Client.SMTP.Smtp)">
      <summary>
            Sends the message using provided SMTP client instance.
            </summary>
      <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.SendMessageResult.Status" /> property to check if the operation succeed.</returns>
      <remarks>
            SMTP client connection should be already opened and user logged in if required.
            </remarks>
      <param name="client">SMTP client instance used for sending.</param>
    </member>
    <member name="T:Limilabs.Mail.Fluent.IFluentAttachment">
      <summary>
            Represents attachment configuration.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetFileName(System.String)">
      <summary>
            Sets the attachment's file name.
            </summary>
      <param name="fileName">FileName of the attachment.</param>
      <returns>Attachment configuration</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetContentId(System.String)">
      <summary>
            Sets the attachment's Content-Id.
            </summary>
      <param name="contentId">Content-Id of the attachment.</param>
      <returns>Attachment configuration</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetContentType(Limilabs.Mail.Headers.ContentType)">
      <summary>
            Sets the attachment's Content-type.
            </summary>
      <param name="contentType">Content-Type of the attachment.</param>
      <returns>Attachment configuration</returns>
    </member>
    <member name="T:Limilabs.Mail.Fluent.Mail">
      <summary>
            Allows creation and sending emails using fluent interface syntax.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Fluent.Mail.Text(System.String)">
      <summary>
            Creates new plain text email.
            </summary>
      <param name="text">Email content.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="M:Limilabs.Mail.Fluent.Mail.Html(System.String)">
      <summary>
            Creates new HTML email.
            </summary>
      <param name="html">Email content in HTML format.</param>
      <returns>Email configuration.</returns>
    </member>
    <member name="T:Limilabs.Mail.Headers.ContentType">
      <summary>
            Represents content type of the message (E.g. "text/plain").
            You can use static fields of this class such as: <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain" />, <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf" /> or <see cref="F:Limilabs.Mail.Headers.ContentType.ImageJpeg" />.
            </summary>
      <seealso cref="P:Limilabs.Mail.MIME.MimeBase.ContentType" />
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.TextPlain">
      <summary>
            Represents text/plain content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.TextHtml">
      <summary>
            Represents text/html content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.TextXml">
      <summary>
            Represents text/xml content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationOctetStream">
      <summary>
            Represents application/octet-stream content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationMsWord">
      <summary>
            Represents application/msword content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationVndMsExcel">
      <summary>
            Represents application/vnd.ms-excel content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MultipartMixed">
      <summary>
            Represents multipart/Mixed content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MultipartRelated">
      <summary>
            Represents multipart/related content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MultipartAlternative">
      <summary>
            Represents multipart/alternative content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MultipartSigned">
      <summary>
            Represents multipart/signed content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MultipartReport">
      <summary>
            Represents multipart/report content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationMsTnef">
      <summary>
            Represents TNEF content type: application/Ms-Tnef.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationVndMsTnef">
      <summary>
            Represents official TNEF content type: application/vnd.ms-tnef.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf">
      <summary>
            Represents application/pdf content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationZip">
      <summary>
            Represents application/zip content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationGZip">
      <summary>
            Represents application/gzip content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.TextCalendar">
      <summary>
            Represents text/calendar content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationIcs">
      <summary>
            Represents application/ics content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.TextVCard">
      <summary>
            Represents text/vcard content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MessageRfc822">
      <summary>
            Represents messsage/rfc822 content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers">
      <summary>
            Represents text/rfc822-headers content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MessageDeliveryStatus">
      <summary>
            Represents messsage/delivery-status content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MessageXDeliveryStatus">
      <summary>
            Represents messsage/xdelivery-status content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.MessageDispositionNotification">
      <summary>
            Represents messsage/disposition-notification content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ImageJpeg">
      <summary>
            Represents image/jpeg content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ImagePng">
      <summary>
            Represents image/png content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ImageGif">
      <summary>
            Represents image/gif content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ImageBmp">
      <summary>
            Represents image/bmp content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ImageTiff">
      <summary>
            Represents image/tiff content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationXPkcs7Signature">
      <summary>
            Represents application/x-pkcs7-signature content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationPkcs7Signature">
      <summary>
            Represents application/pkcs7-signature content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationPkcs7Mime">
      <summary>
            Represents application/pkcs7-mime content type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationXPkcs7Mime">
      <summary>
            Represents application/x-pkcs7-mime content type.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.#ctor(Limilabs.Mail.Headers.MimeType,Limilabs.Mail.Headers.MimeSubtype)">
      <summary>
            Creates new content type instance.
            </summary>
      <param name="mimeType">Mime type.</param>
      <param name="mimeSubtype">Mime subtype</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.ToString">
      <summary>
            Returns 'mime type name'/'mime subtype name' string.
            </summary>
      <returns>MimeTypeName/MimeSubtypeName</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.Equals(Limilabs.Mail.Headers.ContentType)">
      <summary>
             Determines whether the specified <see cref="T:Limilabs.Mail.Headers.ContentType" /> object is equal to the current one.
            </summary>
      <param name="other">The <see cref="T:Limilabs.Mail.Headers.ContentType" /> to compare with the current <see cref="T:Limilabs.Mail.Headers.ContentType" /></param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.op_Equality(Limilabs.Mail.Headers.ContentType,Limilabs.Mail.Headers.ContentType)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant" /> objects are equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.op_Inequality(Limilabs.Mail.Headers.ContentType,Limilabs.Mail.Headers.ContentType)">
      <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant" /> objects are not equal.
            </summary>
      <param name="left">First object to compare.</param>
      <param name="right">Second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are not equal; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.GetHashCode">
      <summary>
            Returns hash code for this instance.
            </summary>
      <returns>Hash code.</returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentType.Parse(System.String)">
      <summary>
            Parses specified string and creates new <see cref="T:Limilabs.Mail.Headers.ContentType" /> object.
            </summary>
      <param name="value">String in format: type/subtype</param>
      <returns>New <see cref="T:Limilabs.Mail.Headers.ContentType" /> object.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.ContentType.MimeType">
      <summary>
            Type name of content.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.ContentType.MimeSubtype">
      <summary>
            Subtype name of content.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.IMimeDataReadOnlyCollection">
      <summary>
            Interface for read-only access to MimeData collection.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.ForEach(System.Action{Limilabs.Mail.MIME.MimeData})">
      <summary>
            Performs specified action on each element of the collection.
            </summary>
      <param name="action">Action that will be performed on each element of the collection.</param>
    </member>
    <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.Find(System.Predicate{Limilabs.Mail.MIME.MimeData})">
      <summary>
            Finds first element that matches specified predicate.
            </summary>
      <param name="predicate">Predicate used to find an element.</param>
    </member>
    <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.ToList">
      <summary>
            Creates a new list that contains all elements from this collection.
            </summary>
      <returns>New list that contains elements from this collection.</returns>
    </member>
    <member name="P:Limilabs.Mail.IMimeDataReadOnlyCollection.Item(System.String)">
      <summary>
            Gets or set <see cref="T:Limilabs.Mail.MIME.MimeData" /> object with specified content-id.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMimeDataReadOnlyCollection.Item(System.Int32)">
      <summary>
            Gets or set <see cref="T:Limilabs.Mail.MIME.MimeData" /> object at specified index.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.IMimeDataReadOnlyCollection.Count">
      <summary>
            Gets the number of elements stored in the collection.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeReport">
      <summary>
            Represents 'Multipart/Report' MIME entity e.g. multiple mail messages.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeMultipart">
      <summary>
            Base class for all multipart MIME entities ('Multipart/*').
            </summary>
      <remarks>
            There are specialized classes for different multipart subtypes which derive from this class such as: <see cref="T:Limilabs.Mail.MIME.MimeAlternative" />, <see cref="T:Limilabs.Mail.MIME.MimeRelated" /> or <see cref="T:Limilabs.Mail.MIME.MimeSigned" />.
            </remarks>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMultipart.Parts">
      <summary>
            Parts of the entity. 
            MIME parts inside multipart entity are separated by <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Boundary" /> delimiter.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeMultipart.Boundary">
      <summary>
            Boundary delimiter. String which is separating parts of the multipart entity.
            Without additional '--' at the beginning. 
            E.g. '=_NextPart_000_0020_01C36F64.F2562350'.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeReport.GetMailMessage">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail" /> object from <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" /> or <see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers" /> type in <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts" /> collection.
            </summary>
      <returns>
            New <see cref="T:Limilabs.Mail.IMail" /> object or <c>null</c> if there was no attached email message.
            </returns>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeReport.ReportType">
      <summary>
            Gets or sets the type of the report.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeReport.Description">
      <summary>
            Gets the human readable description of error. It may be in any MIME standards-track content-type, charset, or language.
            Where a description of the error is desired in several languages or several media, 
            a Multipart/Alternative construct may be used. (<a href="http://www.limilabs.com/mail/rfc/3462">RFC 3462</a>)
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeReport.DeliveryStatusNotification">
      <summary>
            Gets DSNs return indications of message delivery to the sender of that message.
            This property is filled when <see cref="P:Limilabs.Mail.MIME.MimeReport.ReportType" /> is <see cref="F:Limilabs.Mail.Headers.MimeReportType.DeliveryStatus" /></summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeReport.MessageDispositionNotification">
      <summary>
            Gets MDNs provide a notification of the "disposition" of a message - indicating, for example, whether it is read by a recipient, discarded before being read, etc.
            This property is filled when <see cref="P:Limilabs.Mail.MIME.MimeReport.ReportType" /> is <see cref="F:Limilabs.Mail.Headers.MimeReportType.DispositionNotification" /></summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeDigest">
      <summary>
            Implements 'Multipart/Digest' MIME entity e.g. multiple email messages (<a href="http://www.limilabs.com/mail/rfc/2046">RFC 2046</a>).
            
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeDigest.GetMail(System.Int32)">
      <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail" /> object from specified part in <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts" /> collection.
            If <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType" /> for specified part is different than <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" /> returns null.
            </summary>
      <param name="index">Part index in <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts" /> collection.</param>
      <returns>
            New <see cref="T:Limilabs.Mail.IMail" /> object or null if <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType" /> for specified part is different than <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" />.
            </returns>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeRelated">
      <summary>
            Represents 'Multipart/Related' MIME entity e.g. HTML e-mail with embedded pictures. (<a href="http://www.limilabs.com/mail/rfc/2387">RFC 2387</a>).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MIME.MimeRelated.Root">
      <summary>
             Root mime object.
             This element should be processed first.
             The 'parts' collection contains this element.
             </summary>
      <remarks>
             E.g. if E-mail is HTML e-mail with embedded pictures,
             root will contain html body.
             All images will be placed in the 'parts' collection.
            </remarks>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeAlternative">
      <summary>
            Implements 'Multipart/Alternative' MIME entity e.g. email message containing both: 'text/html' and 'text/plain' 
            representations of the same information.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeAlternative.GetSimplestData">
      <summary>
            Gets simplest data representation.
            </summary>
      <returns>'parts[0]' or <c>null</c> if 'parts.Count==0'.</returns>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeAlternative.GetBestData">
      <summary>
            Gets most complicated data representation.
            </summary>
      <returns>'Parts[Parts.Count-1]' or <c>null</c> if 'parts.Count==0'.</returns>
    </member>
    <member name="T:Limilabs.Mail.Headers.HeaderEncoding">
      <summary>
            Header encoding format.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.HeaderEncoding.Base64">
      <summary>
            Base64 encoding.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.HeaderEncoding.Bit7">
      <summary>
            7 bit encoding.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.HeaderEncoding.QuotedPrintable">
      <summary>
            Quoted Printable encoding.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeEncoding">
      <summary>
            Mime encoding format.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Bit7" />, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Bit8" />, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.QuotedPrintable" />, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Base64" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.Bit7">
      <summary>
            7-bit encoding
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.Bit8">
      <summary>
            8-bit encoding.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.Binary">
      <summary>
            8-bit encoding.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.QuotedPrintable">
      <summary>
            Quoted-Printable encoding.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.Base64">
      <summary>
            Base64 encoding.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.XUUE">
      <summary>
            UUE encoding (Unix to Unix encoding).
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeEncoding.UUE">
      <summary>
            UUE encoding (Unix to Unix encoding).
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeReportType">
      <summary>
            Represents report type.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeReportType.DeliveryStatus" />, <see cref="F:Limilabs.Mail.Headers.MimeReportType.DispositionNotification" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeReportType.DeliveryStatus">
      <summary>
            "delivery-status" type.
            Delivery Status Notification.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeReportType.DispositionNotification">
      <summary>
            "disposition-notification" type.
            Notification of the "disposition" of a message - indicating, for example, whether it is read by a recipient, discarded before being read.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.ContentIdHelper">
      <summary>
            Contains helper methods for content-id operations.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentIdHelper.DecodeContentId(System.String)">
      <summary>
            Decodes Content-ID in URL format ('a%25b@c').
            Converts %hh hex-escaped characters to their ASCII equivalents.
            </summary>
      <param name="cid">Content-ID for decoding.</param>
      <returns>
            Decoded Content-ID value ('a%b@c').
            </returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.ContentIdHelper.GetContentId(System.String)">
      <summary>
            If url is "cid" URL ('cid:a%25b@c') method returns decoded Content-ID message header ('a%b@c').
            </summary>
      <remarks>
            Converts %hh hex- escaped characters to their ASCII 
            equivalents.
            </remarks>
      <param name="href">Address to extract content id from.</param>
      <returns>
            Content-ID message header -or- <c>null</c> if url is NOT "cid" URL.
            </returns>
    </member>
    <member name="T:Limilabs.Mail.Headers.IContentDisposition">
      <summary>
            Content-Disposition header interface.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.IContentDisposition.Item(System.String)">
      <summary>
            Gets or sets options value for specified key.
            </summary>
      <param name="key">Key.</param>
      <returns>Options value </returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.IContentDisposition.Value">
      <summary>
            Gets of sets disposition of content.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.IContentDisposition.FileName">
      <summary>
            Suggested filename ('filename' parameter). May be <c>null</c>.
            Consider using <see cref="P:Limilabs.Mail.MIME.MimeData.SafeFileName" /> as it is guaranteed to contain valid file name.
            </summary>
      <remarks>
              It is important that you should not blindly use the suggested
              filename.  The suggested filename SHOULD be checked (and possibly
              changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security
              problem.
            </remarks>
      <seealso cref="P:Limilabs.Mail.MIME.MimeData.FileName" />
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeImportance">
      <summary>
            Importance of email message.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeImportance.High" />, <see cref="F:Limilabs.Mail.Headers.MimeImportance.Normal" />, <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeImportance.High">
      <summary>
            High importance.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeImportance.Normal">
      <summary>
            Normal importance.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeImportance.Low">
      <summary>
            Low importance.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MailBox">
      <summary>
            Represents mailbox that consists of email address and display name.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailBox.#ctor(System.String,System.String)">
      <summary>
            Creates new MailBox object using specified email address and display name.
            </summary>
      <param name="address">Email address.</param>
      <param name="name">Display name.</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailBox.#ctor(System.String)">
      <summary>
            Creates new MailBox object using specified email address.
            </summary>
      <param name="address">Email address.</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailBox.Render">
      <summary>
            Encodes and escapes all necessary data and renders this mailbox as a string.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailBox.ToString">
      <summary>
            Returns string containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and the <see cref="P:Limilabs.Mail.Headers.MailBox.Address">Address</see>.
            </summary>
      <returns>
            String containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and the <see cref="P:Limilabs.Mail.Headers.MailBox.Address">Address</see></returns>
    </member>
    <member name="M:Limilabs.Mail.Headers.MailBox.GetMailboxes">
      <summary>
            Gets all mailboxes represented by this mail address.
            </summary>
      <returns>List of mailboxes containing only this mailbox.</returns>
      <seealso cref="M:Limilabs.Mail.Headers.MailGroup.GetMailboxes" />
    </member>
    <member name="P:Limilabs.Mail.Headers.MailBox.Address">
      <summary>
            Gets email address e.g. "john.smith@example.com".
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.MailBox.DomainPart">
      <summary>
            Gets the domain part of the <see cref="P:Limilabs.Mail.Headers.MailBox.Address" /> e.g. "example.com".
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.MailBox.LocalPart">
      <summary>
            Gets the local part of the <see cref="P:Limilabs.Mail.Headers.MailBox.Address" /> e.g. "john.smith".
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.HeaderCollection">
      <summary>
            Collection of mime headers, and listeners.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.HeaderCollection.Add(System.String,System.String)">
      <summary>
            Adds value for specified header key. Updates listener for that key.
            </summary>
      <param name="key">Header key.</param>
      <param name="value">Value for specified header key.</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.HeaderCollection.Remove(System.String)">
      <summary>
            Removes all headers for specified header key. Updates listener for that key.
            </summary>
      <param name="key">Header key.</param>
    </member>
    <member name="M:Limilabs.Mail.Headers.HeaderCollection.GetValues(System.String)">
      <summary>
            Gets the values associated with the specified key.
            </summary>
      <param name="key">The string key of the entry that contains the values to get.</param>
      <returns>A string array that contains the values associated with the specified key.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.HeaderCollection.Item(System.String)">
      <summary>
            Gets or set header value for specified header keys. Updates listener for that key.
            </summary>
      <param name="key">Header key.</param>
      <returns>Value for specified header key.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.HeaderCollection.AllKeys">
      <summary>
            Gets all the header keys stored in this collection.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.Headers.HeaderCollection.Count">
      <summary>
            Returns the number of the elements in this collection.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeDisposition">
      <summary>
            Represents type of action which mail user agent should take to present the specified data to the user. 
            (<a href="http://www.limilabs.com/mail/rfc/2183">RFC 2183</a>)
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline" />, <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeDisposition.Inline">
      <summary>
            Data should be displayed to the user.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeDisposition.Attachment">
      <summary>
            This is attachment.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeSubtype">
      <summary>
            Represents content's subtype (<a href="http://www.limilabs.com/mail/rfc/2045">RFC 2045</a>).
            </summary>
      <remarks>
            Consider using static fields of <see cref="T:Limilabs.Mail.Headers.ContentType" /> class, such as: <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain" />,  <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf" />, <see cref="F:Limilabs.Mail.Headers.ContentType.ImageJpeg" />.
            </remarks>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Plain">
      <summary>
            '?/plain' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Html">
      <summary>
            '?/html' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Related">
      <summary>
            '?/related' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Mixed">
      <summary>
            '?/mixed' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Alternative">
      <summary>
            '?/alternative' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Digest">
      <summary>
            '?/digest' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Report">
      <summary>
            '?/report' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Rfc822">
      <summary>
            '?/rfc822' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Rfc822Headers">
      <summary>
            '?/rfc822-headers' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Signed">
      <summary>
            '?/signed' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.DeliveryStatus">
      <summary>
            '?/delivery-status' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.XDeliveryStatus">
      <summary>
            '?/xdelivery-status' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.DispositionNotification">
      <summary>
            '?/disposition-notification' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.OctetStream">
      <summary>
            '?/octet-stream' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Jpeg">
      <summary>
            '?/jpeg' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Richtext">
      <summary>
            '?/richtext' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Rtf">
      <summary>
            '?/rtf' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Xml">
      <summary>
            '?/xml' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Gif">
      <summary>
            '?/gif' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Tiff">
      <summary>
            '?/tiff' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Bmp">
      <summary>
            '?/bmp' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Png">
      <summary>
            '?/png' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Pdf">
      <summary>
            ?/pdf subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Mpeg">
      <summary>
            '?/mpeg' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Mp4">
      <summary>
            '?/mp4' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Zip">
      <summary>
            '?/zip' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.XZipCompressed">
      <summary>
            '?/x-zip-compressed' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.GZip">
      <summary>
            '?/gzip' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.XGZip">
      <summary>
            '?/x-gzip' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.MsTnef">
      <summary>
            '?/ms-tnef' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.VndMsTnef">
      <summary>
            '?/vnd.ms-tnef' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Calendar">
      <summary>
            '?/calendar' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.VCard">
      <summary>
            '?/vcard' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.XVCard">
      <summary>
            '?/x-vcard' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Directory">
      <summary>
            '?/directory' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.MsWord">
      <summary>
            '?/msword' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.VndMsExcel">
      <summary>
            '?/vnd.ms-excel' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.XPkcs7Signature">
      <summary>
            '?/x-pkcs7-signature' subtype.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeSubtype.Pkcs7Signature">
      <summary>
            '?/pkcs7-signature' subtype.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MimeSubtype.#ctor(System.String)">
      <summary>
            Creates new MimeSubtype instance.
            </summary>
      <param name="subtype">Subtype string.</param>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimeType">
      <summary>
            Represents content's type (<a href="http://www.limilabs.com/mail/rfc/2045">RFC 2045</a>).
            </summary>
      <remarks>
            Consider using static fields of <see cref="T:Limilabs.Mail.Headers.ContentType" /> class, such as: <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain" />, <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf" /> or <see cref="F:Limilabs.Mail.Headers.ContentType.ImageJpeg" />.
            </remarks>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Application">
      <summary>
            'application/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Text">
      <summary>
            'text/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Multipart">
      <summary>
            'multipart/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Message">
      <summary>
            'message/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Image">
      <summary>
            'image/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Audio">
      <summary>
            'audio/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Model">
      <summary>
            'model/?' type.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimeType.Video">
      <summary>
            'video/?' type.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.MimeType.#ctor(System.String)">
      <summary>
            Creates new MimeType instance.
            </summary>
      <param name="type">Type string.</param>
    </member>
    <member name="T:Limilabs.Client.ServerCertificateValidateEventArgs">
      <summary>
            Arguments for <see cref="T:Limilabs.Client.ServerCertificateValidateEventHandler" /> and <see cref="E:Limilabs.Client.ClientBase.ServerCertificateValidate" /> event.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.Certificate">
      <summary>
            The certificate used to authenticate the remote party.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.Chain">
      <summary>
            The chain of certificate authorities associated with the remote certificate.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.SslPolicyErrors">
      <summary>
            One or more errors associated with the remote certificate.
            </summary>
    </member>
    <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.IsValid">
      <summary>
            Set this field to indicate validness of server's certificate.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.HeaderEncoder">
      <summary>
            Implements 'Base64' and 'Quoted-Printable' header encoding (<a href="http://www.limilabs.com/mail/rfc/2047">RFC 2047</a>).
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.HeaderEncoder.#ctor">
      <summary>
            Creates new HeaderEncoder object.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Headers.HeaderEncoder.Encode(System.String,System.Text.Encoding)">
      <summary>
            Encodes header values. Uses 'Quoted-Printable' or 'Base64', whichever is best.
            </summary>
      <param name="text">Header value to encode.</param>
      <param name="encoding">Character encoding used.</param>
      <returns>Encoded header.</returns>
    </member>
    <member name="P:Limilabs.Mail.Headers.HeaderEncoder.Configuration">
      <summary>
            Gets encoder configuration.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MailException">
      <summary>
            Represents an error that occurred during e-mail parsing.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MimeDocument">
      <summary>
            Represents MIME document tree.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MimeDocument.Render(System.Text.StringBuilder)">
      <summary>
            Renders the document.
            </summary>
      <param name="writer">Writer to render on.</param>
    </member>
    <member name="P:Limilabs.Mail.MimeDocument.Root">
      <summary>
            Reference to the top most MIME object in this document.
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MimeDocument.MimeVersion">
      <summary>
            Gets or sets MIME version ('MIME-version' header).
            </summary>
    </member>
    <member name="P:Limilabs.Mail.MimeDocument.DKIMSignatureInfo">
      <summary>
            Gets DKIM signature information.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3">
      <summary>
            POP3 client implementation. 
            It allows listing, downloading and deleting emails from POP3 servers.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3.DefaultPort">
      <summary>
            Default POP3 protocol port (110).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)" /> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.POP3.Pop3.DefaultSSLPort">
      <summary>
            Default POP3 protocol over SSL port (995).
            If you need to use different port please use use port parameter in <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)" /> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.#ctor">
      <summary>
            Initializes new instance of the Pop3 class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes new instance of the Pop3 class.
            </summary>
      <param name="addressFamily">Address family.</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetServerGreeting">
      <summary>
            Receives server's greeting. Gets the timestamp. Issues CAPA command.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response.
             </exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.Connect(System.String)">
      <summary>
            Connects to POP3 server on port 110. Use <see cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)" /> when SSL connection is needed.
            </summary>
      <param name="host">Host name or IP address.</param>
      <exception cref="T:Limilabs.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)">
      <summary>
            Connects to POP3 server using SSL on port 995.
            </summary>
      <param name="host">Host name or IP address.</param>
      <seealso cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" />
      <exception cref="T:Limilabs.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.BeginConnect(System.String)">
      <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultPort" />.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.BeginConnect(System.String,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultPort" />.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.BeginConnectSSL(System.String)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultSSLPort" /> and SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.BeginConnectSSL(System.String,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultSSLPort" /> and SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.STLS">
      <summary>
            Sends 'STLS' command and initializes SSL connection (issues CAPA command).
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.SendCommand(System.String,System.Boolean)">
      <summary>
            Sends command which expects to receive single-line response e.g. "STAT".
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Response different than "+OK", if '<paramref name="throwException" />' is set to <c>true</c>.
            </exception>
      <remarks>
            Some commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
      <param name="command">Command e.g. "STAT".</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on -ERR response</param>
      <returns>Single-line response object.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.SendCommand(System.String)">
      <summary>
            Sends command which expects to receive single-line response e.g. "STAT".
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Response different than "+OK".
            </exception>
      <remarks>
            Most commands have their own specialized methods in this class, 
            you should probably use them instead.
            This is equivalent to calling 'SendCommand(command, <c>true</c>);'.
            </remarks>
      <param name="command">Command e.g. "STAT".</param>
      <returns>Single-line response object.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.SendMultiLineCommand(System.String,System.Boolean)">
      <summary>
            Sends command which expects to receive multi-line response e.g. "RETR".
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws on response status different than <see cref="F:Limilabs.Client.POP3.Pop3ResponseStatus.Positive" /> ("+OK"), if '<paramref name="throwException" />' is set to <c>true</c>.
            </exception>
      <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
      <param name="command">Command to send e.g. "RETR".</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on -ERR response</param>
      <returns>Multi-line response object.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.SendMultiLineCommand(System.String)">
      <summary>
            Sends command which expects to receive multi-line response e.g. "RETR".
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws on response status different than <see cref="F:Limilabs.Client.POP3.Pop3ResponseStatus.Positive" /> ("+OK").
            </exception>
      <remarks>
            Some commands have their own specialized methods in this class, you should probably use them instead.
            This is equal to 'SendMultiLineCommand(command, <c>true</c>);'.
            </remarks>
      <param name="command">Command to send e.g. "RETR".</param>
      <returns>Multi-line response object.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.UseBestLogin(System.String,System.String)">
      <summary>
            Logs user in using best available method. 
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)">
      <summary>
            Logs user in using USER and PASS commands. This method sends the password in clear text, unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">
            Throws <see cref="T:Limilabs.Client.ServerException" /> on -ERR response.
            </exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)">
      <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)">
      <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="adminUser">Administrator's user.</param>
      <param name="adminPassword">Administrator's password.</param>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)">
      <summary>
            Logs user in using AUTH CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginDIGEST(System.String,System.String)">
      <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)" />"/&gt;
            <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception></member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI">
      <summary>
            Logs user in using <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" /> mechanism. Target will be constructed as "pop/" + TargetHost name.
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            Target will be constructed as "pop/" + TargetHost name.
            </summary>
      <param name="mechanism">Mechanism to use.</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "pop/" + fully qualified target name.</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            Target will be constructed as "pop/" + TargetHost name.
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="userWithDomain">User's login (e.g. "domain/user").</param>
      <param name="password">User's password.</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="userWithDomain">User's login (e.g. "domain/user").</param>
      <param name="password">User's password.</param>
      <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "pop/" + fully qualified target name.</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)">
      <summary>
            Logs user in using APOP command. This method does NOT send the password in clear text.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            APOP is optional command and a POP3 server does NOT need to support it.
            A POP3 server which implements the APOP command will include a timestamp in its banner greeting. 
            Check <see cref="P:Limilabs.Client.POP3.Pop3.HasTimeStamp" /> property in order to know if server included the timestamp.
            Some servers include timestamp, but do NOT support APOP command.
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)" />
      <seealso cref="P:Limilabs.Client.POP3.Pop3.HasTimeStamp" />
      <exception cref="T:Limilabs.Client.ServerException">
            Throws <see cref="T:Limilabs.Client.ServerException" /> on -ERR response.
            Throws <see cref="T:Limilabs.Client.ServerException" /> when there is no timestamp 
            (<see cref="P:Limilabs.Client.POP3.Pop3.HasTimeStamp" />==<c>false</c>).
            </exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetAccountStat">
      <summary>
            Gets stat information from server.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws <see cref="T:Limilabs.Client.ServerException" /> on -ERR response.
            </exception>
      <returns>Account statistics.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.DeleteMessageByUID(System.String)">
      <summary>
            Deletes message specified by the <paramref name="uid" />.
            POP3 server does not actually delete the message until successful QUIT command issued by <see cref="M:Limilabs.Client.POP3.Pop3.Close" /> or <see cref="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)" />.
            </summary>
      <param name="uid">Unique-id of the message to flag.</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.DeleteMessageByNumber(System.Int64)">
      <summary>
            Marks specified message for deletion.
            POP3 server does not actually delete the message until successful QUIT command issued by <see cref="M:Limilabs.Client.POP3.Pop3.Close" /> or <see cref="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)" />.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response.
            </exception>
      <param name="messageNumber">Number of the message to delete (starts from 1)</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.DeleteMessage(System.Int64)">
      <summary>
            Marks specified message for deletion.
            POP3 server does not actually delete the message until successful QUIT command issued by <see cref="M:Limilabs.Client.POP3.Pop3.Close" /> or <see cref="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)" />.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response.
            </exception>
      <param name="messageNumber">Number of the message to delete (starts from 1)</param>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetHeadersByUID(System.String)">
      <summary>
            Gets headers of the specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
      <exception cref="T:System.Exception">
            Invalid uid provided.
            </exception>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>String containing email message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetHeadersByNumber(System.Int64)">
      <summary>
            Gets specified mail message containing only headers. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
      <param name="messageNumber">Number of message to get (starts from 1)</param>
      <returns>String containing email message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetHeaders(System.Int64)">
      <summary>
            Gets specified mail message containing only headers. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
      <param name="messageNumber">Number of message to get (starts from 1)</param>
      <returns>String containing email message headers.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetMessageByUID(System.String)">
      <summary>
            Gets specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
      <exception cref="T:System.Exception">
            Invalid uid provided.
            </exception>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>String containing email message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetMessageByNumber(System.Int64)">
      <summary>
            Gets specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
      <param name="messageNumber">Number of the message to get (starts from 1).</param>
      <returns>String containing email message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetMessage(System.Int64)">
      <summary>
            Gets specified mail message from server. Use <see cref="T:Limilabs.Mail.MailBuilder" /> class to create <see cref="T:Limilabs.Mail.IMail" /> object.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
      <param name="messageNumber">Number of the message to get (starts from 1).</param>
      <returns>String containing email message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetAll">
      <summary>
            Gets UIDS of all messages.
            </summary>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.GetMessageByUID(System.String)" />
      <seealso cref="M:Limilabs.Client.POP3.Pop3.GetHeadersByUID(System.String)" />
      <returns>UID list.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.ListUniqueID">
      <summary>
            Sends UIDL command to the pop3 server.
            Returns a key value collection. Keys are message numbers (starting from 1)
            value is a unique-id of the message.
            </summary>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.GetAll" />
      <returns>Key value collection, with message number as key and unique-id as a value</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.ListUniqueID(System.Int64)">
      <summary>
            Sends UIDL command to the pop3 server.
            Returns line with the unique-id for that message.
            </summary>
      <param name="messageNumber">Message number</param>
      <returns>Unique-id for specified email message</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetUID">
      <summary>
            Sends UIDL command to the pop3 server.
            Returns a key value collection. Keys are message numbers (starting from 1)
            value is a unique-id of the message.
            </summary>
      <seealso cref="M:Limilabs.Client.POP3.Pop3.GetAll" />
      <returns>Key value collection, with message number as key and unique-id as a value</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetUID(System.Int64)">
      <summary>
            Sends UIDL command to the pop3 server.
            Returns line with the unique-id for that message.
            </summary>
      <param name="messageNumber">Message number</param>
      <returns>Unique-id for specified email message</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByNumber">
      <summary>
            Returns the size (in bytes) of all messages.  Keys are message numbers (starting from 1), value is the size of the message.
            </summary>
      <returns>Key value collection, with message number as key and size as a value</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByUID">
      <summary>
            Returns the size (in bytes) of all messages. Keys are message uids, value is the size of the message.
            </summary>
      <returns>Key value collection, with message UID as key and size as a value</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.ListSizeByUID(System.String)">
      <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>Size of the message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByUID(System.String)">
      <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
      <param name="uid">Unique-id of the message to get.</param>
      <returns>Size of the message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByNumber(System.Int64)">
      <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
      <param name="messageNumber">Number of message to get (starts from 1)</param>
      <returns>Size of the message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.ListSize(System.Int64)">
      <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
      <param name="messageNumber">Number of message to get (starts from 1)</param>
      <returns>Size of the message.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.Capability">
      <summary>
            Sends CAPA command. Retrieves POP3 server capablity list.
            </summary>
      <returns>Server's capability list.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.Noop">
      <summary>
            Always succeeds. It does nothing. Can be used to reset any inactivity auto-logout timer on the server.
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.SupportedExtensions">
      <summary>
            Lists extensions supported by the remote POP3 server (e.g. STLS, TOP)
            </summary>
      <returns>Extensions supported by remote server.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods">
      <summary>
            Lists authentication methods supported by the remote POP3 server.
            </summary>
      <returns>Authentication methods supported by remote server.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.Close">
      <summary>
            Sends the QUIT command.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">-ERR response to QUIT command.</exception>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)">
      <summary>
            Sends the QUIT command.
            </summary>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on -ERR response</param>
      <exception cref="T:Limilabs.Client.ServerException">-ERR response to QUIT command.</exception>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3.HasTimeStamp">
      <summary>
            True if there was a timestamp in server's greeting
            (usually it means that APOP command is supported, but not always).
            Filled by Connect method.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3MultiLineResponse">
      <summary>
            Represents POP3 server multi-line response.
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3MultiLineResponse.GetLineList">
      <summary>
            Returns <see cref="P:Limilabs.Client.POP3.Pop3MultiLineResponse.MultiLineMessage" /> as a line collection.
            </summary>
      <returns>
        <see cref="P:Limilabs.Client.POP3.Pop3MultiLineResponse.MultiLineMessage" /> as a line collection.</returns>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3MultiLineResponse.ToString">
      <summary>
            Returns the <see cref="P:Limilabs.Client.POP3.Pop3MultiLineResponse.Message" /> property.
            </summary>
      <returns>
        <see cref="P:Limilabs.Client.POP3.Pop3MultiLineResponse.Message" /> property.</returns>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3MultiLineResponse.Status">
      <summary>
            Gets the status of this response.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3MultiLineResponse.Message">
      <summary>
            Gets the response message without "-ERR", or "+OK" strings.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3MultiLineResponse.MultiLineMessage">
      <summary>
            String that holds the response message (without "-ERR", or "+OK" strings).
            The first line can be obtained through <see cref="P:Limilabs.Client.POP3.Pop3MultiLineResponse.Message" /> property.
            </summary>
    </member>
    <member name="T:Limilabs.Client.POP3.Pop3Response">
      <summary>
            Represents POP3 server single-line response.
            </summary>
    </member>
    <member name="M:Limilabs.Client.POP3.Pop3Response.ToString">
      <summary>
            Returns the <see cref="P:Limilabs.Client.POP3.Pop3Response.Message" /> property.
            </summary>
      <returns>
        <see cref="P:Limilabs.Client.POP3.Pop3Response.Message" /> property.</returns>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3Response.Status">
      <summary>
            Gets the status of this response.
            </summary>
    </member>
    <member name="P:Limilabs.Client.POP3.Pop3Response.Message">
      <summary>
            Gets the response message without "-ERR", or "+OK" strings.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Headers.MimePriority">
      <summary>
            Priority of email message.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent" />, <see cref="F:Limilabs.Mail.Headers.MimePriority.Normal" />, <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent" />.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimePriority.Urgent">
      <summary>
            Urgent priority.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimePriority.Normal">
      <summary>
            Normal priority.
            </summary>
    </member>
    <member name="F:Limilabs.Mail.Headers.MimePriority.NonUrgent">
      <summary>
            Non urgent priority.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.MIME.MimeSigned">
      <summary>
            Represents 'Multipart/Signed' MIME entity. You can sign email messages using <see cref="M:Limilabs.Mail.MailBuilder.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> methods.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeSigned.CheckSignature(System.Boolean)">
      <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers' certificates.
            </summary>
      <param name="verifySignatureOnly">
        <paramref name="verifySignatureOnly" />: A System.Boolean value that specifies whether only the digital signatures are verified 
            without the signers' certificates being validated. 
            If <paramref name="verifySignatureOnly" /> is <c>true</c>, only the digital signatures are verified. 
            If it is <c>false</c>, the digital signatures are verified, the signers' certificates are validated, 
            and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or 
            if the key usage supports digital signatures or non-repudiation.
            </param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeSigned.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Computes and adds a signature to <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts" /> collection.
            </summary>
      <param name="certificate">Certificate used for signing.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeSigned.SignWith(Limilabs.Mail.SignatureConfiguration)">
      <summary>
            Computes and adds a signature to <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts" /> collection.
            </summary>
      <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
    </member>
    <member name="M:Limilabs.Mail.MIME.MimeSigned.ReSignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Computes the signature again.
            <param name="certificate">certificate used for signing.</param></summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.Smtp">
      <summary>
            SMTP client implementation. It allows sending emails using SMTP server.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.Smtp.DefaultPort">
      <summary>
            Default SMTP protocol port (587).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)" /> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="F:Limilabs.Client.SMTP.Smtp.DefaultSSLPort">
      <summary>
            Default SMTP protocol over SSL port (465).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)" /> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.#ctor">
      <summary>
            Initializes new instance of the Smtp class.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes new instance of the Smtp class.
            </summary>
      <param name="addressFamily">Address family.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Connect(System.String)">
      <summary>
            Connects to SMTP server on port 587. Use <see cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)" /> when SSL connection is needed.
            </summary>
      <param name="host">Host name or IP address.</param>
      <exception cref="T:Limilabs.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)">
      <summary>
            Connects to SMTP server using SSL on port 465.
            </summary>
      <param name="host">Host name or IP address.</param>
      <seealso cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)" />
      <exception cref="T:Limilabs.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnect(System.String)">
      <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultPort" />.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnect(System.String,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultPort" />.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnectSSL(System.String)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultSSLPort" /> and SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnectSSL(System.String,System.AsyncCallback)">
      <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultSSLPort" /> and SSL.
            </summary>
      <param name="host">The name or IP address of the remote server.</param>
      <param name="asyncCallback">The AsyncCallback delegate.</param>
      <returns>An IAsyncResult that references the asynchronous connection.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.GetServerGreeting">
      <summary>
            Receives server's greeting.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
      </exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.SendCommand(System.String)">
      <summary>
            Sends command which expects to receive multi-line response e.g. "EHLO".
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws on response status different than <see cref="F:Limilabs.Client.SMTP.SmtpResponseStatus.Positive" /> (200-299 response codes)
            </exception>
      <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            This is equal to 'SendMultiLineCommand(command,<c>true</c>);'.
            </remarks>
      <param name="command">Command to send e.g. "EHLO".</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.SendCommand(System.String,System.Boolean)">
      <summary>
            Sends command which expects to receive multi-line response e.g. "EHLO".
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws on response status different than <see cref="F:Limilabs.Client.SMTP.SmtpResponseStatus.Positive" /> (200-299 response codes), if '<paramref name="throwException" />' is set to <c>true</c>.
            </exception>
      <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
      <param name="command">Command to send e.g. "EHLO".</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Ehlo">
      <summary>
            Says hello to the server. Uses local IP address as domain name. 
            This command is sent automatically you don't need to resend it.
            </summary>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Helo(System.String)">
      <summary>
            Sends HELO to the server.
            </summary>
      <param name="domain">May be <c>null</c>, but rejected by some servers.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Ehlo(System.String)">
      <summary>
            Sends EHLO (Extended HELO) to the server.
            </summary>
      <param name="domain">May be <c>null</c>, but rejected by some servers.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Ehlo(Limilabs.Client.SMTP.HeloType,System.String)">
      <summary>
            Says hello to the server.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">On error response</exception>
      <param name="heloType">Hello type (EHLO, HELO, Try both)</param>
      <param name="domain">Fully qualified domain name or client's IP address in brackets.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions">
      <summary>
            Lists extensions supported by the remote server (e.g. STARTTLS)
            </summary>
      <returns>Extensions supported by remote server.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods">
      <summary>
            Lists authentication methods supported by the remote server.
            </summary>
      <returns>Authentication methods supported by remote server.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.UseBestLogin(System.String,System.String)">
      <summary>
            Logs user in using best available method. 
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.StartTLS">
      <summary>
            Sends 'STARTTLS' command and initializes SSL connection (issues EHLO command).
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)">
      <summary>
            Logs user in using AUTH LOGIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.UseBestLogin(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)">
      <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String,System.String)">
      <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
      <param name="user">User's login.</param>
      <param name="adminUser">Administrator's user.</param>
      <param name="adminPassword">Administrator's password.</param>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)">
      <summary>
            Logs user in using AUTH CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginDIGEST(System.String,System.String)">
      <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
      <param name="user">User's login.</param>
      <param name="password">User's password.</param>
      <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" /> method instead.
            </remarks>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" />
      <exception cref="T:Limilabs.Client.ServerException">Throws <see cref="T:Limilabs.Client.ServerException" /> on negative response.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI">
      <summary>
            Logs user in using <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" /> mechanism. Target will be constructed as "smtp/" + TargetHost name.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            Target will be constructed as "smtp/" + TargetHost name.
            </summary>
      <param name="mechanism">Mechanism to use.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "smtp/" + fully qualified target name. IIS SMTP may use "SmtpSvc/" + fully qualified target name.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            Target will be constructed as "smtp/" + TargetHost name.
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="userWithDomain">User's login (e.g. "domain/user").</param>
      <param name="password">User's password.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String,System.String)">
      <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate" />, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos" /> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM" />).
            </summary>
      <param name="mechanism">Mechanism to use.</param>
      <param name="userWithDomain">User's login (e.g. "domain/user").</param>
      <param name="password">User's password.</param>
      <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "smtp/" + fully qualified target name. IIS SMTP may use "SmtpSvc/" + fully qualified target name.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)">
      <summary>
            Logs user in using AUTH XOAUTH command. This method does NOT send the password.
            You can use <see cref="T:Limilabs.Client.Authentication.OAuth" /> class to create the key.
            </summary>
      <param name="key">XOAuth key. You can use <see cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetXOAuthKey" /> method to create this key.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH2(System.String,System.String)">
      <summary>
            Logs user in using AUTH XOAUTH2 command. This method does NOT send the password.
            You can use <a href="http://www.dotnetopenauth.net/">DotNetOpenAuth</a> to create the key.
            You can check which methods remote server supports using <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods" /> method.
            </summary>
      <param name="user">User's login (email address).</param>
      <param name="accessToken">OAuth 2.0 access token.</param>
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String,System.String)" />
      <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)" />
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.MailFrom(System.String)">
      <summary>
            Sends "MAIL FROM:" command.
            </summary>
      <param name="from">From address.</param>
      <exception cref="T:Limilabs.Client.ServerException">
            Throws <see cref="T:Limilabs.Client.ServerException" /> on error response.
            </exception>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.MailFrom(System.String,System.Boolean)">
      <summary>
            Sends "MAIL FROM:" command.
            </summary>
      <param name="from">From address.</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.MailFrom(System.String,System.Collections.Generic.List{Limilabs.Client.SMTP.CommandParameter},System.Boolean)">
      <summary>
            Sends "MAIL FROM:" command.
            </summary>
      <param name="from">From address.</param>
      <param name="parameters">Command parameters.</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.RcptTo(System.String)">
      <summary>
            Sends "RCPT TO:" command.
            </summary>
      <param name="to">To address.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.RcptTo(System.String,System.Boolean)">
      <summary>
            Sends "RCPT TO:" command.
            </summary>
      <param name="to">To address.</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.RcptTo(System.String,System.Collections.Generic.List{Limilabs.Client.SMTP.CommandParameter},System.Boolean)">
      <summary>
            Sends "RCPT TO:" command.
            </summary>
      <param name="to">To address.</param>
      <param name="parameters">Command parameters.</param>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Data">
      <summary>
            Sends "DATA" command.
            </summary>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Data(System.Boolean)">
      <summary>
            Sends "DATA" command.
            </summary>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response.</param>
      <returns>Server's response.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)">
      <summary>
            Sends single message.
            </summary>
      <param name="email">
        <see cref="T:Limilabs.Mail.IMail" /> message to send.</param>
      <seealso cref="P:Limilabs.Client.SMTP.Smtp.AllowPartialSending" />
      <seealso cref="P:Limilabs.Client.SMTP.Smtp.EnablePipelining" />
      <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.SendMessageResult.Status" /> property to check if the operation succeed.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)">
      <summary>
            Sends single message.
            </summary>
      <param name="smtpMail">SmtpMail message to send.</param>
      <seealso cref="P:Limilabs.Client.SMTP.Smtp.AllowPartialSending" />
      <seealso cref="P:Limilabs.Client.SMTP.Smtp.EnablePipelining" />
      <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.SendMessageResult.Status" /> property to check if the operation succeed.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Noop">
      <summary>
            Always succeeds. It does nothing. Can be used to reset any inactivity auto-logout timer on the server.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Close">
      <summary>
            Sends the QUIT command and gets server response.
            </summary>
      <exception cref="T:Limilabs.Client.ServerException">Error response to QUIT command.</exception>
    </member>
    <member name="M:Limilabs.Client.SMTP.Smtp.Close(System.Boolean)">
      <summary>
            Sends the QUIT command and gets server response.
            </summary>
      <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.ServerException" /> on error response.</param>
      <exception cref="T:Limilabs.Client.ServerException">Error response to QUIT command.</exception>
    </member>
    <member name="P:Limilabs.Client.SMTP.Smtp.EnablePipelining">
      <summary>
            Gets or sets the value indicating if <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining" /> should be used when sending messages. 
            Default is true.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.Smtp.CustomHost">
      <summary>
            Gets or sets the value, which, if set, is used when sending HELO or EHLO commands.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.Smtp.AllowPartialSending">
      <summary>
            Gets or sets the value indicating if <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)" /> and <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)" /> should send message 
            even if some receipients were rejected.
            Setting this value to true when <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining" /> is used improves performance.
            Default is false.
            </summary>
      <see cref="P:Limilabs.Client.SMTP.Smtp.EnablePipelining" />
    </member>
    <member name="P:Limilabs.Client.SMTP.Smtp.DeliveryNotification">
      <summary>
            Gets or sets the delivery notification options for email. 
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpMail">
      <summary>
            Represents sender, recipients and raw message data in eml format that can be sent via SMTP protocol.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpMail.#ctor">
      <summary>
            Creates new empty SmtpMail object.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpMail.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Creates new SmtpMail object.
            </summary>
      <param name="from">From mail address.</param>
      <param name="data">Message data to be send.</param>
      <param name="to">Collection of mail addresses this message will be sent to.</param>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateFrom(Limilabs.Mail.IMail)">
      <summary>
            Creates new <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> using specified email.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From" />, <see cref="P:Limilabs.Client.SMTP.SmtpMail.To" /> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData" /> are initialized using specified <paramref name="email" />.
            </summary>
      <param name="email">Email to initialize this object from.</param>
      <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateUsingVERP(Limilabs.Mail.IMail)">
      <summary>
            Creates new <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> using specified email.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.To" /> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData" /> are initialized using specified <paramref name="email" />.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From" /> property is initialized using VERP address containig <see cref="P:Limilabs.Mail.IMail.From" /> and <see cref="P:Limilabs.Mail.IMail.To" /> or <see cref="P:Limilabs.Mail.IMail.Sender" />.
            </summary>
      <remarks>
            VERP address used to initialize <see cref="P:Limilabs.Client.SMTP.SmtpMail.From" /> property is created using <see cref="T:Limilabs.Mail.Tools.VERPAddress" /> class.
            </remarks>
      <param name="email">Email to initialize this object from.</param>
      <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateFromEml(System.String)">
      <summary>
            Creates new <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> using specified eml raw data string.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From" />, <see cref="P:Limilabs.Client.SMTP.SmtpMail.To" /> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData" /> are initialized using parsed <paramref name="eml" /> content.
            </summary>
      <param name="eml">Raw eml data string.</param>
      <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> object.</returns>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateFromEmlFile(System.String)">
      <summary>
            Loads raw eml data from file and creates new <see cref="T:Limilabs.Mail.IMail" /> object.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From" />, <see cref="P:Limilabs.Client.SMTP.SmtpMail.To" /> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData" /> are initialized using parsed content of a file specified by <paramref name="path" />.
            </summary>
      <param name="path">The file to read raw eml data from.</param>
      <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail" /> object.</returns>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpMail.From">
      <summary>
            Gets or sets from mail address. Value of this property is used for SMTP's MAIL FROM command.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpMail.To">
      <summary>
            Gets the collection of mail addresses this message will be sent to. Value of this property is used for SMTP's RCPT TO command.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData">
      <summary>
            Gets or sets the raw message data that can be sent using SMTP protocol. Value of this property is used for SMTP's DATA command.
            </summary>
    </member>
    <member name="T:Limilabs.Client.SMTP.SmtpResponse">
      <summary>
            Represents a status of a <see cref="T:Limilabs.Client.SMTP.SmtpResponse" />.
            </summary>
    </member>
    <member name="M:Limilabs.Client.SMTP.SmtpResponse.ToString">
      <summary>
            Returns <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Lines" /> joined as a single string.
            </summary>
      <returns>
        <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Lines" /> joined as a single string.</returns>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpResponse.Code">
      <summary>
            Gets the status code.
            2yz is positive completion reply; 
            3yz is positive intermediate reply; 
            Other is negative.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpResponse.Lines">
      <summary>
            Lines returned from server.
            Every line is striped off of Code and '-' char at the beginning
            and without '\r\n' at the end.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpResponse.Status">
      <summary>
             Gets the status of this response.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpResponse.IsPositive">
      <summary>
            Gets the status of <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Code" />. True if <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Code" /> is between 200 and 399.
            </summary>
    </member>
    <member name="P:Limilabs.Client.SMTP.SmtpResponse.Message">
      <summary>
            First line of the response or empty string if <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Lines" /> collection is empty.
            </summary>
    </member>
    <member name="T:Limilabs.Mail.Templates.Template">
      <summary>
            Represents the template that can be used to create email messages.
            </summary>
      <remarks>
        <code>
            string text = Template
                .LoadFromFile("template.txt")
                .DataFrom(reportData)
                .Render();
            </code>
            Template sample:
            <pre>
            Hi [FirstName] [LastName],
            
            On [PurchaseDate:yyyy/MM/dd HH:mm] you purchased following items:
            [foreach OrderItems]
                - [Id] [Name] [Price]
            [end]
            </pre></remarks>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.Create(System.String)">
      <summary>
            Creates new template using specified template text.
            </summary>
      <param name="templateText">Template's text.</param>
      <returns>New template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.FromFile(System.String)">
      <summary>
            Loads a template from file.
            </summary>
      <param name="path">The file to read data from.</param>
      <returns>Loaded template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.ClearDataSources">
      <summary>
            Clears all data sources for this template.
            </summary>
      <returns>Current template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.DataFrom(System.Object)">
      <summary>
            Specifies object that will be used as a data source for this template.
            If the method is called more than once, only last object is used.
            </summary>
      <param name="data">Data source for this template.</param>
      <returns>Current template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.DataFrom(System.Collections.IDictionary)">
      <summary>
            Specifies IDictionary that will be used as a data source for this template.
            If the method is called more than once, only last object is used.
            </summary>
      <param name="data">IDictionary sata source for this template.</param>
      <returns>Current template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.PermanentDataFrom(System.Object)">
      <summary>
            Specifies object that will be used as a data source for this template.
            If the method is called more than once, all objects are used.
            </summary>
      <param name="data">Data source for this template.</param>
      <returns>Current template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.PermanentDataFrom(System.Collections.IDictionary)">
      <summary>
            Specifies <see cref="T:System.Collections.IDictionary" /> that will be used as a data source for this template.
            If the method is called more than once, all objects are used.
            </summary>
      <param name="data">IDictionary data source for this template.</param>
      <returns>Current template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.Render">
      <summary>
            Renders the template.
            </summary>
      <returns>Rendered template.</returns>
    </member>
    <member name="M:Limilabs.Mail.Templates.Template.AddKey(System.String,System.String)">
      <summary>
            Adds a custom key used by this template.
            </summary>
      <param name="key">Key name.</param>
      <param name="value">Value to be used when template is rendered.</param>
      <returns>Current template.</returns>
    </member>
    <member name="P:Limilabs.Mail.Templates.Template.Item(System.String)">
      <summary>
            Gets or sets custom keys used by this template.
            </summary>
      <param name="key">Key name.</param>
      <returns>Value to be used when template is rendered.</returns>
    </member>
    <member name="T:Limilabs.Mail.Templates.TemplateException">
      <summary>
            Represents an error that occurred during template parsing.
            </summary>
    </member>
    <member name="M:Limilabs.Mail.Templates.TemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes new instance of TemplateException with serialized data.
            </summary>
      <param name="info">Serialized object data.</param>
      <param name="context">Contextual information.</param>
    </member>
  </members>
</doc>